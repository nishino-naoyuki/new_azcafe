/*
-- Query: SELECT * FROM old_azcafe.ASSIGNMENT_TBL
-- Date: 2021-03-02 10:36
*/
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-01]ｉｆ文１','以下のプログラムの？の部分を埋めて<br>変数の値が２０の時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK0101{<br>	public static void main(String[] args){<br>	    int num = 20;<br>           if( ？ ){<br>               	System.out.println(\"OK!\",1,0);<br>           }<br>	}<br>}<br>-----------<br>最後に改行は入っていません',1,'2017-08-28 08:13:01','2019-11-08 18:13:05',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-02]ｉｆ文２','以下のプログラムの？の部分を埋めて<br>変数の値が２０より小さい時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK0102{<br>	public static void main(String[] args){<br>	    int num = 19;<br>           if( ？ ){<br>               	System.out.println(\"OK!\");<br>           }<br>	}<br>}<br>-----------<br>最後に改行は入っていません',1,'2017-08-28 08:13:01','2017-04-25 09:14:06',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-03]ｉｆ文３','以下のプログラムの？の部分を埋めて<br>変数の値が２０ではない時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK0103{<br>	public static void main(String[] args){<br>	    int num = 15;<br>           if( ？ ){<br>               	System.out.println(\"OK!\");<br>           }<br>	}<br>}<br>-----------<br>最後に改行は入っていません',1,'2017-08-28 08:13:01','2017-04-25 09:19:11',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-04]ｉｆ文４','以下のプログラムの？の部分を埋めて<br>変数の値が２０以上時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK0104{<br>	public static void main(String[] args){<br>	    int num = 20;<br>           if( ？ ){<br>               	System.out.println(\"OK!\");<br>           }<br>	}<br>}<br>-----------<br>最後に改行は入っていません',1,'2017-08-28 08:13:01','2017-04-25 09:20:37',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-05]ｉｆ文５','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値が 0 の時だけコンソールに以下の<br>文字が出るようにしてください。<br>----------------<br>num is 0!<br>---------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0105{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 09:39:34',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-06]ｉｆ文６','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値が 20 より大きい時だけコンソールに以下の<br>文字が出るようにしてください。<br>----------------<br>num is over 20!<br>---------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0106{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 09:51:37',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-07]ｉｆ文７','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値に１０を掛けた値が１００以上の場合のみ<br>以下の文字が出るようにしてください。<br>----------------<br>num * 100 is over 100!<br>---------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0107{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 09:57:29',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK01-08]ｉｆ文８','以下のプログラムを実行すると変数 num1　と　num2  に数字が代入されます。<br>続きを作成し、num1とnum2を足した合計が10になる場合は<br>以下の文字が出るようにしてください。<br>----------------<br>num1 + num2 is 10!<br>---------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0108{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 10:05:23',1,1,2,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-01]ｉｆ文９','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値が10のとき、それ以外のときでそれぞれ<br>以下の文字が出るようにしてください。<br>-------[numが10の時]---------<br>num is 10!<br>-------------------------------<br>-------[numが10じゃない時]---------<br>num is not 10!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0201{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 10:14:05',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-01]論理演算子１','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、num1 が10以上で且つnum2 が 5以下 のときは<br>以下の文字が出るようにしてください。<br>-------[num1 が10以上で且つnum2 が 5以下の時]---------<br>num1 is over 10 AND num2 is under 5!<br>-------------------------------<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0201{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:32:32',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-02]論理演算子2','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、num1 が10以上またはnum2 が 5以下 のときは<br>以下の文字が出るようにしてください。<br>-------[num1 が10以上で且つnum2 が 5以下の時]---------<br>num1 is over 10 OR num2 is under 5!<br>-------------------------------<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0203{<br>    public static void main(String[] args){<br>     int num1 = Integer.parseInt(args[0]);<br>     int num2 = Integer.parseInt(args[1]);<br>// ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-04-25 10:36:20',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-02]ｉｆ文１０','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値が10以下の時、5以下の時でそれぞれ<br>以下の文字が出るようにしてください。<br>-------[numが10以下の時]---------<br>num is under 10!<br>-------------------------------<br>-------[numが5以下の時]---------<br>num is under 5!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0202{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-04-25 10:46:08',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-03]ｉｆ文１１','以下のプログラムを実行すると変数 num に数字が代入されます。<br>続きを作成し、numの値が1の時、2の時、3の時、4の時でそれぞれ<br>以下の文字が出るようにしてください。<br>-------[numが1の時]---------<br>num is 1!<br>-------[numが2の時]---------<br>num is 2!<br>-------[numが3の時]---------<br>num is 3!<br>-------[numが4の時]---------<br>num is 4!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0203{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}<br><br>ヒント：switchを使おう！教科書P.68',1,'2017-08-28 08:13:01','2017-04-25 11:04:48',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-04]ｉｆ文１２','以下のプログラムを実行すると変数 num1 と num2に数字が代入されます。<br>続きを作成し、num1とnum2の合計が10の時、100の時、それ以外のときで<br>それぞれ、コンソールに文字を表示してください。<br><br>----[合計が10の時]---<br>total is 10<br>----[合計が100の時]---<br>total is 100<br>----[上記以外のとき]---<br>OH NO!<br>--------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK020{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2019-12-12 14:43:59',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-05]ｉｆ文１３','以下のプログラムを実行すると変数 numに数字が代入されます。<br>続きを作成し、numが偶数の時、奇数の時で<br>それぞれ、コンソールに文字を表示してください。<br><br>----[偶数の時]---<br>even!<br>----[奇数の時]---<br>odd<br>--------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0205{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}<br><br>ヒント：２で割った余りが0なら偶数、そうでなければ奇数です。<br>　　　　2で割った余りは、「剰余」を使えば求められます。',1,'2017-08-28 08:13:01','2019-11-13 10:29:23',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK02-06]ｉｆ文１４','以下のプログラムを実行すると変数 num1 と num2に数字が代入されます。<br>続きを作成し、num1が100以上の時はnum2に100を掛けた数値を出力してください。<br>num1が100より小さい場合は、num2にnum1の数をかけた数値を出力してください。<br>以下の文字が出るようにしてください。<br><br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK020{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}<br><br>例）num1が120でnum2が5の場合<br>　　100 * 5 = 500なので<br>     コンソールには500と表示する<br><br>　　num1が90でnum2が6の場合<br>　　90 * 6 = 540なので<br>　　コンソールには、540と表示する',1,'2017-08-28 08:13:01','2017-04-25 11:40:05',1,1,3,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-03]論理演算子３','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1のとき]---------<br>num1 is 1!<br>-------[num2が2のとき]---------<br>num2 is 2!<br>-------[num1が10 且つnum2が10のとき]---------<br>num1 is 10! AND num2 is 10!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0303{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:32:47',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-04]論理演算子４','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1のとき]---------<br>num1 is 1!<br>-------[num2が2のとき]---------<br>num2 is 2!<br>-------[num1が10 　又は　num2が10のとき]---------<br>num1 is 10! OR num2 is 10!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0304{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:32:59',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-05]論理演算子５','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1のとき 且つ num2が2のとき]---------<br>num1 is 1! AND num2 is 2!<br>-------[num1が10 　又は　num2が10のとき]---------<br>num1 is 10! OR num2 is 10!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0305{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:33:13',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-06]論理演算子６','以下のプログラムを実行すると変数 num1 、 num2 、num3に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1 且つ num2が2 且つ num3が3の時]---------<br>num1 is 1! AND num2 is 2! AND num3 is 3!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0305{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>	    int num3 = Integer.parseInt(args[2]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:33:26',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-07]論理演算子７','以下のプログラムを実行すると変数 num1 、 num2 、num3に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1 又は num2が2 又は num3が3の時]---------<br>num1 is 1! OR num2 is 2! OR num3 is 3!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0307{<br>    public static void main(String[] args){<br>     int num1 = Integer.parseInt(args[0]);<br>     int num2 = Integer.parseInt(args[1]);<br>     int num3 = Integer.parseInt(args[2]);<br>// ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:33:39',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-08]論理演算子８','以下のプログラムを実行すると変数 num1 、 num2 、num3に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1 又は num2が2 で且つ num3が3の時]---------<br>num1 is 1! OR num2 is 2! AND num3 is 3!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0308{<br>    public static void main(String[] args){<br>     int num1 = Integer.parseInt(args[0]);<br>     int num2 = Integer.parseInt(args[1]);<br>     int num3 = Integer.parseInt(args[2]);<br>// ココから下に続きを書いてください<br>    }<br>}<br><br>ヒント：<br>分かりやすいようにプログラムにはカッコをつけよう！<br>num1 |  num2 | num3 | 真or偽<br>   0     |     2    |    3    | 　真 <br>   1     |     0    |    3    | 　真 <br>   1     |     0    |    0    | 　偽<br>    0    |     0    |    3    | 　偽 ',1,'2017-08-28 08:13:01','2017-05-01 09:43:32',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-09]論理演算子９','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1 又は 2　 且つ 　num2が 3 又は 4 のとき]---------<br>num1 is 1 OR 2 AND num2 is 3 OR 4<br>-------[num1が3 又は 4　 且つ 　num2が 4 のとき]---------<br>num1 is 3 OR 4 AND num2 is 4<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0309{<br>　public static void main(String[] args){<br>　　int num1 = Integer.parseInt(args[0]);<br>　　int num2 = Integer.parseInt(args[1]);<br>　　// ココから下に続きを書いてください<br>　}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:33:52',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK03-10]論理演算子１０','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、num1 * num2の値を変数numに代入し、<br>変数numがそれぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[numが0以上　100未満の場合]---------<br>num is over 0 under 100<br>-------[numが１００以上　２５０未満の時]---------<br>num is over 100 under 250<br>-------[numが250以上の場合]---------<br>num is over 250<br>-------------------------------<br>※最後に改行は入っていません<br>※計算結果マイナスの場合は何も表示しない<br><br>====プログラム====<br>public class JSSJK0310{<br>　public static void main(String[] args){<br>　　int num1 = Integer.parseInt(args[0]);<br>　　int num2 = Integer.parseInt(args[1]);<br>　　// ココから下に続きを書いてください<br>　}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:34:05',1,1,4,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-01]論理演算子１１','次のプログラムを否定（!）を使った形で書き直してください<br><br>public class Kadai0401{<br>　public static void main(String[] args){<br>　　int a = 1;<br>　　if( a != 0 ){<br>　　　　System.out.print(\"a is not 1!\");<br>　　}<br>　}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:35:01',1,1,5,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-02]論理演算子１２','次のプログラムを否定（!）を使った形で書き直してください<br><br>public class Kadai0402{<br>　public static void main(String[] args){<br>     	int num1 = Integer.parseInt(args[0]);<br>     	int num2 = Integer.parseInt(args[1]);<br>　　   if( num1  == 0 &&  num2 == 0 ){<br>　　　　  System.out.print(\"num1 is 0 , num2 is 0\");<br>　　    }<br>　}<br>}<br><br>ヒント：<br>if文の条件式を書き換える<br>「num1が０且つnum2が０」の反対を考えると良い<br>反対の意味を ! で否定すればよい。<br>「num1が０」の反対は？<br>「且つ」の反対は何になるか？？',1,'2017-08-28 08:13:01','2017-05-22 05:35:12',1,1,5,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-03]論理演算子１３','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、num1にnum2を足した値について以下の通り出力してください<br><br>-------[足した値が0又は1のとき]---------<br>This is 1 or 0<br>-------[足した値が10のとき]---------<br>This is 10<br>-------[足した値が20以上30以下の時]---------<br>This is 20-30<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0403{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 03:47:54',1,1,5,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-04]論理演算子１４','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、num1に10を足した数と、num2を5倍した数を比較してください。<br><br>比較結果、num1に10足した数が大きければ<br>---------------------<br>num1 is Big!<br>---------------------<br>をnum2を5倍した値が大きければ<br>--------------------<br>num2 is Big!<br>---------------------<br>を表示してください<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0404{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 04:05:00',1,1,5,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-05]論理演算子１５','以下のプログラムを実行すると変数 numに数字が代入されます。<br>続きを作成し、以下の文字列を表示してください。<br><br>---[numの10の位が0～4の場合]---<br>the ten\'s place of YYYY is 0-4!<br>---[numの10の位が5～9の場合]---<br>the ten\'s place of YYYY is 5-9!<br>---------------------<br>を表示してください<br>※YYYYは、numの値が入る<br>※最後に改行は入っていません<br>※numが10未満の場合の10の位は0です<br><br>====プログラム====<br>public class JSSJK0405{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:35:23',1,1,5);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK04-06]論理演算子１６','以下のプログラムを実行すると変数 numに数字が代入されます。<br>続きを作成し、以下の文字列を表示してください。<br><br>---[numが偶数の場合]---<br>YYYY is even<br>---[numが奇数の場合]---<br>YYYY is odd<br>---------------------<br>を表示してください<br>※YYYYは、numの値が入る<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0406{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:35:38',1,1,5,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-01]配列１','以下のプログラムの「？」の部分を埋めて<br>配列の中身を表示するプログラムを完成させよう！<br>-----------<br>public class JssJk0501{<br>	public static void main(String[] args){<br>	    ？ arry = new int[5];<br>             arry[？] = 10;<br>             arry[1] = 8;<br>             arry[2] = 4;<br>             arry[？] = 7;<br>             arry[？] = 0;<br>		<br>             for( int i = 0 ; ？; ？ ){<br>                  System.out.print( arry[？] + \" \");<br>             }<br>	}<br>}<br>-----------<br>表示結果は以下のようになる<br>10 8 4 7 0<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2017-05-19 10:31:27',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-02]配列２','以下のプログラムの「？」を埋めて配列の中身を表示するプログラムを作成せよ！<br>配列の中身は6個とし、値は 2、3、4、5、6、7とする<br>-----------<br>public class JssJk0502{<br>    public static void main(String[] args){<br>        ？ arry = ？<br>      <br>             for( ？  ？; ？ ){<br>                  System.out.print( ？ + \" \");<br>             }<br>    }<br>}<br>-----------<br>表示結果は以下のようになる<br>2 3 4 5 6 7 <br>※最後に改行は入らない<br>ヒント：宣言と初期化を同時にしている。教科書P.94',1,'2017-08-28 08:13:01','2017-05-19 10:31:39',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-03]配列３','配列を使って、テストの点数を表示するプログラムを作りましょう！<br><br>↓のプログラムの「？」を埋めて、プログラムを完成させよう！<br>ちなみに、国語は70点、数学は85点、英語は62点です。<br>------------<br>public class JssJk0503{<br>    public static void main(String[] args){<br>        ？ kyoka = new String[3];<br>        ？ score = { ？ };<br>      <br>         kyoka[0] = \"Kokugo\";<br>         kyoka[1] = \"Math\";<br>         kyoka[2] = \"English\";<br><br>             for( ？  ？; ？ ){<br>                  System.out.println( 　kyoka [？]+\" : \"+score[？]);<br>             }<br>    }<br>}<br>------------<br>このプログラムの表示は↓のようになります<br>====<br>Kokugo : 70<br>Math : 85<br>English : 62<br>====<br>※最後に改行が入る',1,'2017-08-28 08:13:01','2017-06-07 23:57:57',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-04]配列４','次の数値が入った配列を作って、for文を使って表示しましょう！<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>10 20 30 40 50 <br>-----<br>とします<br>※最後に改行が入っていない<br>※50の後には半角スペースが入っている',1,'2017-08-28 08:13:01','2017-05-19 10:32:03',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-06]配列６','次の数値が入った配列を作って、配列の中の値の数値の平均を計算して表示しましょう！<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>avr is XXX<br>-----<br>とします<br>※最後に改行が入っていない<br>※XXXは配列の値の平均値<br><br>ヒント：以下の手順で行います！<br>１．for文を使って配列の値を別の整数型変数に集計する<br>２．集計した値を配列の数（要素数）で割る<br>３．計算結果をコンソールに表示する',1,'2017-08-28 08:13:01','2017-05-19 10:32:26',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-05]配列５','次の数値が入った配列を作って、配列の中の値の合計を表示しよう！<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>total is XXX<br>-----<br>とします<br>※最後に改行が入っていない<br>※XXXは配列の値の合計値<br><br>以下のプログラムの「？」を埋めて完成させよう！<br>=====<br>public class JssJk0505{<br>	public static void main(String[] args){<br>		？ arry = ？;<br>		<br>		int total = ？;<br>		for( int i = 0; ？;？ ){<br>			total = ？<br>		}<br>		<br>		System.out.print(\"total is \"+？);<br>	}<br>}<br><br>=====',1,'2017-08-28 08:13:01','2017-05-19 10:32:11',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-07]配列７','以下のような配列があったとして、配列の1番目と3番目の値を配列を参照して表示してください<br>int[] arry = {10 , 12, 14 , 16};<br><br>※参照して表示とは↓の「？」を埋めるということ<br>System.out.print( arry[　？ ] );<br><br>コンソールには、以下のようにスペースで区切って表示しましょう<br>------------<br>10 14 <br>------------',1,'2017-08-28 08:13:01','2017-05-19 10:32:36',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-08]配列８','次の数値が入ったarryという名前の配列を作って、配列の中の値を表示しましょう<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>arry[0] is 10<br>arry[1] is 20<br>arry[2] is 30<br>arry[3] is 40<br>arry[4] is 50<br>-----<br>とします<br>※最後に改行が入っている<br>※表示はfor文を使用すること！<br><br>ヒント：<br>for文で表示するプログラムは「？」を埋めればOKです<br>======<br>for(？; ？ ;？){<br>  system.out.println(\"arry[\" + ？ + \"] is \"+　？);<br>}<br>======',1,'2017-08-28 08:13:01','2017-05-19 10:32:52',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-09]配列９','100個の要素を持つ配列を宣言して、for文を使って、配列に対して順に１～１００まで代入しましょう。<br>代入した後、配列の10個目～20個目に入っているデータを表示しましょう！<br><br>表示は以下のようにスペースで区切って表示する<br>--------------------<br>10 11 12 13 14 15 16 17 18 19 20 <br>-------------------<br>※最後に改行は入っていない<br>※for文は2回出てくる',1,'2017-08-28 08:13:01','2017-05-19 10:33:04',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-10]配列１０','次の数値が入った配列を作って、配列の中の値を逆順で表示しましょう！<br>10,20,30,40,50<br><br>表示は以下のようになるようにしてください<br>----------<br>50 40 30 20 10 <br>----------<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2017-05-19 10:33:22',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-11]配列１１','１から１０まで代入されている配列を２つ作り、それぞれの1番目の要素同士を足したもの、2番目の要素同士を<br>足したものをコンソールにそれぞれ表示してください<br><br>1つ目の配列<br>int[] arry1 = { 1,2,3,4,5,6,7,8,9,10};<br>2つ目の配列<br>int[] arry2 = { 1,2,3,4,5,6,7,8,9,10 };<br><br>コンソールの表示は以下のようにお願いします<br>------<br>arry1[0] + arry2[0] = 2<br>arry1[1] + arry2[1] = 4<br>・<br>（略）<br>・<br>arry1[9] + arry2[9] = 20<br>------<br>※最後に改行が入ります<br>※for文を使いましょう！',1,'2017-08-28 08:13:01','2017-05-19 10:33:33',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-12]配列１２','１～１００までの数値が順に入っている要素数１００の配列１と<br>１５１～２５０までの数値が順に入っている要素数１００の配列２を<br>つくって、配列１と配列２を順に足し算をした結果を<br>以下のようにコンソールに表示しなさい。<br><br>------<br>1 + 151 = 152<br>2 + 152 = 154<br>3 + 153 = 156<br>・<br>（略）<br>・<br>98+ 248 = 346<br>99+ 249 = 348<br>100 + 250 = 350<br>------<br>※最後に改行が入ります<br>※for文は全部で最大３つ使います<br>　　１つ目→配列１に値を入れるためのfor文<br>　　２つ目→配列２に値を入れるためのfor文<br>　　３つ目→配列１と配列２を足し算して結果を表示する為のfor文<br>　',1,'2017-08-28 08:13:01','2017-05-19 10:33:48',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-17]配列１７','国語と数学と英語の１０人分の点数は以下の通りです<br>-------------<br>国語：50 90 95 70 65 55 88 91 80 75<br>数学：20 45 90 82 76 80 96 74 92 82<br>英語：15 80 88 60 50 76 84 94 26 58<br>-------------<br>それぞれを配列にいれて、それぞれの教科の平均と３教科合計点の<br>平均点を以下のように表示しましょう<br>=====<br>Kokugo : XXX<br>Math : XXX<br>English : XXX<br>Total : XXX<br>=====<br>※XXXはそれぞれの平均点<br>　平均点は小数第２位まで表示する。小数点第３位以下は切り捨てる',1,'2017-08-28 08:13:01','2017-05-19 10:35:34',2,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-13]配列１３','以下のような数値が代入されている配列があります。<br>配列１ =  1, 3 , 5,   7 , 9 , 11<br>配列２ =  4, 6 , 8 ,10 ,12,14<br>この配列１と配列２の掛け算の結果を別の配列（配列名はans）に代入して<br>結果を表示してください。<br><br>結果は以下のように表示してください<br>----<br>ans[0]=4<br>ans[1]=18<br>ans[2]=40<br>ans[3]=70<br>ans[4]=108<br>ans[5]=154<br>----<br>※最後に改行が入ります',1,'2017-08-28 08:13:01','2017-05-19 10:34:22',2,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-14]配列１４','以下の値が格納されている配列１を作りましょう。<br>次に配列１とfor文を用いて、配列１の値が逆順に入っている配列２を作成しましょう。<br>最後に、配列１と配列２の値を表示してください<br><br>配列１の値<br>1,58,68,42,117,6,35,94,25<br><br>コンソールの表示↓<br>----------<br>arry1=1 58 68 42 117 6 35 94 25 <br>arry2=25 94 35 6 117 42 68 58 1 <br>---------<br>※最後に改行は入っていません',1,'2017-08-28 08:13:01','2017-05-19 10:34:34',1,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-15]配列１５','以下のように値が格納されている文字列（String）の配列がある。<br>String[] strs= {\"J\",\"p\",\"a\",\"n\",\"!\",\"\"};<br><br>配列の２番目（Jとpの間）に文字列\"a\"を入れて<br>以下のような並びになる配列をつくり、コンソールに表示してください<br>※完成した配列の中身<br>\"J\",\"a\",\"p\",\"a\",\"n\",\"!\"<br><br>コンソールには<br>----<br>strs=Japan!<br>----<br>と表示してください<br><br>ヒント：まず、２文字目以降を１つ後ろにずらして、２文字目に「a」を代入すればOK<br>　　　　for文を使用します。',1,'2017-08-28 08:13:01','2017-06-08 00:06:50',2,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK07-16]配列１６','以下の配列がある場合に、最も大きい値と小さい値を探し出し値をコンソールに表示してください<br>int[] arry = {50,80,22,99,3,4,0,12,85};<br><br>コンソールの表示は以下のようにお願いします<br>----<br>max value is XX<br>minimum value is YY<br>----<br>※XXは配列の中の最大値<br>※YYは配列の中の最小値<br>※最後に改行は入らない<br>※最大値と最小値はプログラムを使って探し出すこと！（for文とif文を使用する）',1,'2017-08-28 08:13:01','2017-06-08 00:04:48',2,1,8,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-01]２次元配列１','2次元配列の全てのデータを表示するプログラムです<br>「？」を埋めてプログラムを完成させてください<br><br>----<br>public class JssJk0601{<br>	public static void main(String[] args){<br>		int[][] arry = {<br>                                        {10,20,40,50,60},<br>                                        {11,22,44,55,66},<br>                                        {13,23,45,56,78}<br>                                   };<br>		<br>		for( int i = 0;  ？ ;  ？ ){<br>			for( int j = 0;  ？ ; ？ ){<br>				System.out.println( arry[ ？ ][ ？ ] );<br>			}<br>		}<br>	}<br>}<br>------',1,'2017-08-28 08:13:01','2017-05-19 10:29:23',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-02]２次元配列２','２×４の2次元配列(arry)を全て0で初期化して、最初のデータに1を、最後のデータに-1を入れて<br>全てのデータを表示したい。<br>以下のプログラムの「？」を埋めてプログラムを完成させてください<br>------<br>public class JssJk0602{<br>	public static void main(String[] args){<br>		？ arry = {<br>                                    {0,0,0,0},<br>                                    {0,0,0,0}<br>	                   };<br>					   <br>		arry[？][？] = 1;<br>		arry[？][？] = -1;<br>		<br>		for( int i = 0; ？; ？ ){<br>			for( int j = 0; ？; ？ ){<br>				System.out.println( arry[？][？] );<br>			}<br>		}<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-19 10:29:35',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-03]２次元配列３','２×４の2次元配列(arry)を全て0で初期化して、最初のデータに1を、最後のデータに-1を入れて<br>全てのデータを表示したい。<br>以下のプログラムの「？」を埋めてプログラムを完成させてください<br>※先ほどの問題とやり方が少し違います。<br><br>------<br>public class JssJk0603{<br>	public static void main(String[] args){<br>		？ arry = new ？;<br>		<br>                // initialize all zero<br>		for( int i = 0; ？; ？ ){<br>			for( int j = 0; ？; ？ ){<br>				arry[？][？] = ？;<br>			}<br>		}<br>					   <br>		arry[？][？] = 1;<br>		arry[？][？] = -1;<br>		<br>		for( int i = 0; ？; ？ ){<br>			for( int j = 0; ？; ？ ){<br>				System.out.println( arry[？][？] );<br>			}<br>		}<br>	}<br>}<br>------',1,'2017-08-28 08:13:01','2017-05-19 10:29:45',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-04]２次元配列４','以下のプログラムを二次元配列を使って書き直しましょう<br>---------------<br>public class JssJk0604{<br>	public static void main(String[] args){<br>		int[] data1 = { 170, 173, 164, 134 };<br>		int[] data2 = { 180, 159, 188, 175 };<br>		<br>		for( int i = 0; i < data1.length; i++ ){<br>			System.out.println( data1[i] );<br>		}<br>		for( int i = 0; i < data2.length; i++ ){<br>			System.out.println( data2[i] );<br>		}<br>	}<br>}<br>-----------------<br>↓「？」部分を埋めて完成させましょう<br>-----------------<br>public class JssJk0604{<br>	public static void main(String[] args){<br>		？ datas = ?<br>		<br>		for( int i = 0; ？; ？ ){<br>			for( int j = 0; ？; ？ ){<br>					System.out.println( datas[？][？] );<br>			}<br>		}<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-19 10:29:57',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-05]２次元配列５','下のプログラムは、2次元配列の中にある80を表示する<br>プログラムです。「？」を埋めてプログラムを完成させてください<br><br>-----------<br>public class JssJk0605{<br>	public static void main(String[] args){<br>		int[][] arry = {<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0,80, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>			{ 0, 0, 0, 0, 0, 0 },<br>		};<br>		<br>		// display 80<br>		System.out.print( ？ );<br>	}<br>}<br>-----------',1,'2017-08-28 08:13:01','2017-05-19 10:30:12',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-06]2次元配列６','以下のプログラムは、配列の中身を全て表示しようとする<br>プログラムですが、コンパイルエラーとなり動きません。<br>正しく修正して、実行できるようにしてください。<br><br><br>-----<br>public class JssJk0606{<br>	public static void main(String[] args){<br>		int arry = {<br>			{10,11,12,13}<br>			{11,12,13,15}<br>			{\"12\",\"10\",\"5\",\"0\"}<br>		};<br>		<br>		for( int i = 0; i < arry.length;i++ ){<br>			for( int j = 0; j < arry[i].length; j++ ){<br>				System.out.print( arry );<br>			}<br>		}<br>	}<br>}<br>------',1,'2017-08-28 08:13:01','2017-05-19 10:30:23',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-07]2次元配列７','以下の2次元配列の中にある数値を全て合計して表示するプログラムを作成してください<br><br>int[][] arry = {<br>    {  0,  1,  2,  3,  4,  5,  6},<br>    {10,11,12,13,14,15,16},<br>    {14,15,16,17,18,19,20}<br>};<br><br>コンソールの表示は以下のようにお願いします<br>----<br>total is XXX<br>----<br>※最後に改行は入らない<br>※XXXは合計値<br><br>ヒント：以下のプログラムの「？」を埋めよう<br>------<br>public class JssJk0607{<br>	public static void main(String[] args){<br>		int[][] arry = {<br>		    {  0,  1,  2,  3,  4,  5,  6},<br>		    {10,11,12,13,14,15,16},<br>		    {14,15,16,17,18,19,20}<br>		};<br>		<br>		int total = 0;<br>		for( int i = 0; ？;？ ){<br>			for( int j = 0; ？; ？ ){<br>				total = ？;<br>			}<br>		}<br>		<br>		System.out.print(\"total is \"+？);<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-19 10:30:35',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-08]2次元配列８','以下の2次元配列の中に何個要素数があるかを数えるプログラムを作成しなさい<br><br>int[][] arry = {<br>    {  0,  1,  2,  3,  4,  5,  6},<br>    {10,11,12,13,14,15,16},<br>    {14,15,16,17,18,19,20}<br>};<br><br>コンソールの表示は以下のようにお願いします<br>----<br>elements is XXX<br>----<br>※最後に改行は入らない<br>※XXXは要素数<br><br>以下の「？」を埋めてプログラムを完成させよう！<br>----------<br>public class JssJk0608{<br>	public static void main(String[] args){<br>		int[][] arry = {<br>		    {  0,  1,  2,  3,  4,  5,  6},<br>		    {10,11,12,13,14,15,16},<br>		    {14,15,16,17,18,19,20}<br>		};<br>		<br>		int count = 0;<br>		for( int i = 0; i < arry.length;i++ ){<br>			for( int j = 0; j < arry[i].length; j++ ){<br>				？<br>			}<br>		}<br>		<br>		System.out.print(？);<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-19 10:30:49',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-09]2次元配列９','以下の2次元配列の中にある全ての数の平均を表示するプログラムを作成しなさい。<br>なお、計算結果は小数を扱う変数に格納して表示すること！<br><br>int[][] arry = {<br>    {  0,  1,  2,  3,  4,  5,  6},<br>    {10,11,12,13,14,15,16},<br>    {14,15,16,17,18,19,20}<br>};<br><br>コンソールの表示は以下のようにお願いします<br>----<br>AVR is XXX<br>----<br>※最後に改行は入らない<br>※XXXは平均値',1,'2017-08-28 08:13:01','2017-05-19 10:30:57',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-12]二次元配列１２','以下の2次元配列をfor文で表示させて、コンソールに指定の文字を表示してください<br><br>String[][] strArry = {<br>    { \"a\",\"b\",\"c\",\"d\" },<br>    { \"e\",\"f\",\"g\",\"h\" },<br>    { \"i\",\"j\",\"k\",\"l\" },<br>    { \"m\",\"n\",\"o\",\"p\" }<br>};<br><br>コンソールに表示するのは<br>-------<br>aeim bfjn cgko dhip<br>-------<br>※最後に改行を含まず',1,'2017-08-28 08:13:01','2017-05-19 10:29:03',2,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-10]二次元配列１０','以下の二次元配列を表示してください<br>int[][] arry ={<br>    {1,2,3,4},<br>    {11,22,33,44},<br>    {55,66,77,88}<br>};<br><br>次のようにコンソールに表示してください<br>-------<br>arry[0] : 1 2 3 4<br>arry[1] : 11 22 33 44<br>arry[2] : 55 66 77 88<br>-------<br>※最後に改行は入っています',1,'2017-08-28 08:13:01','2017-05-19 10:31:08',1,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK08-11]二次元配列１１','9×9の2次元配列を作成し、九九の答えを代入してください。<br>さらに、以下のようにコンソールに表示してください。<br>---------<br>1 2 3 4 ..（略）.. 8 9<br>2 4 6 8 ..（略）...16 18<br>3 6 9 12 ...（略）... 24 27<br>（略）<br>8 16 24 32...（略）...64 72<br>9 18 27 36...（略）...72 81<br>----------',1,'2017-08-28 08:13:01','2017-05-19 10:29:11',2,1,9,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK05-01]繰り返し１','for文をつかって<br>-----<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>Hello Java!<br>-----<br>と表示するプログラムを作成してください',1,'2017-08-28 08:13:01','2017-05-19 10:41:20',1,1,6,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK05-02]繰り返し２','１～１０までの総和をfor文を使って計算してください<br><br>表示は以下のようにしてください<br>-----<br>total is XXX<br>-----<br>※XXXは総和の答え<br>※最後に改行を含みません',1,'2017-08-28 08:13:01','2017-05-19 10:44:21',1,1,6,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK05-03]繰り返し３','for文をつかって以下の表示をして下さい（for文は何個使ってもOK）<br>------------<br>YES!<br>YES!<br>YES!<br>NO!<br>NO!<br>NO!<br>NO!<br>NO!<br>GO!<br>GO!<br>GO!<br>GO!<br>GO!<br>GO!<br>GO!<br>------------',1,'2017-08-28 08:13:01','2017-05-29 04:50:47',1,1,6,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK05-04]繰り返し４','for文を使って、以下の表示をして下さい<br>------<br>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15<br>------<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2019-11-21 12:04:54',1,1,6,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK05-05]繰り返し５','１０の階乗（10×9×8×7×6×5×4×3×2×1）をfor文をつかってもとめてください。<br>シンプルに答えだけを改行なしで表示してください',1,'2017-08-28 08:13:01','2017-05-19 10:59:52',1,1,6,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK06-01]繰り返し６','while文を使って、以下のような表示をするプログラムを作れ<br>-------<br>while!<br>while!<br>while!<br>while!<br>while!<br>while!<br>while!<br>while!<br>-------',1,'2017-08-28 08:13:01','2017-05-19 11:06:51',1,1,7,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK06-02]繰り返し６','１から順に足して行き、30を超えるたら終了するプログラムを作成する<br>「？」の埋めてプログラムを完成させてください<br>----------<br>public class JssJk0602{<br>	public static void main(String[] args){<br>	   <br>	   int total = ？;<br>	   int count = ？;<br>	   <br>	   while( ？ ){<br>	   		total = ？;<br>			System.out.println(\"add \"+count+\" = \"+total);<br>			？;<br>	   }<br>	}<br>}<br>--------',1,'2017-08-28 08:13:01','2017-05-19 11:16:05',1,1,7,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK06-03]繰り返し８','while文を用いて１００から２つづ減らして行ったとき、０になるまでに何回ループを実行するか？<br>単純にループをした回数のみを改行なしで表示せよ',1,'2017-08-28 08:13:01','2017-05-19 11:23:18',1,1,7,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK06-04]何日で10万円？','1日目1円、2日目2円、3日目4円と倍ずつ貯金して何日で10万円になるか確認するプログラムをつくりなさい<br>10万円を超える日の日数を、そのまま改行せずに表示してください。',1,'2017-08-28 08:13:01','2019-11-29 13:49:51',1,1,7,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK09-01]メソッド１','「hello!」と表示するメソッドを作成して呼び出してください。<br>メソッドの名前は「hello」にしましょう。<br>？の部分を埋めて完成させましょう。<br>---------------------<br>public class JssJk0901{<br>	public static void main(String[] args){<br>	    ？？？<br>	}<br>	<br>	？？？？{<br>		System.out.println(\"hello!\");<br>	}<br>}<br>---------------------<br>ヒント：教科書P.103、104',1,'2017-08-28 08:13:01','2017-05-29 02:40:54',1,1,10,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK09-02]メソッド２','以下のようなプログラムがあります。<br>----<br>public class JssJk0902{<br>	public static void main(String[] args){<br>　　　　　？<br>　　　　　？<br>	}<br>	<br>	public static void methodA(){<br>		System.out.println(\"this is A!\");	<br>	}<br>	public static void methodB(){<br>		System.out.println(\"this is B!\");	<br>	}<br>}<br>-----<br><br>コンソールに<br>------<br>this is B!<br>this is A!<br>------<br>と表示したい時、上記のプログラムの？の部分をどう記述すれば良いでしょうか？',1,'2017-08-28 08:13:01','2017-05-29 02:45:05',1,1,10,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK09-03]メソッド３','２つの数値を受け取り掛け算を行うmultiと言う名前のメソッドを作成します。<br>以下の？を埋めて、メソッドを完成させてください<br><br>------<br>public class JssJk0903{<br>	public static void main(String[] args){<br>	    ？(1,3);<br>	}<br>	<br>	？ multi(？){<br>		int ans = num1 * num2;<br>		System.out.println(ans);	<br>	}<br>}<br>-----',1,'2017-08-28 08:13:01','2017-05-29 02:50:03',1,1,10,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK09-04]メソッド４','数値の値を１つ受け取り、受け取った数に１００を足した数を表示する<br>plus100というメソッドを作成して、そのメソッドに20を渡して呼び出してください。<br>※表示の最後に改行は入らない<br><br>ヒント：作成するplus100の中で受け取った引数に100を足して表示してあげればよい',1,'2017-08-28 08:13:01','2017-05-29 02:56:22',1,1,10,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK09-05]メソッド５','3つの数値を受け取り、全て掛け算した結果を表示する multiAll という名前のメソッドを作成し、<br>そのメソッドに、5,6,8 を渡して呼び出してください。<br>※表示の最後に改行は入れない',1,'2017-08-28 08:13:01','2017-05-29 03:00:29',1,1,10,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK10-01]メソッド１０－１','３つの文字列を受け取り、連結して画面に表示するaddStringメソッドを作成して<br>mainメソッドから呼び出してください。<br>addStringを呼び出す時は<br>第1引数：abc<br>第2引数：def<br>第3引数：ghi<br>とする<br><br>表示する場合は、最後に改行は含まない',1,'2017-08-28 08:13:01','2017-05-29 06:20:58',1,1,11,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK10-02]メソッド１０－２','整数と文字列を１つずつ受け取って表示する displayと言うメソッドを作成し<br>以下のように表示してください。※最後に改行は入れません<br>--------------<br>XXX is YYY<br>--------------<br>XXXは引数で受け取った文字列<br>YYYは引数で受け取った整数<br><br>mainメソッドでdisplayを呼び出す際は、整数は10を文字列は「this」を渡してください',1,'2017-08-28 08:13:01','2017-05-29 11:46:04',1,1,11,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK10-03]メソッド１０－３','mainメソッドに渡された文字列を全て連結して表示するプログラムを作成してください<br><br>例）mainメソッドに「aaa」「bbb」「ccc」の３つが渡されたら<br>aaabbbccc<br>とコンソールに表示する',1,'2017-08-28 08:13:01','2017-05-29 12:01:15',1,1,11,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK10-04]メソッド１０－４','数値を２つ受け取り足した数を表示する plus というメソッドを作成してください。<br>plus メソッドに渡す２つの数値は、mainメソッドで受け取った2つの整数とします。<br><br>例）mainメソッドに　10 と 20 が渡されたのであれば<br>plusメソッドに10と20を渡してコンソールには<br>30<br>を表示する（最後に改行含まず）<br>ヒント：教科書p.115',1,'2017-08-28 08:13:01','2017-05-31 11:00:02',1,1,11,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK11-01]オーバーロード１','引き算を行うhikizanメソッドを呼び出して、<br>10 - 5 の結果と 12.3 - 3.5 の結果を表示しましょう！<br><br>以下のプログラムの？を埋めてプログラムを完成させてください<br>----<br>public class JssJk1101{<br>	public static void main(String[] args){<br>		<br>		？;<br>		？;<br>		<br>		System.out.println(\"10 - 5 = \"+result1);<br>		System.out.println(\"12.3 - 3.5 = \"+result2);<br>	}<br>	<br>	//method1<br>	public static int hikizan(int num1,int num2){<br>		int result = num1 - num2;<br>		return result;<br>	}<br>	<br>	//method2<br>	public static double hikizan(double num1,double num2){<br>		double result = num1 - num2;<br>		return result;<br>	}<br>}<br>--------',1,'2017-08-28 08:13:01','2019-11-13 10:11:49',1,1,12,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK11-02]オーバーロード２','以下のプログラムの？を埋めてプログラムを完成させよう<br><br>--------<br>public class JssJk1102{<br>	public static void main(String[] args){<br>		<br>		int result1 = multi(10,5);<br>		double result2 = multi(10.5,2.5);<br>		<br>		System.out.println(\"10 * 5 = \"+result1);<br>		System.out.println(\"10.5 * 2.5 = \"+result2);<br>	}<br>	<br>	//method1<br>	public static ？ multi(？ , ？){<br>		int result = num1 * num2;<br>		return result;<br>	}<br>	<br>	//method2<br>	public static ？ multi(？ , ？){<br>		double result = num1 * num2;<br>		return result;<br>	}<br>}<br>----',1,'2017-08-28 08:13:01','2017-06-19 01:24:03',1,1,12,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK11-03]オーバーロード３','以下のプログラムの？でmultiメソッドを呼び出して計算結果を表示しよう！<br>表示する計算結果は<br>１×２<br>３×４×５<br>６×７×８×９<br>の3種類です<br>----<br>public class JssJk1103{<br>	public static void main(String[] args){<br>		<br>		？;<br>		？;<br>		？;<br>		<br>		System.out.println(\"1 * 2 = \"+result1);<br>		System.out.println(\"3 * 4 * 5 = \"+result2);<br>		System.out.println(\"6 * 7 * 8 * 9 = \"+result3);<br>	}<br>	<br>	//method1<br>	public static int multi(int num1,int num2){<br>		int result = num1 * num2;<br>		return result;<br>	}<br>	<br>	//method2<br>	public static int multi(int num1,int num2,int num3){<br>		int result = num1 * num2 * num3;<br>		return result;<br>	}<br>	<br>	//method3<br>	public static int multi(int num1,int num2,int num3,int num4){<br>		int result = num1 * num2 * num3 * num4;<br>		return result;<br>	}<br>}<br>---',1,'2017-08-28 08:13:01','2019-11-13 10:11:02',1,1,12,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK11-04]オーバーロード４','プログラムの？を埋めてプログラムを完成させてください<br><br>------------<br>public class JssJk1104{<br>	public static void main(String[] args){<br>		<br>		int result1 = plus(1,2);<br>		int result2 = plus(3,4,5);<br>		int result3 = plus(6,7,8,9);<br>		<br>		System.out.println(\"1 + 2 = \"+result1);<br>		System.out.println(\"3 + 4 + 5 = \"+result2);<br>		System.out.println(\"6 + 7 + 8 + 9 = \"+result3);<br>	}<br>	<br>	//method1<br>	public static ？ plus(？){<br>		int result = num1 + num2;<br>		return result;<br>	}<br>	<br>	//method2<br>	public static ？ plus(？){<br>		int result = num1 + num2 + num3;<br>		return result;<br>	}<br>	<br>	//method3<br>	public static ？ plus(？){<br>		int result = num1 + num2 + num3 + num4;<br>		return result;<br>	}<br>}<br>-------------',1,'2017-08-28 08:13:01','2017-06-19 02:16:33',1,1,12,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK11-05]オーバーロード５','mainメソッドに渡される引数の数によって、表示を変える<br>プログラムがあります。<br>（１）mainメソッドの引数が１つの場合、引数は数値で、単純に引数を表示するだけ<br>（２）mainメソッドの引数が２つの場合、引数は２つとも数値で、引数の合計の数を表示する<br>（３）mainメソッドの引数が３つの場合、引数は最初の２つが数値で3つ目は文字列です。<br>　　　表示は「文字列+合計の数」を表示します。<br>例）<br>mainメソッドの引数が 10 の場合、コンソールには<br>------<br>10<br>-----<br>が表示されます。<br>mainメソッドの引数が 1 と 5 の場合、コンソールには<br>------<br>total:6<br>-----<br>が表示されます。<br>mainメソッドの引数が 10 と 15 と \"goukei:\" の場合、コンソールには<br>------<br>goukei:25<br>-----<br>が表示されます。<br><br>以下のプログラムの？の部分を埋めてプログラムを完成させなさい<br>--------------------<br>public class JssJk1105{<br>	public static void main(String[] args){<br>		<br>		int len = args.length;<br>		<br>		？？？（複数入る）<br>		<br>	}<br>	<br>	//method1<br>	public static void dispArgs(int num){<br>		System.out.println(num);<br>	}<br>	<br>	//method2<br>	public static void dispArgs(int num1,int num2){<br>		System.out.println(\"total:\"+(num1+num2));<br>	}<br>	<br>	//method3<br>	public static void dispArgs(int num1,int num2,String name){<br>		System.out.println(name+\":\"+(num1+num2));<br>	}<br>}<br>--------------------<br>ヒント：引数の数によって呼び出すメソッドを変える<br>　　　　もし引数が１つだったら、どのメソッドを呼び出す？<br>　　　　もし引数が２つだったら、どのメソッドを呼び出す？<br>　　　　もし引数が３つだったら、どのメソッドを呼び出す？',1,'2017-08-28 08:13:01','2017-06-19 02:12:40',1,1,12,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-01]変数の復習１','整数型の変数 hensu を宣言し、10を代入して、System.out.printlnで表示せよ！',1,'2017-10-12 11:28:03','2017-10-12 11:28:03',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-02]変数の復習２','小数点を扱う変数 hensu を宣言し、123.567を代入してSystem.out.printlnで表示せよ',1,'2017-10-12 11:30:45','2017-10-12 11:30:45',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-03]変数の復習３','文字列を扱う変数 hensu を宣言し、文字列 Joushisen を代入して、System.out.printlnで表示せよ',1,'2017-10-12 11:33:29','2017-10-12 11:33:29',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-04]変数の復習４','10+15の結果を変数 hensu に代入し、System.out.printlnで表示せよ',1,'2017-10-12 11:37:36','2017-10-12 11:37:36',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-05]変数の復習5','10.5+1.3の答えを変数 hensu に代入して、System.out.printlnで表示せよ',1,'2017-10-12 11:40:14','2017-10-12 11:40:14',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-06]変数の復習6','文字列型変数 hensu1 に \"nishino\" を代入<br>文字列型変数 hensu2 に \"naoyuki\" を代入<br>文字列型変数 hensu3 にhensu1とhensu2を連結させて代入し<br>hensu3の内容をSystem.out.printlnで表示せよ',1,'2017-10-18 05:36:18','2017-10-18 05:36:18',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-07]if文の復習１','以下のプログラムの？の部分を埋めて<br>変数の値が２０の時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK1207{<br>    public static void main(String[] args){<br>        int num = 20;<br>           if( ？ ){<br>                   System.out.println(\"OK!\",1,0);<br>           }<br>    }<br>}<br>-----------',1,'2017-10-13 10:29:31','2017-10-13 10:29:31',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-08]if文の復習２','以下のプログラムの？の部分を埋めて<br>変数の値が２０より小さい時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK0102{<br>    public static void main(String[] args){<br>        int num = 19;<br>           if( ？ ){<br>                   System.out.println(\"OK!\");<br>           }<br>    }<br>}<br>-----------<br>ヒント：教科書P.62',1,'2017-10-13 10:32:36','2017-10-13 10:32:36',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-09]if文の復習３','以下のプログラムの？の部分を埋めて<br>変数の値が２０ではない時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK1209{<br>    public static void main(String[] args){<br>        int num = 15;<br>           if( ？ ){<br>                   System.out.println(\"OK!\");<br>           }<br>    }<br>}<br>-----------',1,'2017-10-13 10:36:44','2017-10-13 10:36:44',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-10]if文の復習4','以下のプログラムの？の部分を埋めて<br>変数の値が２０以上時だけ、コンソールに<br>文字列が表示されるようにしてください。<br>-----------<br>public class JSSJK1210{<br>    public static void main(String[] args){<br>        int num = 20;<br>           if( ？ ){<br>                   System.out.println(\"OK!\");<br>           }<br>    }<br>}<br>-----------',1,'2017-10-16 01:37:24','2017-10-16 01:37:24',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-11]繰り返し文の復習１','for文を使って<br>-------------<br>We are genius!<br>We are genius!<br>We are genius!<br>We are genius!<br>We are genius!<br>-----------<br>と表示するプログラムを作成してください<br>※最後に改行があります。<br>ヒント：System.out.printlnとfor文を使って5回ループする<br>　　　　教科書P.75',1,'2017-10-13 10:48:15','2017-10-13 10:48:15',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-12]繰り返しの復習２','１～１００までの総和をfor文を使って計算してください<br><br>表示は以下のようにしてください<br>-----<br>total is XXX<br>-----<br>※XXXは総和の答え<br>※最後に改行を含みません',1,'2017-10-16 01:40:23','2017-10-16 01:40:23',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-13]繰り返し文の復習３','for文を使って、以下の表示をして下さい<br>------<br>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15<br>------<br>※15の後にはスペースがあります<br>※最後に改行は入りません',1,'2017-10-16 01:39:26','2017-10-16 01:39:26',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK12-14]繰り返し文の復習４','１から１００までの数字のうち、５の倍数だけを足した合計を求めて表示したい。<br>以下のプログラムの？を埋めてプログラムを完成させてください<br><br>-----<br>public class JSSJK1214{<br>	public static void main(String[] args){<br>		int total = 0;<br>		<br>		for( ？;  ？;  ？ ){<br>			if( ？ == 0 ){<br>				total += i;<br>			}<br>		}<br>		<br>		System.out.println(\"total is \" + total);<br>	}<br>}<br>------',1,'2017-10-16 01:39:42','2017-10-16 01:39:42',1,1,21,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-01]if文の復習１','param1が10 且つ param2が5 のときだけ<br>OK!と表示するように↓のプログラムの「？」を埋めてください<br><br>---------<br>public class JSSJK1301{<br>	public static void main(String[] args){<br>		int param1 = 10;<br>		int param2 = 5;<br>		<br>		if( ？ ){<br>			System.out.println(\"OK!\");<br>		}<br>		<br>	}<br>}<br>---------',1,'2017-10-16 02:05:30','2017-10-16 02:05:30',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-02]if文の復習２','param1の値が10又は5 の場合にOK!と表示するように<br>↓のプログラムの？を埋めてください<br>-------<br>public class JSSJK1302{<br>	public static void main(String[] args){<br>		int param1 = 10;<br>		<br>		if( ？ ){<br>			System.out.println(\"OK!\");<br>		}<br>		<br>	}<br>}<br>------',1,'2017-10-16 02:08:47','2017-10-16 02:08:47',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-03]if文の復習３','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、num1 が10以上で且つnum2 が 5以下 のときは<br>以下の文字が出るようにしてください。<br>-------[num1 が10以上で且つnum2 が 5以下の時]---------<br>num1 is over 10 AND num2 is under 5!<br>-------------------------------<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK1303{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-10-16 02:11:55','2017-10-16 02:11:55',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-04]if文の復習４','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、num1 が10以上またはnum2 が 5以下 のときは<br>以下の文字が出るようにしてください。<br>-------[num1 が10以上で且つnum2 が 5以下の時]---------<br>num1 is over 10 OR num2 is under 5!<br>-------------------------------<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK1304{<br>    public static void main(String[] args){<br>     int num1 = Integer.parseInt(args[0]);<br>     int num2 = Integer.parseInt(args[1]);<br>// ココから下に続きを書いてください<br>    }<br>}',1,'2017-10-16 02:26:27','2017-10-16 02:26:27',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-05]if文の復習５','以下のプログラムを実行すると変数 num1 と num2 に数字が代入されます。<br>続きを作成し、それぞれ、以下の条件で文字が出るようにしてください。<br><br>-------[num1が1のとき]---------<br>num1 is 1!<br>-------[num2が2のとき]---------<br>num2 is 2!<br>-------[num1が10 且つnum2が10のとき]---------<br>num1 is 10! AND num2 is 10!<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK0303{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-10-16 02:30:55','2017-10-16 02:30:55',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-06]if文の復習６','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、num1にnum2を足した値について以下の通り出力してください<br><br>-------[足した値が0又は1のとき]---------<br>This is 1 or 0<br>-------[足した値が10のとき]---------<br>This is 10<br>-------[足した値が20以上30以下の時]---------<br>This is 20-30<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSJK1306{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-10-16 02:35:51','2017-10-16 02:35:51',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-07]配列の復習１','以下のプログラムの「？」を埋めて配列の中身を表示するプログラムを作成せよ！<br>配列の中身は6個とし、値は 2、3、4、5、6、7とする<br>-----------<br>public class JssJk1307{<br>    public static void main(String[] args){<br>        ？ arry = ？<br>      <br>             for( ？  ？; ？ ){<br>                  System.out.print( ？ + \" \");<br>             }<br>    }<br>}<br>-----------<br>表示結果は以下のようになる<br>2 3 4 5 6 7 <br>※最後に改行は入らない<br>ヒント：宣言と初期化を同時にしている。教科書P.94',1,'2017-10-16 02:58:00','2017-10-16 02:58:00',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-08]配列の復習２','次の数値が入った配列を作って、配列の中の値の合計を表示しよう！<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>total is XXX<br>-----<br>とします<br>※最後に改行が入っていない<br>※XXXは配列の値の合計値<br><br>以下のプログラムの「？」を埋めて完成させよう！<br>=====<br>public class JssJk1308{<br>    public static void main(String[] args){<br>        ？ arry = ？;<br>        <br>        int total = ？;<br>        for( int i = 0; ？;？ ){<br>            total = ？<br>        }<br>        <br>        System.out.print(\"total is \"+？);<br>    }<br>}<br><br>=====',1,'2017-10-20 03:09:10','2017-10-20 03:09:10',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-09]配列の復習３','次の数値が入ったarryという名前の配列を作って、配列の中の値を表示しましょう<br>10,20,30,40,50<br><br>コンソールの表示は<br>-----<br>arry[0] is 10<br>arry[1] is 20<br>arry[2] is 30<br>arry[3] is 40<br>arry[4] is 50<br>-----<br>とします<br>※最後に改行が入っている<br>※表示はfor文を使用すること！<br><br>ヒント：<br>for文で表示するプログラムは「？」を埋めればOKです<br>======<br>for(？; ？ ？){<br>  system.out.println(\"arry[\" + ？ + \"] is \"+ ？);<br>}<br>======',1,'2017-10-16 02:47:09','2017-10-16 02:47:09',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-10]配列の復習４','次の数値が入った配列を作って、配列の中の値を逆順で表示しましょう！<br>10,20,30,40,50<br><br>表示は以下のようになるようにしてください<br>----------<br>50 40 30 20 10 <br>----------<br>※最後に改行は入らない',1,'2017-10-20 03:10:45','2017-10-20 03:10:45',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-11]配列の復習５','2次元配列の全てのデータを表示するプログラムです<br>「？」を埋めてプログラムを完成させてください<br><br>----<br>public class JssJk1311{<br>    public static void main(String[] args){<br>        int[][] arry = {<br>                                        {10,20,40,50,60},<br>                                        {11,22,44,55,66},<br>                                        {13,23,45,56,78}<br>                                   };<br>        <br>        for( int i = 0;  ？   ？ ){<br>            for( int j = 0;  ？  ？ ){<br>                System.out.println( arry[ ？ ][ ？ ] );<br>            }<br>        }<br>    }<br>}<br>------',1,'2017-10-16 02:54:49','2017-10-16 02:54:49',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-12]配列の復習６','以下のプログラムを二次元配列を使って書き直しましょう<br>---------------<br>public class JssJk1312{<br>    public static void main(String[] args){<br>        int[] data1 = { 170, 173, 164, 134 };<br>        int[] data2 = { 180, 159, 188, 175 };<br>        <br>        for( int i = 0; i < data1.length; i++ ){<br>            System.out.println( data1[i] );<br>        }<br>        for( int i = 0; i < data2.length; i++ ){<br>            System.out.println( data2[i] );<br>        }<br>    }<br>}<br>-----------------<br>↓「？」部分を埋めて完成させましょう<br>-----------------<br>public class JssJk1312{<br>    public static void main(String[] args){<br>        ？ datas = ?<br>        <br>        for( int i = 0; ？; ？ ){<br>            for( int j = 0; ？; ？ ){<br>                    System.out.println( datas[？][？] );<br>            }<br>        }<br>    }<br>}',1,'2017-10-16 03:04:06','2017-10-16 03:04:06',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-13]配列の復習７','以下のプログラムは、配列の中身を全て表示しようとする<br>プログラムですが、コンパイルエラーとなり動きません。<br>正しく修正して、実行できるようにしてください。<br><br><br>-----<br>public class JssJk1313{<br>    public static void main(String[] args){<br>        int arry = {<br>            {10,11,12,13}<br>            {11,12,13,15}<br>            {\"12\",\"10\",\"5\",\"0\"}<br>        };<br>        <br>        for( int i = 0; i < arry.length;i++ ){<br>            for( int j = 0; j < arry[i].length; j++ ){<br>                System.out.print( arry );<br>            }<br>        }<br>    }<br>}<br>------<br>ヒント：<br>　　　　2次元配列の宣言の仕方って、これであってる？<br>　　　　intは整数型なのに・・・<br>　　　　配列の区切りってどの文字を使うんだっけ？<br>　　　　2次元配列の参照の仕方は・・・？',1,'2017-10-16 03:08:57','2017-10-16 03:08:57',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK13-14]配列の復習８','以下の2次元配列をfor文で表示させて、コンソールに指定の文字を表示してください<br><br>String[][] strArry = {<br>    { \"a\",\"b\",\"c\",\"d\" },<br>    { \"e\",\"f\",\"g\",\"h\" },<br>    { \"i\",\"j\",\"k\",\"l\" },<br>    { \"m\",\"n\",\"o\",\"p\" }<br>};<br><br>コンソールに表示するのは<br>-------<br>aeim bfjn cgko dhip<br>-------<br>※最後に改行を含まず',1,'2017-10-16 03:10:56','2017-10-16 03:10:56',1,1,23,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-01]メソッドの復習１','「hello!」と表示するメソッドを作成して呼び出してください。<br>メソッドの名前は「hello」にしましょう。<br>？の部分を埋めて完成させましょう。<br>---------------------<br>public class JssJk0901{<br>    public static void main(String[] args){<br>        ？？？<br>    }<br>    <br>    ？？？？{<br>        System.out.println(\"hello!\");<br>    }<br>}<br>---------------------<br>ヒント：教科書P.103、104',1,'2017-10-16 04:46:36','2017-10-16 04:46:36',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-03]メソッドの復習３','２つの数値を受け取り掛け算を行うmultiと言う名前のメソッドを作成します。<br>以下の？を埋めて、メソッドを完成させてください<br><br>------<br>public class JssJk1403{<br>    public static void main(String[] args){<br>        ？(1,3);<br>    }<br>    <br>    ？ multi(？){<br>        int ans = num1 * num2;<br>        System.out.println(ans);    <br>    }<br>}<br>-----<br>ヒント：複数の引数　教科書P.112',1,'2017-10-16 04:49:17','2017-10-16 04:49:17',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-02]メソッドの復習２','１つの数値を受け取り１０倍して表示する disp10 と言う名前のメソッドを作成します。<br>以下の？を埋めて、メソッドを完成させてください<br><br>------<br>public class JssJk1402{<br>    public static void main(String[] args){<br>        ？(5);<br>    }<br>    <br>    ？ disp10(？){<br>        int ans = num * 10;<br>        System.out.println(ans);    <br>    }<br>}<br>-----<br>ヒント：引数のあるメソッド　教科書P.111',1,'2017-10-16 04:54:24','2017-10-16 04:54:24',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-04]メソッドの復習４','数値の値を１つ受け取り、受け取った数に１００を足した数を表示する<br>plus100というメソッドを作成して、そのメソッドに50を渡して呼び出してください。<br>※表示の最後に改行は入らない<br><br>ヒント：<br>  int型の引数を１つもつplus100というメソッドを作成し、その中で100を足して表示(print）する。<br>　そして、mainメソッドでplus100を引数の値に50を指定して呼び出せばOK',1,'2017-10-16 04:59:03','2017-10-16 04:59:03',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-05]メソッドの復習５','次のプログラムは、引数で受け取った３つの数値を全て足して戻り値で戻すプログラムです<br>「？」を埋めてプログラムを完成させてください<br><br>-------------<br>public class JssJk1405{<br>	public static void main(String[] args){<br>		int param1 = Integer.parseInt(args[0]);<br>		int param2 = Integer.parseInt(args[1]);<br>		int param3 = Integer.parseInt(args[2]);<br>		<br>		int result = getTotal(？,1,0);<br>		<br>		System.out.print(result);<br>	}<br>	<br>	public static ？ getTotal(int num1,int num2,int num3){<br>		int total =num1 + num2 + num3;<br>		<br>		？;<br>	}<br>}<br>-------------<br>ヒント：<br>・戻り値の型は「そのメソッドがなんの型を返すか」によって変わる<br>・戻り値を返す命令は？',1,'2017-10-16 05:13:37','2017-10-16 05:13:37',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-06]合計はいくつ？','１～10000までのうち、偶数で、３か５の倍数であるものの合計は<br>いくつでしょうか？プログラムを使って合計を表示してください。<br><br>合計は、改行無で数字のみ表示すればOKです。<br><br>ヒント：<br>　for文、if文を使います。<br>  for文を使って、１～10000までループし、ループの中で<br>　「偶数」で「３か５の倍数」である数字の時だけ、合計に加算すればOK<br>　',1,'2017-10-16 06:25:18','2017-10-16 06:25:18',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-07]電車に乗れる？','最近の電車には「女性専用車両」というものがあります。<br>ある、電車では、12両ある電車のうち、4両目が女性専用車両です。<br><br>引数で、電車に乗る人の「性別」と「乗りたい車両番号」が渡されるので<br>男性が女性専用車両に乗ろうとしている場合は「NG」を、それ以外は「OK」を表示してください。<br><br>性別は整数型で０：男性、１：女性とします。<br>車両番号は整数型で１～１２の値が渡されます。<br>例）<br>第1引数：0<br>第2引数：1<br>この場合は、男性（第1引数が0）が1両目（第2引数が1）乗ろうとしているので乗車可能です。<br>ですので<br>-------<br>OK<br>-------<br>と表示します。<br><br>第1引数：0<br>第2引数：4<br>この場合は、男性（第1引数が0）が4両目（第2引数が4）乗ろうとしているので乗車不可能です。<br>ですので<br>-------<br>NG<br>-------<br>と表示します。',1,'2017-10-16 06:44:04','2017-10-16 06:44:04',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-08]平均は？','あるクラス（生徒数15人）が、円盤投げを行いました。<br>記録は以下の通りです。クラスの平均をプログラムで出してください。<br>Aくん：10.0m<br>Bくん：20.6m<br>Cくん：50.6m<br>Dくん：19.7m<br>Eくん：32.6m<br>Fくん：22.5m<br>Gくん：31.5m<br>Hくん：29.6m<br>I くん：40.2m<br>J くん：33.7m<br><br>以下のプログラムの「？」を埋めてプログラムを完成させてください。<br>--------------<br>public class JssJk1408{<br>	public static void main(String[] args){<br><br>		？ kiroku = {<br>			10.0,20.6,50.6,19.7,32.6,<br>			22.5,31.5,29.6,40.2,33.7<br>		};<br>		<br>		double total = 0;<br>		<br>		for(？;？;？ ){<br>			？<br>		}<br>		<br>		double avr = total / kiroku.length;<br>		<br>		System.out.print(\"avr is \"+avr+\"m\");<br>	}<br>	<br>}<br>--------------------',1,'2017-10-16 07:17:01','2017-10-16 07:17:01',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-09]簡易電卓！','mainメソッドに渡されたパラメータを元に簡易電卓をつくろう！<br><br>第1引数（文字列）：　計算方法を指定するもじれが渡される<br>第2引数（整数値）：計算の対象となる数値<br>第3引数（整数値）：計算の対象となる数値<br><br>計算方法を表す文字列は以下の4つ<br>plus・・・・足し算<br>minus・・・引き算<br>multiply・・・掛け算<br>divided・・・割り算<br>※割り算の結果は、小数点が出るものとし四捨五入などしなくて良い<br><br>例）<br>第1引数：plus<br>第2引数：10<br>第3引数：5<br>の場合、足し算となり、以下のように画面に表示する<br>-----------<br>10 + 5 = 15<br>-----------<br>※最後に改行は入りません<br><br>第1引数：divided<br>第2引数：10<br>第3引数：4<br>の場合、割り算となり、以下のように画面に表示する<br>-----------<br>10 / 4 = 2.5<br>-----------<br>※最後に改行は入りません<br>※割り算は「/」（スラッシュ）、掛け算は「*」（アスタリスク）と表示する<br><br>以下のプログラムの「？」を埋めてプログラムを完成させてください。<br>なお、文字列が一致しているかどうかは以下のequalsStringメソッドを使用してください。<br>------------<br>public class JssJk1409{<br>	public static void main(String[] args){<br>		String kind = args[0];<br>		int num1 = Integer.parseInt(args[1]);<br>		int num2 = Integer.parseInt(args[2]);<br>		<br>		？？？？？<br>		<br>	}<br>	<br>	<br>	private static boolean equalsString(String str1,String str2){<br>		if( str1 == null && str2 == null){<br>			return true;<br>		}if( str1 == null || str2 == null ){<br>			return false;<br>		}<br>		<br>		return str1.equals(str2);<br>	}<br>	<br>	<br>}<br>---------<br>※equalsStringは、引数で与えられた２つの文字列が一致する場合はtrueを一致しない場合はfalseをかえします。<br><br>ヒント：<br>　まず、equalsStringメソッドを使って、どの種類の計算かで分岐（if文を使う）、その<br>　分岐の中で、それぞれの計算と表示をすればよい<br>　例えば、kindが「plus」という文字列かどうかを知りたい場合 equalsString(kind,\"plus\")が<br>  trueかどうか調べればよい。<br>',1,'2017-10-16 07:58:27','2017-10-16 07:58:27',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK14-10]擬似言語をJavaにしてみよう！','FE H27春 問8の擬似言語をJavaに直してみましょう！<br>https://www.sunnyglad.net/AsoLearning/view/document/JSS-JK14-10.png<br>H27春の擬似言語はクイックソートを行い、k番にある数値を返すプログラムです。<br><br>整数型の配列 x[]  ・・・ソートする対象が格納されている配列<br>整数 n ・・・数値の個数<br>整数 k ・・・選択する数値の小ささの順位を表す値<br><br>以下のプログラムについてSelectメソッドを擬似言語を基に作成してください<br>--------------<br>public class JssJk1410{<br>	public static void main(String[] args){<br>		int[] x = {0,3,5,6,4,7,2,1};<br>		int n = x.length-1;<br>		int k = Integer.parseInt(args[0]);<br>		<br>		int num = Select(x,n,k);<br>		<br>		System.out.print(num);<br>	}<br>	<br>	private static int Select(int[] x,int n,int k){<br>		int Top;<br>		int Last;<br>		int Pivot;<br>		int i,j,work;<br>				<br>　　　　　　　？？？<br>	}<br>}<br>-------------',1,'2017-10-16 09:13:34','2017-10-16 09:13:34',1,1,24,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK15-01]クラスの基本１','Carクラスのインスタンスを作成しなさい（プログラム中の？）を埋めればOK<br><br>-------------------------------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1501{<br><br>	public static void main(String[] args){<br>		Car car = ??<br>		<br>		car.name = \"Lupin\";<br>		car.maker = \"suzuki\";<br>		<br>		System.out.println(\"name is \"+car.name);<br>		System.out.println(\"maker is \"+car.maker);<br>	}<br>}<br>-----------------------',1,'2017-10-17 10:36:26','2017-10-17 10:36:26',1,1,25,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK15-02]クラスの基本２','さきほどのクラスの基本１で作ったプログラムを改造して<br>---------------------------<br>name is LEXUS<br>maker is TOYOTA<br>--------------------------<br>と表示したい。「？」を埋めてプログラムを完成させよ<br><br>-----------------------------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1502{<br><br>	public static void main(String[] args){<br>		Car car = ？？<br>		<br>		？？<br>		？？<br>		<br>		System.out.println(\"name is \"+car.name);<br>		System.out.println(\"maker is \"+car.maker);<br>	}<br>}<br>--------------------------',1,'2017-10-17 10:51:18','2019-03-29 10:48:39',1,1,25,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK15-03]クラスの基本３','さきほどのクラスの基本２のプログラムをさらに改造して<br>Carクラスに値段を表すフィールド（名前はfee）を作り<br>------------<br>name is LEXUS<br>maker is TOYOTA<br>fee is 13500000 yen<br>------------<br>と表示したい。<br>↓のプログラムの？を埋めてプログラムを完成させよ<br>----------------------------<br>class Car{<br>	String name;<br>	String maker;<br>	？;<br>}<br><br>public class JssJk1503{<br><br>	public static void main(String[] args){<br>		Car car = ？;<br>		<br>		？ = \"LEXUS\";<br>		？ = \"TOYOTA\";<br>		？ = 13500000;<br>		<br>		System.out.println(\"name is \"+car.name);<br>		System.out.println(\"maker is \"+car.maker);<br>		System.out.println(\"fee is \"+？+\" yen\");<br>	}<br>}<br>----------------------------',1,'2017-10-17 10:58:59','2017-10-17 10:58:59',1,1,25,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-01]参照１','以下のプログラムを実行するとコンソールに<br>-----------<br>name is Lupin<br>maker is suzuki<br>-----------<br>と、表示された、？の部分には何を入れれば良いか<br>※？の部分は1行です。<br>--------------------------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1601{<br><br>	public static void main(String[] args){<br>		Car car1 = new Car();<br>		<br>		car1.name = \"Lupin\";<br>		car1.maker = \"suzuki\";<br>		<br>		？<br>		<br>		System.out.println(\"name is \"+car2.name);<br>		System.out.println(\"maker is \"+car2.maker);<br>	}<br>}',1,'2017-10-23 11:26:11','2017-10-23 11:26:11',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-02]参照２','以下のプログラムを実行すると、コンソールに<br>--------------------<br>name is Yaris<br>maker is toyota<br>--------------------<br>と表示された、？に入るのは何か？<br><br>------------------------------------------------------------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1602{<br><br>	public static void main(String[] args){<br>		Car car1 = ？;<br>		<br>		car1.name = \"Yaris\";<br>		car1.maker = \"toyota\";<br>		<br>		Car car2 = ？;<br>		<br>		car2.name = \"Lupin\";<br>		car2.maker = \"suzuki\";<br>		<br>		？<br>		<br>		System.out.println(\"name is \"+car3.name);<br>		System.out.println(\"maker is \"+car3.maker);<br>	}<br>}',1,'2017-10-20 11:37:04','2017-10-20 11:37:04',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-03]参照３','mainの引数で渡ってきた値によって表示を変えたい。<br><br>引数が0の場合、コンソールに<br>--------<br>name is Yaris<br>maker is toyota<br>--------<br>と表示する。<br><br>引数が1の場合、コンソールに<br>--------<br>name is Lupin<br>maker is suzuki<br>--------<br>と表示する。<br><br>引数が0、1以外の場合、コンソールに<br>--------<br>name is Integra<br>maker is honda<br>--------<br>と表示する。<br><br>以下のプログラムの「？」の部分を埋めて<br>プログラムを完成させてください<br>---------------------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1603{<br><br>	public static void main(String[] args){<br>		int param = Integer.parseInt(args[0]);<br>		<br>		Car car1 = new Car();<br>		<br>		car1.name = \"Yaris\";<br>		car1.maker = \"toyota\";<br>		<br>		Car car2 = new Car();<br>		<br>		car2.name = \"Lupin\";<br>		car2.maker = \"suzuki\";<br>		<br>		Car car3 = new Car();<br>		<br>		car3.name = \"Integra\";<br>		car3.maker = \"honda\";<br>		<br>		Car car4;<br>		<br>		if( param == 0 ){<br>			？<br>		}else if( param == 1 ){<br>			？<br>		}else{<br>			？<br>		}<br><br>		<br>		System.out.println(\"name is \"+car4.name);<br>		System.out.println(\"maker is \"+car4.maker);<br>	}<br>}<br>--------------------------------------',1,'2017-10-20 11:52:37','2017-10-20 11:52:37',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-04]参照４','なんちゃってポケモン図鑑を作ろうと思います。<br><br>mainに渡された引数によって表示するポケモンを変えます。<br>まだ、3つしか知らないので表示するのは3つのポケモンです。<br>表示するのは、名前、タイプ、HPです。<br><br>引数で０が渡されたピカチュです<br>-------<br>name is Pikachu<br>type is denki<br>hp is 30<br>-------<br><br>引数で１が渡されたゼニガメです<br>-------<br>name is Zenigame<br>type is mizu<br>hp is 50<br>-------<br><br>引数で２が渡されたゼニガメです<br>-------<br>name is Hitokage<br>type is honoo<br>hp is 60<br>-------<br><br>以下のプログラムの「？？？？」（複数行）を埋めて<br>プログラムを完成させてください<br>------------------------------------<br>class Pokemon{<br>	String name;<br>	String type;<br>	int hp;<br>}<br><br>public class JssJk1604{<br><br>	public static void main(String[] args){<br>		int param = Integer.parseInt(args[0]);<br>		<br>		？？？？<br>		<br>		<br>		Pokemon poke4;<br>		<br>		if( param == 0 ){<br>			poke4 = poke1;<br>		}else if( param == 1 ){<br>			poke4 = poke2;<br>		}else{<br>			poke4 = poke3;<br>		}<br><br>		<br>		System.out.println(\"name is \"+poke4.name);<br>		System.out.println(\"type is \"+poke4.type);<br>		System.out.println(\"hp is \"+poke4.hp);<br>	}<br>}<br>------------------------------------<br>ヒント：JSS-JK16-03と同じ流れです',1,'2017-10-23 02:13:18','2017-10-23 02:13:18',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-05]インスタンス配列１','JSS-JK16-04で作ったポケモンのプログラムについて、Pokemonクラスの配列（インスタンス配列）<br>を使って、一気に３体表示するようにプログラムを作ろうと思う。<br>以下のプログラムの「？」を埋めてプログラムを完成させてください。<br><br>---------------------------<br>class Pokemon{<br>	String name;<br>	String type;<br>	int hp;<br>}<br><br>public class JssJk1605{<br><br>	public static void main(String[] args){<br>		<br>		Pokemon[] pokeList = ？;<br>		<br>		pokeList[0] = ？;		<br>		？ = \"Pikachu\";<br>		？= \"denki\";<br>		？ = 30;<br>		<br>		pokeList[1] = ？<br>		？ = \"Zenigame\";<br>		？ = \"mizu\";<br>		？ = 50;<br>		<br>		pokeList[2] = ？<br>		？= \"Hitokage\";<br>		？ = \"honoo\";<br>		？ = 60;<br>		<br>		for( int i = 0 ; i < pokeList.length; i++ ){<br>			System.out.println(\"-----------------------\");<br>			System.out.println(\"name is \"+pokeList[i].name);<br>			System.out.println(\"type is \"+pokeList[i].type);<br>			System.out.println(\"hp is \"+pokeList[i].hp);<br>		}<br>	}<br>}<br>-----------------------------------------------<br>ヒント：<br>　Pokemon[] pokeList = ？;<br>の部分はPokemonクラスの配列の初期化です。<br>要素数は３あれば十分です。<br>クラス（インスタンス）の配列ろうが、intの配列だろうが<br>初期化の仕方は同じです。<br>教科書P.143',1,'2017-10-23 11:41:53','2017-10-23 11:41:53',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-06]インスタンス配列２','ドラゴンボールの主要キャラクターの名前と強さを<br>一覧表示するプログラムを作った。<br><br>・・・・が、コンパイルが通らない。<br>どこを修正すればよいか？<br><br>---------------<br>class Human{<br>	String name;<br>	int power;<br>}<br><br>public class JssJk1606{<br><br>	public static void main(String[] args){		<br>		Human[] humanList = new Human[5];<br>		String[] names = {\"Goku\",\"Kuririn\",\"Pikkoro\",\"Bejita\",\"Gohan\"};<br>		int[] powers = {12000,8000,10000,15000,9000};<br>		<br>		//initialize<br>		for( int i = 0; i < humanList.length; i++ ){<br>			name = names[i];<br>			power = powers[i];<br>		}<br>		<br>		//display<br>		for( int i = 0 ; i < humanList.length; i++ ){<br>			System.out.println(\"-----------------------\");<br>			System.out.println(\"name is \"+humanList[i].name);<br>			System.out.println(\"power is \"+humanList[i].power);<br>		}<br>		<br>	}<br>}<br>------------',1,'2017-10-23 11:40:28','2017-10-23 11:40:28',1,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK16-07]インスタンス配列３','JSS-JK16-06のプログラムに付け足して、どっちがパワーがあるかを<br>比べるプログラムを作りたい。<br>比べるキャラクターは、mainの引数で渡ってくる。<br><br>JSS-JK16-06のプログラムを改造し、例の表示になるようにしてください。<br><br>例）<br>第1引数：0<br>第2引数：1　<br>の場合は、Goku　と Kuririn　のpowerを比べる<br>Gokuのパワーは12000、Kuririnは8000なのでGokuのほうが大きいので<br>コンソールには<br>------------<br>Goku vs Kuririn<br>Goku is strong<br>------------<br>と表示する<br><br>第1引数：2<br>第2引数：4　<br>の場合は、Pikkoro　と Gohan　のpowerを比べる<br>Pikkoroのパワーは10000、Gohanは9000なのでGokuのほうが大きいので<br>コンソールには<br>------------<br>Pikkoro vs Gohan<br>Pikkoro is strong<br>------------<br>と表示する<br>※最後に改行が入っている<br>※param1とparam2は必ず0～4の値をとるとしてよい',1,'2017-10-23 11:59:49','2017-10-23 11:59:49',2,1,26,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK17-01]クラスになれよう','次のプログラムはうまくうごかない<br>（動かすとエラーになって落ちる）<br>コンソールの表示は↓のようにしたい<br>==========<br>name:Lupin<br>maker:Suzuki<br>==========<br>どこを修正すれば良いでしょうか？<br>---------<br>class Car{<br>	String name;<br>	String maker;<br>}<br><br>public class JssJk1701{<br><br>	public static void main(String[] args){<br>		Car[] cars = new Car[3];<br>		<br>		cars[1] = new Car();<br>		cars[1].name = \"Lupin\";<br>		cars[1].maker = \"Suzuki\";<br>		<br>		for( int i = 0; i < cars.length; i++ ){<br>			System.out.println(\"name:\"+cars[i].name);<br>			System.out.println(\"maker:\"+cars[i].maker);<br>		}<br>	}<br>}<br>------<br>ヒント：<br>配列の要素数は３つあるのに、1つしかｲﾝｽﾀﾝｽを代入していない。<br>残りの2つについてはnullが入っているはず。<br>落ちている原因は、null（ｲﾝｽﾀﾝｽが無い）のに、nameやmakerにアクセス<br>しているめに落ちている。<br>それを回避する為にどうすれば良いかを考える　教科書P.147',1,'2017-10-27 03:06:10','2017-10-27 03:06:10',1,1,27,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK17-02]クラスになれよう２','名前、身長、体重の情報を持つ人間クラスを作ろう。<br>そして、インスタンスを１つ作成して、以下のように表示しよう！<br>===========<br>name is Naoyuki Nishino<br>height is 172<br>weight is 65<br>===========<br>人間クラスのクラス名はHuman<br>名前はname<br>身長はheight <br>体重はweight <br>としましょう。<br><br>ヒント：以下のコメント部分を考える<br>※AZ Cafeにアップする時は日本語のコメントを消してください<br>-----------------------<br>//Humanクラスを定義する↓<br>？<br>//Humanクラスを定義する↑<br><br>public class JssJk1702{<br><br>	public static void main(String[] args){<br>		//Humanクラスのインスタンスを１つ作る↓<br>　　　　　　　？<br>		//Humanクラスのインスタンスを１つ作る↑<br>		<br>		//Humanクラスのインスタンスに値を入れる↓<br>　　　　　　　？<br>		//Humanクラスのインスタンスに値を入れる↑<br>		<br>		//Humanクラスのインスタンスの中身をコンソールに表示する↓<br>　　　　　　　？<br>		//Humanクラスのインスタンスの中身をコンソールに表示する↑<br>	}<br>}',1,'2017-10-27 03:21:19','2019-12-11 10:38:52',1,1,27,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK17-03]クラスになれよう３','JSS-JK17-02で作ったプログラムを改造して<br>3人の名前、身長、体重を表示してみよう！<br>--------------<br>name is Naoyuki Nishino<br>height is 172<br>weight is 65<br>name is Masaki Suda<br>height is 176<br>weight is 63<br>name is Shota Matsuda<br>height is 181<br>weight is 61<br>--------------<br><br>ヒント：<br>作るべきインスタンスは３つ<br>分かる人は、是非、インスタンス配列を使ってやってみよう！',1,'2017-10-27 03:32:47','2017-10-27 03:32:47',1,1,27,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK18-01]コンストラクタ１','次のクラスのコンストラクタの中でインスタンス変数を初期化したい。<br>プログラムの？を埋めてプログラムを完成させてください！<br>初期化する値は name には文字列の「Ouji」を<br>hpには、100を入れてください！！<br>--------------<br>class Player{<br>	String name;<br>	int hp;<br>	<br>	？？？（複数行）<br>}<br><br>public class JssJk1801{<br><br>	public static void main(String[] args){<br>		Player player = new Player();<br>		<br>		System.out.println(\"name is \"+player.name);<br>		System.out.println(\"hp is \"+player.hp);<br>		<br>	}<br>}<br>-----------<br>ヒント：引数が無いコンストラクタを作って、その中で値を入れればよい',1,'2017-10-30 12:01:03','2019-12-11 10:44:23',1,1,29,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK18-02]コンストラクタ２','次のプログラムの？を埋めて、↓のようなコンソール表示になるようにしてください<br><br>----------------<br>class Animal{<br>	String name;<br>	String type;<br>	<br>	Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>	}<br>}<br><br>public class JssJk1802{<br><br>	public static void main(String[] args){<br>		Animal animal = ？;<br>		<br>		System.out.println(\"name is \"+animal.name);<br>		System.out.println(\"type is \"+animal.type);<br>		<br>	}<br>}<br>-----------------',1,'2017-10-30 12:04:43','2017-10-30 12:04:43',1,1,29,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK18-03]コンストラクタ３','以下のコンソール表示になるようにプログラムの？を埋めてください！！<br>----<br>name is nishino<br>hp is 1000<br>----<br><br>------------------------------<br>class Player{<br>	String name;<br>	int hp;<br>	<br>	Player(){<br>		name=\"\";<br>		hp=0;<br>	}<br>	<br>	Player(String name){<br>		this.name=name;<br>		this.hp=0;<br>	}<br>	<br>	Player(String name,int hp){<br>		this.name=name;<br>		this.hp=hp;<br>	}<br>}<br><br>public class JssJk1803{<br><br>	public static void main(String[] args){<br>		？（1行）<br>		<br>		System.out.println(\"name is \"+player.name);<br>		System.out.println(\"hp is \"+player.hp);<br>		<br>	}<br>}<br>-----<br>ヒント：インスタンスが作られていないので、インスタンスを作らなくてはならない。<br>　　　　その際、どのコンストラクタを呼べば良いだろうか？？',1,'2017-10-30 12:11:57','2019-12-11 10:45:14',1,1,29,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK19-01]インスタンスメソッド１','以下のプログラムの？を生めて完成させてください。<br>？ではPlayerクラスのdisplayメソッドを呼び出して、クラスの中身を表示したい<br>------<br>class Player{<br>	String name;<br>	int hp;<br>	<br>	Player(){<br>		name=\"Ouji\";<br>		hp=100;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"name is \"+ name);<br>		System.out.println(\"hp is \"+ hp);<br>	}<br>}<br><br>public class JssJk1901{<br><br>	public static void main(String[] args){<br>		Player player = new Player();<br>		<br>		？<br>	}<br>}<br>---------------',1,'2017-10-31 10:26:42','2017-10-31 10:26:42',1,1,30,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK19-02]インスタンスメソッド２','次のプログラムの？を埋めてタマとポチを鳴かせろ！<br>----------------<br>class Animal{<br>	String name;<br>	String type;<br>	<br>	Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>	}<br>	<br>	public void crow(){<br>		System.out.println(name + \" crows Mew!\");<br>	}<br>}<br><br>public class JssJk1902{<br><br>	public static void main(String[] args){<br>		Animal animal1 = new Animal(\"Tama\",\"cat\");<br>		Animal animal2 = new Animal(\"Pochi\",\"cat\");<br>		<br>		？<br>		？<br>	}<br>}',1,'2017-10-31 10:39:42','2019-12-11 10:53:53',1,1,30,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK19-03]インスタンスメソッド３','ポチとタマを走らせて、コンソールの表示を以下のようにしたい。<br>-----------------<br>Tama runs<br>Pochi runs<br>----------------<br>以下のプログラムの？はどう書いたらいいか？<br><br>-------<br>class Animal{<br>	String name;<br>	String type;<br>	<br>	Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>	}<br>	<br>	public void crow(){<br>		System.out.println(name + \" crows Mew!\");<br>	}<br>	<br>	？？？（複数行）<br>}<br><br>public class JssJk1903{<br><br>	public static void main(String[] args){<br>		Animal animal1 = new Animal(\"Tama\",\"cat\");<br>		Animal animal2 = new Animal(\"Pochi\",\"cat\");<br>		<br>		animal1.run();<br>		animal2.run();<br>		<br>	}<br>}<br>-----<br>ヒント：<br>Animalクラスにメソッドを追加すればよい。',1,'2017-10-31 10:48:33','2019-12-11 10:55:01',1,1,30,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK19-04]インスタンスメソッド４','動物の状態を表示する、displayというインスタンスメソッド（戻り値、引数なし）をAnimalクラス作成して<br>mainメソッド内で呼び出せ<br>表示する項目は、名前、種類、HPとします。<br><br>----------------------<br>class Animal{<br>	String name;<br>	String type;<br>	int hp;<br>	<br>	Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>		this.hp = 100;<br>	}<br>	<br>	public void crow(){<br>		System.out.println(name + \" crows Mew!\");<br>	}<br>	<br>	public void run(){<br>		System.out.println(name + \" runs\");<br>	}<br>	<br>	？？？（displayという名前のメソッドを書く）<br>}<br><br>public class JssJk1904{<br><br>	public static void main(String[] args){<br>		Animal animal1 = new Animal(\"Tama\",\"cat\");<br>		Animal animal2 = new Animal(\"Pochi\",\"cat\");<br>		<br>		animal1.？（displayメソッドを呼び出す）<br>		animal2.？（displayメソッドを呼び出す）<br>		<br>	}<br>}<br>----------------------<br><br>上記プログラムを実行するとコンソールには<br>name : Tama<br>type : cat<br> hp  : 100<br>name : Pochi<br>type : cat<br> hp  : 100<br> と、表示される',1,'2017-10-31 11:09:58','2017-10-31 11:09:58',1,1,30,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK19-05]インスタンスメソッド５','さきほどのJSS-JK19-04を改造して<br>Animalクラスに　eatメソッドを追加してください。<br>eatメソッドの仕様は以下の通りです。<br><br>-----[eatメソッド]----<br>戻り値：なし<br>引数　：回復する体力の値（整数値）<br>処理内容：<br>このメソッドを実行すると引数で渡された値の分、hpが増加する。<br><br>具体的には↓の？を埋めてプログラムを完成させてください<br>---------<br>class Animal{<br>	String name;<br>	String type;<br>	int hp;<br>	<br>	Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>		this.hp = 100;<br>	}<br>	<br>	public void crow(){<br>		System.out.println(name + \" crows Mew!\");<br>	}<br>	<br>	public void run(){<br>		System.out.println(name + \" runs\");<br>	}<br>	<br>	---[displayメソッド（JSS-JK19-04の答えが入る）]---<br>	<br>	？？？（eatメソッド）<br>}<br><br>public class JssJk1905{<br><br>	public static void main(String[] args){<br>		Animal animal1 = new Animal(\"Tama\",\"cat\");<br>		Animal animal2 = new Animal(\"Pochi\",\"cat\");<br>		<br>		animal1.eat(10);<br>		animal2.eat(15);<br>		<br>		animal1.display();<br>		animal2.display();<br>	}<br>}',1,'2017-10-31 11:28:24','2017-10-31 11:28:24',1,1,30,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK20-01]クラス変数１','次のプログラムの？を埋めてプログラムを完成させよ<br>コンソールの表示は<br>-----------<br>No.1 : Lupin<br>No.2 : Volkswagen<br>No.3 : Cooper<br>-----------<br>としたい<br><br>---------<br>class Car{<br>	String name;<br>	？？<br>	<br>	Car(String name){<br>		this.name = name;<br>		count++;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"No.\" + count + \" : \"+ name);<br>	}<br>}<br><br>public class JssJk2001{<br>	public static void main(String[] args){<br>		Car car1 = new Car(\"Lupin\");		<br>		car1.display();<br>		<br>		Car car2 = new Car(\"Volkswagen\");<br>		car2.display();<br>		<br>		Car car3 = new Car(\"Cooper\");<br>		car3.display();<br>	}<br>}',1,'2017-11-01 11:41:02','2017-11-01 11:41:02',1,1,31,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK20-01]クラス変数２','引数でもらった数分、インスタンスを作成するプログラムを作った。<br>そして、インスタンスが何個できたかを把握するため、Humanクラスにcountというクラス変数を作った。<br>コンストラクタで、その変数をカウントアップすることにした。<br><br>コンストラクタをどう書けばよいか？<br>-------------------------<br>class Human{<br>	static int count = 0;<br>	<br>	？？（ここにコンストラクタを書く）<br>	<br>	public void display(){<br>		System.out.println(\"count is \" + count);<br>	}<br>}<br><br>public class JssJk2002{<br>	public static void main(String[] args){<br>		int num = Integer.parseInt(args[0]);<br>		Human[] human = new Human[100];<br>		<br>		if( num > 100 || num < 1 ){<br>			return;<br>		}<br>		<br>		for( int i = 0; i < num; i++ ){<br>			human[i] = new Human();<br>		}<br>		human[0].display();<br>		<br>	}<br>}<br>------------------------',1,'2017-11-07 06:02:19','2017-11-07 06:02:19',1,1,31,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK20-03]クラス変数３','一番最初に作成されたインスタンスだけ名前を表示するプログラムを作りたい。<br>クラス変数countに、何番目のインスタンスかが入るので、displayメソッドで<br>「一つ目のインスタンスだったらメッセージを表示する」という処理をしたい。<br>↓のプログラムの？を埋めてください。<br><br>---------------------<br>class OnlyOne{<br>	String name;<br>	int no;<br>	static int count = 0;<br>	<br>	OnlyOne(String name){<br>		this.name = name;<br>		no = count;<br>		count++;<br>	}<br>	<br>	public void display(){<br>		？？？（複数行）<br>	}<br>}<br><br>public class JssJk2003{<br>	public static void main(String[] args){<br>		OnlyOne inst1 = new OnlyOne(\"A\");<br>		OnlyOne inst2 = new OnlyOne(\"B\");<br>		OnlyOne inst3 = new OnlyOne(\"C\");<br>		<br>		inst1.display();<br>		inst2.display();<br>		inst3.display();<br>	}<br>}<br>------------------<br>上記プログラムを実行するとコンソールには<br>---<br>A is First Instance<br>---<br>と表示されるものとする<br><br>ヒント：countは、複数インスタンスで共通なので、３つインスタンスを作ったのであれば3になる<br>　　　　インスタンス変数noはインスタンスごとにあるので、inst1、inst2、inst3ごとにそれぞれ<br>　　　　別の値が入っている。<br>　　　　どの変数にどういう値が入っているときに「最初に作られたインスタンス」を判定できるかを考える',1,'2017-11-01 12:43:39','2017-11-01 12:43:39',1,1,31,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK21-01]クラスメソッド','あるA君は、図形を扱うクラスを作成することにした。<br>クラスの名前は「Zukei」とした。<br>とりあえず、三角形の面積を計算する機能を持たせる為に<br>getSankakuという、クラスメソッドをついかした。<br><br>自慢げにA君はB君に、Zukeiクラスのことを話したがB君は<br>冷たく言い放った。<br>「どげんして使うとや？」<br><br>冷たいB君に、getSankakuメソッドの使い方を教えてあげよう。<br>なお、計算する三角形は底辺が4、高さが6とする。<br>↓の「？」の部分を埋めてください。<br>-----------------------------------<br>class Zukei{<br>	public static double getSankaku(int teihen,int takasa){<br>		return (teihen * takasa)/2;<br>	}<br>}<br><br>public class JssJk2101{<br>	public static void main(String[] args){<br>		<br>		double result = ？？？;<br>		<br>		System.out.println(\"sankaku is \"+result);<br>	}<br>}<br>-----------------------------------',1,'2017-11-06 07:08:58','2017-11-06 07:08:58',1,1,32,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK21-02]クラスメソッド2','懲りずにA君は得意げに<br>「今度は台形の面積を計算するメソッドを追加したよ！」<br>とB君に言った。<br><br>B君は「だけん何や？」<br>と、まったく興味を持ってくれなかった。<br><br>冷たいB君の為に、台形の面積を計算するプログラムの<br>すごさを伝えてあげよう！<br>先ほどのプログラムを修正して、プログラムを完成させてください<br>----------<br>class Zukei{<br>	public static double getSankaku(int teihen,int takasa){<br>		return (teihen * takasa)/2;<br>	}<br>	？？？（ここに、台形の面積を計算するプログラムが入る）<br>}<br><br>public class JssJk2102{<br>	public static void main(String[] args){<br>		<br>		double result = Zukei.getDaikei(3,6,7);<br>		<br>		System.out.println(\"daikei is \"+result);<br>	}<br>}<br>------------',1,'2017-11-06 07:18:18','2017-11-06 07:18:18',1,1,32,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK21-03]クラスメソッド３','ある日、B君が、笑顔で近づいてきてA君に言った。<br><br>「ゲームを作ろうと思っているんだ。主人公のクラスとしてPlayerってクラスを作ったのさ。<br>　そして、主人公を移動させるmoveってメソッドと現在位置を表示するdispNowPosって<br>　メソッドをつくったわけさ。<br>　だけど、コンパイルが通らないわけさ。なんでか教えてくれんか？」<br><br>A君は、さんざんこちらの問いかけに冷たくしてきたB君が笑顔で話しかけてきたことに<br>多少の戸惑いを持ちつつも、B君が質問を言い切る前に、質問を遮るように笑顔でこう即答した。<br><br>「自分で考えれば？」<br><br>二人の仲はこの後、どうなってしまうのだろうか・・・。<br>皆さんは、↓のプログラムの悪いところを直して、コンパイルできるように修正してください。<br>---------------------------------<br>class Player{<br>	int x;<br>	int y;<br>	<br>	Player(){<br>		x = 0;<br>		y = 0;<br>	}<br>	<br>	public static void move(int dx,int dy){<br>		x = x + dx;<br>		y = y + dy;<br>	}<br>	<br>	public void dispNowPos(){<br>		System.out.println(\"pos is (\" + x + \",\" + y +\")\");<br>	}<br><br>}<br><br>public class JssJk2103{<br>	public static void main(String[] args){<br>		<br>		Player player = new Player();<br>		<br>		//move player<br>		player.move(1,0);<br>		<br>		//disp player position<br>		player.dispNowPos();<br>	}<br>}<br>---------------------------------',1,'2017-11-06 07:46:56','2017-11-06 07:46:56',1,1,32,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK21-04]クラスメソッド４','A君とB君は気付くと、殴り合いのけんかになっていた。<br><br>二人はもみくちゃになって、土砂降りの雨が降る校庭に出て行った。<br>校庭でさらに激しいけんかが繰り広げられている。<br><br>A君の右フックがB君のアゴを捕らえた！<br>負けじと、B君の左ストレートが、A君のみぞおちあたりを捉えた！<br><br>「うっ」うずくまったA君<br>どとめをさそうと近寄った、B君はふと動きが止まってしまった。<br>A君が肩を揺らして笑っているのだ。<br><br>A君は「てめー、なかなか良いパンチもってるじゃん」<br>すると、B君も笑いながら「おもえもな」<br><br>二人は、握手をした。いつしか雨は上がり、虹が出ていた。<br><br>A君はこういった、「お前のゲーム、一緒に作らせてくれよ。」<br>B君は、握手した手をギュッとさらに強く握り「あぁ、頼むぜ大将」<br>と言った。<br><br>さて、A君は約束どおり、手伝うことになり<br>モンスタークラスを作ることにしました。<br><br>モンスタークラスの仕様は次の通りです。<br>・コンストラクタでモンスターの名前を受け取り保存する<br>・displayAppearMsgというメソッドを持ち、モンスターが現れた時のメッセージを表示する<br>　表示するメッセージは以下の通り。<br>　---------<br>   （コンストラクタで受け取ったモンスターの名前） appeared!<br>　---------<br>  例えば、コンストラクタにslimeが渡されたのであればコンソールに<br> ---------<br>  slime appeared!<br> -------<br>と表示する。<br>以下のプログラムは、そのとき作ったA君のプログラムです。<br>Monsterクラスの中身を考えて作ってください。<br>-------------------------------------------------------<br>class Monster{<br>	？？？？（中身を考えよう）<br>}<br><br><br>public class JssJk2104{<br>	public static void main(String[] args){<br>		<br>		Monster slim = new Monster(\"slim\");<br>		<br>		slim.displayAppearMsg();<br>	}<br>}<br>---------------------------------------------<br>ヒント：Monsterクラスの中は「コンストラクタ」と「displayAppearMsgメソッド」、それと名前を<br>　　　　保存する変数が必要です',1,'2017-11-06 08:11:07','2017-11-06 08:11:07',1,1,32,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK21-05]クラスメソッド５','あれ以降すっかり、仲良くなったA君とB君。<br><br>ある日、B君はA君が作ったクラスに注文をした。<br><br>「A君、作ってくれたMonsterクラスだけど、mainの引数でモンスターの名前を複数受け取って<br>　受け取った数分、Monsterのインスタンスを作って、出現の時のメッセージを表示するように<br>　してくれないかな？」<br><br>A君は、一瞬「なんで、こいつに命令されるとや？」と思いつつ<br>「わかった。まかしといてくれ」と答えた。<br><br>この後、A君とB君が世界中から注目を浴びることになろうとは、このときは<br>知る由もない二人であった。<br><br>先ほどの[JSS-JK21-04]を改造して、B君の要望にこたえてください。<br>なお引数の数は最低で１、最大の個数は制限がない。<br><br>例）<br>第１引数：slime<br>コンソールの表示<br>----<br>slime appeared!<br>----<br><br>第１引数：slime<br>第２引数：draky<br>コンソールの表示<br>----<br>slime appeared!<br>draky appeared!<br>----<br><br>第１引数：slime<br>第２引数：draky<br>第３引数：golem<br>コンソールの表示<br>----<br>slime appeared!<br>draky appeared!<br>golem appeared!<br>----<br><br>ヒント：<br>次の手順で考えてみよう<br>(1) main引数の個数を取得<br>(2) 引数の数ぶん、Monsterの配列を作る<br>(3) ループを使って、Monster配列のインスタンスを作る。<br>　　そのときコンストラクターにモンスターの名前を渡す<br>(4)MonsterのインスタンスごとにdisplayAppearMsgを呼び出す',1,'2017-11-06 08:31:52','2017-11-06 08:31:52',2,1,32);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK22-01]人間クラス１','人間クラスを作ろうと思います。<br>人間クラスは、「名前」、「ニックネーム」の情報を持ち<br>「情報を表示する」という機能を持っています。<br><br>↓のプログラムの？を埋めてプログラムを完成させよう！<br>--------------<br>class Human{<br>	String name;<br>	String nickName;<br>	<br>	Human(String name,String nickName){<br>		？？？（複数行）<br>	}<br>	<br>	public void display(){<br>		？？？（複数行）<br>	}<br>}<br><br>public class JssJk2201{<br>	public static void main(String[] args){<br>		Human human1 = new Human(\"Nishino\",\"city boy\");<br>		Human human2 = new Human(\"Ito\",\"Pancho\");<br>		<br>		human1.display();<br>		human2.display();<br>	}<br>}<br>------------------<br><br>この場合コンソールの表示は<br>======<br>name: Nishino<br>nickName: city boy<br>name: Ito<br>nickName: Pancho<br>=======',1,'2017-11-06 08:48:59','2017-11-06 08:48:59',1,1,33,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK22-02]人間クラス２','JSS-JK22-01　のプログラムについて<br>Humanクラスに身長（整数値）の情報を追加して<br>displayメソッドで表示するようにしたい。<br><br>修正内容は以下の通り。<br>・Humanクラスのインスタンス変数に身長を格納する変数を追加<br>・Humanクラスのコンストラクタで身長を受け取るように変更<br>・displayメソッドで身長を表示するように変更<br><br>なお、身長にはNishinoに172をItoに164を渡すものとし<br>コンソールの表示は以下のようになるものとする<br>---------------------------<br>name: Nishino<br>nickName: city boy<br>height: 172<br>name: Ito<br>nickName: Pancho<br>height: 164<br>---------------------------',1,'2017-11-07 06:57:52','2017-11-07 06:57:52',1,1,33,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK23-01]しっぽマリオの実装','Marioクラスを継承したTailMarioクラス（しっぽマリオ）を作成しましょう。<br>TailMarioクラスは　attackメソッドのみを持ち<br>とりあえず今は、attackメソッドの処理は「tail attack!!」と表示するだけでOKです<br><br>以下のプログラムの？を埋めてプログラムを完成させましょう<br>ファイルは全部で３つあります<br>------[Mario.java]-----<br>public class Mario{<br>	int x = 0;	//x position<br>	int y = 0;	//y position<br>	<br>	public void jump(){<br>		System.out.println(\"jump\");<br>	}<br>	<br>	public void run(){<br>		x += 2;<br>	}<br>	<br>	public void walk(){<br>		x++;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"x:\"+x);<br>		System.out.println(\"y:\"+y);<br>	}<br>}<br>------------------<br><br>------[TailMario.java]-----<br>public class TailMario ？？{<br>	？（attackという名前のメソッドを作成する）<br>}<br>---------------------------<br>------[JssJk2301.java]-----<br>public class JssJk2301{<br>	public static void main(String[] args){<br>		TailMario mario = new TailMario();<br>		<br>		mario.display();<br>		mario.walk();<br>		mario.display();<br>		mario.attack();<br>	}<br>}<br>---------------------------',1,'2017-11-10 09:06:05','2019-04-17 10:40:54',1,1,35,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK23-02]クラスの継承','あるRPGのクラスを考えます。<br>戦士は、転職して魔法が使える「魔法戦士」になることができます。<br><br>魔法戦士は戦士の能力を「継承」します。<br><br>これをプログラムで表すとどうなるかを考えよう！<br><br>-------[Solder.java]-------<br>public class Soldier{<br>	int hp;<br>	int attackPow;<br>	<br>	Soldier(int hp,int attackPow){<br>		this.hp = hp;<br>		this.attackPow = attackPow;<br>	}<br>	<br>	public void attack(){<br>		System.out.println(\"attack!\");<br>	}<br>}<br>-------------------------------<br><br>-------[MagicalSoldier .java]-------<br>？？？？（Solderクラスを継承したMagicalSoldier を宣言する）{<br>	int mp;<br>	<br>	MagicalSoldier(int hp,int attackPow){<br>		super(hp,attackPow);<br>	}<br>	<br>	public void useMagic(){<br>		System.out.println(\"Magic!!\");<br>	}<br>}<br>-------------------------------<br><br>-------[JssJk2302.java]-------<br>public class JssJk2302{<br>	public static void main(String[] args){<br>		MagicalSoldier magicSolder = new MagicalSoldier(100,80);<br>		<br>		？？？（インスタンスメソッドの呼び出し）<br>		？？？（インスタンスメソッドの呼び出し）<br>	}<br>}<br>-------------------------------<br>↑のプルグラムを実行するとコンソールには<br>=============<br>attack!<br>Magic!!<br>=============<br>と表示される<br><br>ヒント：JssJk2302のなかの？？？は、コンソールの表示から、どのメソッドを呼び出せばよいかを考える！',1,'2017-11-10 09:59:31','2017-11-10 09:59:31',1,1,35,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK23-03]オーバーライド！','動物には泣き声がありますよね。<br>犬はワンで、猫はニャーですね。<br><br>これをオーバーライドを使って表現しましょう。<br><br>「動物」というクラスを作って「泣く」というメソッドを作りましょう。<br>そのサブクラスとして、「犬」と「猫」を作って<br>「泣く」というメソッドを上書きしてみましょう。<br><br>「犬」インスタンスの泣くメソッドを実行したら「Woof」と表示し<br>「猫」インスタンスの泣くメソッドを実行したら「Meow」と表示しましょう<br><br>以下のプログラムの？を埋めましょう。<br>-------[Animal.java]------<br>public class Animal{<br>	//make a sound<br>	public void makeSound(){<br>		System.out.println(\"no sound\");<br>	}<br>}<br>-------------------------------<br>-------[Dog .java]------<br>public class Dog extends Animal{<br>	//make a sound<br>	？？（オーバーライドする）{<br>		System.out.println(\"Woof\");<br>	}<br>}<br>-------------------<br>-------[Cat .java]------<br>public class Cat extends Animal{<br>	//make a sound<br>	？？（オーバーライドする）{<br>		System.out.println(\"Meow\");<br>	}<br>}<br>-------------------<br>-------[JssJk2303.java]------<br>public class JssJk2303{<br>	public static void main(String[] args){<br>		？？（Dogクラスのインスタンスを作成する）<br>		dog.makeSound();<br>		<br>		？？（Catクラスのインスタンスを作成する）<br>		cat.makeSound();<br>	}<br>}<br>-------------------<br><br>上記プログラムを実行するとコンソールには<br>-------<br>Woof<br>Meow<br>-------',1,'2017-11-10 10:38:13','2017-11-10 10:38:13',1,1,35,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK23-04]馬もいるよ','さきほどの　JSS-JK23-03　のプログラムに<br>「馬」のクラスを追加しましょう。<br><br>「馬」クラスの名前は「Horse」。<br>「動物」クラスを継承しており、鳴き声は「whinny」です。<br><br>コンソールには↓になるようにしましょう<br>------------------<br>Woof<br>Meow<br>whinny<br>------------------',1,'2017-11-10 10:46:50','2017-11-10 10:46:50',2,1,35,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK24-01]コンストラクタを呼び出そう','↓のプログラムを実行すると、コンソールに<br>-------<br>called Mario constructor1!<br>x:0<br>y:0<br>x:1<br>y:0<br>tail attack!!<br>-------<br>と表示された。<br><br>？の部分を埋めてプログラムを完成させてください。<br>-------------[Mario.java]-----------------<br>public class Mario{<br>	int x = 0;	//x position<br>	int y = 0;	//y position<br>	<br>	Mario(){<br>		System.out.println(\"called Mario constructor1!\");<br>		x = 0;<br>		y = 0;<br>	}<br>	<br>		<br>	public void jump(){<br>		System.out.println(\"jump\");<br>	}<br>	<br>	public void run(){<br>		x += 2;<br>	}<br>	<br>	public void walk(){<br>		x++;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"x:\"+x);<br>		System.out.println(\"y:\"+y);<br>	}<br>}<br>-----------------------------------<br>--------[TailMario.java]--------<br>public class TailMario extends Mario{<br>	public void attack(){<br>		System.out.println(\"tail attack!!\");<br>	}<br>}<br>-----------------------------------<br>--------[JssJk2401.java]--------<br>public class JssJk2401{<br>	public static void main(String[] args){<br>		TailMario mario = ？;<br>		<br>		mario.display();<br>		<br>		mario.walk();<br>		<br>		mario.display();<br>		<br>		mario.attack();<br>	}<br>}<br>-------------------------------------<br><br><br>',1,'2017-11-20 07:27:15','2017-11-20 07:27:15',1,1,36,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK24-02]コンストラクタを呼び出そう２','↓のプログラムを実行すると、コンソールに<br>-------<br>called Mario constructor2!<br>x:10<br>y:10<br>x:11<br>y:10<br>tail attack!!<br>-------<br>と表示された。<br><br>？の部分を埋めてプログラムを完成させてください。<br>-------------[Mario.java]-----------------<br>public class Mario{<br>	int x = 0;	//x position<br>	int y = 0;	//y position<br>	<br>	Mario(){<br>		System.out.println(\"called Mario constructor1!\");<br>		x = 0;<br>		y = 0;<br>	}<br>	Mario(int x,int y){<br>		System.out.println(\"called Mario constructor2!\");<br>		this.x = x;<br>		this.y = y;<br>	}<br>	<br>	public void jump(){<br>		System.out.println(\"jump\");<br>	}<br>	<br>	public void run(){<br>		x += 2;<br>	}<br>	<br>	public void walk(){<br>		x++;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"x:\"+x);<br>		System.out.println(\"y:\"+y);<br>	}<br>}<br>-----------------------------------<br>--------[TailMario.java]--------<br>public class TailMario extends Mario{<br>	TailMario(int x,int y){<br>		super(x,y);<br>	}<br>	public void attack(){<br>		System.out.println(\"tail attack!!\");<br>	}<br>}<br>-----------------------------------<br>--------[JssJk2402.java]--------<br>public class JssJk2402{<br>    public static void main(String[] args){<br>        TailMario mario = ？;<br>        <br>        mario.display();<br>        <br>        mario.walk();<br>        <br>        mario.display();<br>        <br>        mario.attack();<br>    }<br>}<br>-------------------------------------<br>ヒント：TailMarioの引数つきコンストラクタがあるが、これを呼べばよい。<br>　　　　コンソールの表示から、何を渡せば良いかを考える',1,'2017-11-20 08:08:53','2017-11-20 08:08:53',1,1,36,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK24-03]コンストラクタを呼び出そう３','↓のプログラムはコンパイルが通らない、修正してコンパイルが通るようにしよう！<br>-------------[Mario.java]-----------------<br>public class Mario{<br>    int x = 0;    //x position<br>    int y = 0;    //y position<br>    <br>    Mario(){<br>        System.out.println(\"called Mario constructor1!\");<br>        x = 0;<br>        y = 0;<br>    }<br>    Mario(int x,int y){<br>        System.out.println(\"called Mario constructor2!\");<br>        this.x = x;<br>        this.y = y;<br>    }<br>    <br>    public void jump(){<br>        System.out.println(\"jump\");<br>    }<br>    <br>    public void run(){<br>        x += 2;<br>    }<br>    <br>    public void walk(){<br>        x++;<br>    }<br>    <br>    public void display(){<br>        System.out.println(\"x:\"+x);<br>        System.out.println(\"y:\"+y);<br>    }<br>}<br>-----------------------------------<br>--------[TailMario.java]--------<br>public class TailMario extends Mario{<br>	TailMario(){<br>		super(10,10);<br>	}<br>	<br>	public void attack(){<br>		System.out.println(\"tail attack!!\");<br>	}<br>}<br>-----------------------------------<br>--------[JssJk2402.java]--------<br>public class JssJk2403{<br>	public static void main(String[] args){<br>		TailMario mario = new TailMario(10,10);<br>		<br>		mario.display();<br>	}<br>}<br>-------------------------------------<br><br>なお、修正後、実行するとコンソールに<br>---<br>called Mario constructor2!<br>x:10<br>y:10<br>-----<br>と表示される',1,'2017-11-20 08:25:59','2017-11-20 08:25:59',1,1,36,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK25-01]ポリモフィズム１','以下のプログラムを実行すると<br>---------<br>I\'m Dog<br>I\'m Human<br>I\'m Cat<br>---------<br>と表示される<br><br>？を埋めてプログラムを完成させよう！<br>--------[Animal.java]-------<br>public class Animal{<br>	public void whoAreYou(){<br>		System.out.println(\"I\'m Animal\");<br>	}<br>}<br><br>class Human extends Animal{<br>	public void whoAreYou(){<br>		System.out.println(\"I\'m Human\");<br>	}<br>}<br><br>class Dog extends Animal{<br>	public void whoAreYou(){<br>		System.out.println(\"I\'m Dog\");<br>	}<br>}<br><br>class Cat extends Animal{<br>	public void whoAreYou(){<br>		System.out.println(\"I\'m Cat\");<br>	}<br>}<br>-------------------------------<br>-----[JssJk2501.java]-----<br>public class JssJk2501{<br>	public static void main(String[] args){<br>		Animal[] animals = new Animal[3];<br>		<br>		animals[0] = ？;<br>		animals[1] = ？;<br>		animals[2] = ？;<br>		<br>		for(int i = 0; i < animals.length; i++ ){<br>			animals[i].whoAreYou();<br>		}<br>	}<br>}<br>-------------------------------',1,'2017-11-20 10:39:04','2017-11-20 10:39:04',1,1,37,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK25-02]ポリモフィズム２','Mainの引数で 0 が渡されたらYouTubeを実行して、0以外が渡されたらDVDを実行したい。<br><br>？を埋めてプログラムを完成させよ<br>------[PlayObject.java]-----<br>public class PlayObject{<br>	public void play(){<br>	}<br>}<br><br>class YoutubePlayer extends PlayObject{<br>	public void play(){<br>		System.out.println(\"YouTube Start!\");<br>	}<br>}<br><br>class DvdPlayer extends PlayObject{<br>	public void play(){<br>		System.out.println(\"DVD Start!\");<br>	}<br>}<br>----------------------------------<br>------[JssJk2502.java]-----<br>public class JssJk2502{<br>	public static void main(String[] args){<br>		int kind = Integer.parseInt(args[0]);<br>		<br>		PlayObject playObject = null;<br>		<br>		？？？（複数行）<br>		<br>		playObject.play();<br>	}<br>}<br>----------------------------------<br>ヒント：if文を使って、代入するインスタンスを変える',1,'2017-11-22 06:03:23','2017-11-22 06:03:23',1,1,37,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK25-03]ポリモフィズム３','ゲーム作成をしている西野先生にたのまれた。<br>モンスタークラスをポリモーフィズムを意識して改造したいんだ。<br>最終的な表示は<br>-----<br>Slime is attack! 1 damege<br>Draky is attack! 10 damege<br>Golem is attack! 100 damege<br>----<br>としたいんだ。<br>上記のように表示するために、Monsterクラスから<br>派生させて、スライム、ドラキー、ゴーレムクラスを作ってくれないか。<br>それぞれのクラスにattackというメソッドを作って、それを実行されたら<br>上記のように表示させたいんだ。<br><br>Main側は私がつくるので、君はそれ以外を作ってくれ！<br>---------------------<br>public class JssJk2503{<br>	public static void main(String[] args){<br>		Monster[] monsters =<br>		{<br>			new Slime(),new Draky(),new Golem()<br>		};<br>		<br>		for( int i = 0; i < monsters.length; i++ ){<br>			monsters[i].attack();<br>		}<br>		<br>	}<br>}<br>------------',1,'2017-11-20 11:00:40','2017-11-20 11:00:40',2,1,37,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK26-01]修飾子　その１','次のプログラムの修飾子は何を付けたら良いでしょうか？<br>？を生めてプログラムを完成させてください<br><br>----[Person.java]----<br>public class Person{<br>	？int age;<br>	<br>	？Person(int age){<br>		this.age = age;<br>	}<br>	<br>	？int getAge(){<br>		return age;<br>	}<br>	<br>}<br>----[JssJk2601.java]----<br>public class JssJk2601{<br>	public static void main(String[] args){<br>		Person p = new Person(40);<br>		<br>		int age = p.getAge();<br>		<br>		System.out.println(\"age:\"+age);<br>	}<br>}<br>----------------------------',1,'2017-11-30 07:45:25','2017-11-30 07:45:25',1,1,40,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK26-02]修飾子　その２','次のプログラムの修飾子は何にすべきでしょうか？<br>？を埋めてプログラムを完成させてください<br>------[Car.java]------<br>public class Car{<br>	？String name;<br>	？int speed;<br>	<br>	public Car(String name){<br>		this.name = name;<br>		this.speed = 0;<br>	}<br>	// spped up<br>	private void upSpeed(){<br>		speed += 10;<br>	}<br>	// spped down<br>	？void downSpeed(){<br>		speed -= 10;<br>		if( speed < 0 ){<br>			speed = 0;<br>		}<br>	}<br>	？void doPedal(int count){<br>		for(int i = 0; i < count; i++ ){<br>			upSpeed();<br>		}<br>	}<br>	？void doBreake(int count){<br>		for(int i = 0; i < count; i++ ){<br>			downSpeed();<br>		}<br>	}<br>	？int getSpeed(){<br>		return speed;<br>	}<br>}<br>-------------[JssJk2602.java]---------------<br>public class JssJk2602{<br>	public static void main(String[] args){<br>		Car car = new Car(\"Lupin\");<br>		<br>		car.doPedal(5);<br>		<br>		System.out.println(\"speed1:\"+car.getSpeed());<br>		<br>		car.doBreake(100);<br>		<br>		System.out.println(\"speed2:\"+car.getSpeed());<br>	}<br>}<br>-----------------------',1,'2017-11-30 07:49:29','2017-11-30 07:49:29',1,1,40,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK26-03]修飾子　その３','つぎのプログラムの？を生めよ！<br><br>-----[Animal.java]-----<br>public class Animal{<br>	？String name;<br>	？String type;<br>	<br>	？Animal(String name,String type){<br>		this.name = name;<br>		this.type = type;<br>	}<br>	<br>	？void display(){<br>		System.out.println(\"name:\"+name);<br>		System.out.println(\"type:\"+type);<br>	}<br>	<br>	？void run(){<br>		System.out.println(\"animal run!\");<br>	}<br>}<br><br>-------[Dog.java]--------<br>public class Dog extends Animal{<br>	？Dog(String name){<br>		super(name,\"dog\");<br>	}<br>	<br>	public void run(){<br>		System.out.println(\"dog run!\");<br>	}<br>}<br><br>-------[JssJk2603.java]--------<br>public class JssJk2603{<br>	public static void main(String[] args){<br>		Dog dog = new Dog(\"pochi\");<br>		<br>		dog.display();<br>		dog.run();<br>	}<br>}<br>-----------------------------',1,'2017-11-30 08:01:45','2017-11-30 08:01:45',1,1,40,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK26-04]修飾子　その４','次のプログラムはコンパイルが通らない。<br>通るように修正してください！エラーは複数あります<br><br>-----[Shape.java]------<br>public class Shape{<br>	private String type;<br>	<br>	private double calcArea(){<br>		return 0;<br>	}<br>}<br><br><br>-----[Circle .java]------<br>public class Circle extends Shape{<br>	private double r;<br>	private final double PAI = 3.14;<br>	<br>	public Circle(){<br>		type = \"Circle\";<br>	}<br>	<br>	public Circle(double r){<br>		this.r = r;<br>		type = \"Circle\";<br>	}<br>	<br>	private double calcArea(){<br>		return r * r * PAI;<br>	}<br>}<br><br>-----[JssJk2604.java]------<br>public class JssJk2604{<br>	private int num;<br>	<br>	public static void main(String[] args){<br>		int locNum = Integer.parseInt(args[0]);<br>		<br>		Circle c = new Circle(10);<br>		<br>		System.out.println(\"area=\"+c.calcArea());<br>	}<br>}<br>--------------------------------',1,'2017-11-30 08:16:10','2017-11-30 08:16:10',2,1,40,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK27-01]抽象的だね１','次のプログラムの？を埋めてプログラムを完成させよう<br>-----[Sports.java]------<br>public ？class Sports{<br>	public ？String getName();<br>}<br>-----[BaseBall .java]------<br>public class BaseBall extends Sports {<br>	public ？getName(){<br>		return \"baseball\";<br>	}<br>}<br>-----[BasketBall .java]------<br>public class BasketBall extends Sports {<br>	public String ？(){<br>		return \"basketball\";<br>	}<br>}<br>-----[JssJk2701.java]------<br>public class JssJk2701{<br>	public static void main(String[] args){<br>		Sports s1 = new BaseBall();<br>		Sports s2 = new BasketBall();<br>		<br>		System.out.println(s1.getName());<br>		System.out.println(s2.getName());<br>	}<br>}',1,'2017-12-01 10:50:16','2017-12-01 10:50:16',1,1,41);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK27-02]抽象的だね２','西野先生は、その昔、仕事で小学生向けの算数ソフトを作ったことがあります（実話）<br>そのなかで、いろんな図形の面積を計算する問題がありました。<br><br>どうすれば効率的にプログラムを組めるかを考えて、抽象クラスを使うまでは<br>思いついたのですが、コンパイルがとおりません。<br>西野先生は悩んでいます。もうそれこそ三日三晩悩んでいます！<br><br>みんな！西野先生をたすけてあげて！<br>なお、円の面積について、半径は10.5、三角形の高さは4で底辺は2です。<br><br>-----[Shape.java]-----<br>public  class Shape{	<br>	public abstract double calcArea();<br>}<br>-----[Triangle .java]-----<br>public class Triangle extends Shape{<br>	private double t; //teihen<br>	private double h; //takasa<br>	<br>	public Triangle( double t,double h ){<br>		this.t = t;<br>		this.h = h;<br>	}<br>	<br>	public double calcArea(){<br>		return (t * h) / 2.0;<br>	}<br>}<br>-----[Circle .java]-----<br>public class Circle extends Shape{<br>	private final double PAI = 3.14;<br>	private double r; //hankei<br>	<br>	public Circle( double r ){<br>		this.r = r;<br>	}<br>	<br>	public double calcArea(){<br>		return r * r * PAI;<br>	}<br>}<br>-----[JssJk2702.java]-----<br>public class JssJk2702{<br>	public static void main(String[] args){<br>		Shape s1 = new Shape();<br>		Shape s2 = new Shape();<br>		<br>		System.out.println(\"Circle:\"+s1.calcArea());<br>		System.out.println(\"Triangle:\"+s2.calcArea());<br>	}<br>}',1,'2017-12-01 10:58:11','2017-12-01 10:58:11',1,1,41);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK27-03]県の特産品','姫野先生は、九州各県の名産品を一覧表示するプログラムを<br>作りたいと思いました。<br><br>将来的に、九州だけでなく全国の都道府県に拡張することを考えて<br>Kenクラスという抽象クラスを作り、その下にブロック（九州、関東、四国など）を<br>表すクラス、さらにその下に都道府県を表すクラスを作ることにしました。<br><br>また、名産品の表示するメソッド自体は、それぞれもたず<br>Kenクラスに作り、ブロック名と名産品をそれぞれ、ブロッククラス、都道府県クラスから<br>取得するようにすれば、それぞれのクラスで、名産品を返すメソッドだけ作れば良いので<br>あとの実装がらくだと考えました。<br><br>下の？を埋めてプログラムを完成させてください。<br>-------[Ken.java]------<br>public ？class Ken {<br>	public void display(){<br>		System.out.println(\"Hello This is \"+getName());<br>		System.out.println(\"Block is \"+getBlock());<br>		System.out.println(\"Tokusanhin is \"+getTokusan());<br>		System.out.println(\"--------------------\");<br>	}<br>	<br>	protected abstract String getTokusan();<br>	protected abstract String getName();<br>	protected abstract String getBlock();<br>}<br>-------[Kyusyu.java]------<br>public ？？ Kyusyu ？？{	<br>	protected String getBlock(){<br>		return \"Kyusyu\";<br>	}<br>}<br>-------[Fukuoka.java]------<br>public class Fukuoka extends Kyusyu {	<br>	protected String getTokusan(){<br>		return \"mentaiko\";<br>	}<br>	protected String getName(){<br>		return \"Fukuoka\";<br>	}<br>}<br>-------[Saga.java]------<br>？？？（考えてみよう）<br><br>-------[JssJk2703.java]------<br>public class JssJk2703{<br>	public static void main(String[] args){<br>		Ken[] kens = <br>		{<br>			new Fukuoka(),<br>			new Saga()<br>		};<br>		<br>		for( int i = 0; i < kens.length; i++ ){<br>			kens[i].display();<br>		}<br>	}<br>}<br>------------------------------------------<br><br>なお、プログラムを実行すると以下のような表示になる<br>===========================<br>Hello This is Fukuoka<br>Block is Kyusyu<br>Tokusanhin is mentaiko<br>--------------------<br>Hello This is Saga<br>Block is Kyusyu<br>Tokusanhin is Mr.Nishino<br>--------------------<br>===========================',1,'2017-12-01 11:11:12','2017-12-01 11:11:12',2,1,41,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK28-01]インターフェース！','次のプログラムの？を埋めてプログラムを完成させましょう<br>------[Payment.java]-----<br>public interface Payment{<br>	public boolean doPayment(int price);<br>}<br><br>-----[ToarlFinance.java]-----<br>public class ToarlFinance ？ Payment{<br>	<br>	public ？{<br>		System.out.println(\"ToarlFinance\");<br>		return true;<br>	}<br>}<br><br>-----[TestFinance.java]-----<br>public class TestFinance ？Payment{<br>	<br>	public ？{<br>		System.out.println(\"TestFinance\");<br>		return true;<br>	}<br>}<br><br>-----[NandemoFinance.java]-----<br>public class NandemoFinance ？ Payment{<br>	<br>	public ？{<br>		System.out.println(\"NandemoFinance\");<br>		return true;<br>	}<br>}<br><br>-----[JssJk2801.java]-----<br>public class JssJk2801<br>{<br>	public static void main(String[] args){<br>		int kind = Integer.parseInt(args[0]);<br>		<br>		Payment finace = null;<br>		<br>		if( kind == 0 ){<br>			finace = new ToarlFinance();<br>		}else if(kind == 1){<br>			finace = new TestFinance();<br>		}else{<br>			finace = new NandemoFinance();<br>		}<br>		<br>		//do payment<br>		finace.doPayment(15000);<br>	}<br>	<br>}',1,'2017-12-04 10:50:16','2017-12-04 10:50:16',1,1,42,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK28-02]PC周辺機器','西野先生はPCの周辺機器の開発を言い渡されました。<br>まず、西野先生は、仕様を調べました。すると<br>PCに接続する機器はかならず<br>　・アタッチ（接続）した時の処理<br>　・デタッチ（外す）した時の処理<br>　・接続機器の名前を取得するメソッド<br>が必要とのこと。<br>そこでまず、PcAccessableというカッコイイ名前の<br>インターフェースを作成し、手始めにマウスとUSBメモリの開発を<br>することにしました。<br>プログラムの？を埋めてプログラムを完成させてください。<br><br><br>-----[PcAccessable.java]-----<br>public ？ PcAccessable{<br>	<br>	//when attach<br>	？;<br>	<br>	//when detach<br>	public void detach();<br>	<br>	//name<br>	public String getName();<br>}<br><br>-----[Mouse.java]-----<br>public class Mouse ？ PcAccessable{<br>	<br>	//when attach<br>	public void attach(){<br>		System.out.println(\"mouse attach OK!\");<br>	}<br>	//when detach<br>	public void detach(){<br>		System.out.println(\"mouse detach OK!\");<br>	}<br>	//name<br>	public String getName(){<br>		return \"Mouse\";<br>	}<br>}<br><br>-----[UsbMemory.java]-----<br>public class UsbMemory ？ PcAccessable{<br>	<br>	//when attach<br>	public void attach(){<br>		System.out.println(\"USB Memory attach OK!\");<br>	}<br>	//when detach<br>	public void detach(){<br>		System.out.println(\"USB Memory detach OK!\");<br>	}<br>	//name<br>	public String getName(){<br>		return \"USB Memory\";<br>	}<br>}<br><br>-----[JssJk2802.java]-----<br>public class JssJk2802<br>{<br>	public static void main(String[] args){<br>		PcAccessable pa1 = ?;<br>		PcAccessable pa2 = ?;<br>		<br>		//first. we attach to the PC<br>		pa1.attach();<br>		pa2.attach();<br>		<br>		//next. we get name<br>		System.out.println(\"name is \"+pa1.getName());<br>		System.out.println(\"name is \"+pa2.getName());<br>		<br>		//last. we detach from the PC<br>		pa1.detach();<br>		pa2.detach();<br>		<br>	}<br>	<br>}<br>------------------------<br>コンソールには以下のように表示覚ます<br>=====================<br>mouse attach OK!<br>USB Memory attach OK!<br>name is Mouse<br>name is USB Memory<br>mouse detach OK!<br>USB Memory detach OK!<br>=====================',1,'2017-12-04 10:58:10','2017-12-04 10:58:10',1,1,42,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK28-03]PC周辺機器２','西野先生はさらに、マウスといっても色々あることに気付いてしまいました！（がーん）<br><br>アタッチとデタッチの処理については、マウスごとに共通ですが<br>マウスの名前は、マウスごとに違います。<br><br>そこで、先ほど作ったMouseクラスを抽象クラスに変更して<br>MouseクラスのgetNameは抽象メソッドに変更しました。<br><br>さらに、以下の3種類をとりあえずサポートしました<br>・ホイールマウス（昔、あったボールが付いたマウス）<br>・赤外線マウス（今主流のやつ）<br>・無線マウス（無線のやつ）<br><br>以下のプログラムの？を埋めてプログラムを完成させてください<br>-----[PcAccessable.java]----<br>変更無の為　記載省略<br><br>-----[PcAccessable.java]----<br>public ？ class Mouse ？PcAccessable{<br>	<br>	//when attach<br>	public void attach(){<br>		System.out.println(\"mouse attach OK!\");<br>	}<br>	//when detach<br>	public void detach(){<br>		System.out.println(\"mouse detach OK!\");<br>	}<br>	//name<br>	？？ getName();<br>}<br><br>-----[WheelMouse.java]----<br>public class WheelMouse ？Mouse{<br>	public String getName(){<br>		return \"WheelMouse\";<br>	}<br>}<br><br>-----[InfraredMouse.java]----<br> public class InfraredMouse ？Mouse{<br>	public String getName(){<br>		return \"InfraredMouse\";<br>	}<br>}<br><br>-----[WirelessMouse.java]----<br>public class WirelessMouse ？Mouse{<br>	public String getName(){<br>		return \"WirelessMouse\";<br>	}<br>}<br><br>-----[UsbMemory.java]----<br>変更無の為　記載省略<br><br>-----[JssJk2803.java]----<br>public class JssJk2803 {<br>	<br>	public static void main(String[] args){<br>		PcAccessable[] pas =<br>		{<br>			new WheelMouse(),<br>			new WirelessMouse(),<br>			new InfraredMouse(),<br>			new UsbMemory()<br>		};<br>		<br>		//first. we attach to the PC<br>		for( int i = 0; i < pas.length; i++ ){<br>			pas[i].attach();<br>		}<br>		<br>		//next. we get name<br>		for( int i = 0; i < pas.length; i++ ){<br>			System.out.println(\"name is \"+pas[i].getName());<br>		}<br>		<br>		//last. we detach from the PC<br>		for( int i = 0; i < pas.length; i++ ){<br>			pas[i].detach();<br>		}<br>	}<br>}',1,'2017-12-04 11:20:58','2017-12-04 11:20:58',1,1,42,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK28-04]PC周辺機器３','さらに西野先生は、上司から追加仕様を言い渡されました。<br>「名前を表示するのはアタッチが成功して、現在接続中のものだけにしてくれ」<br><br>西野先生は、なやみましたが、以下のようにすることとしました。<br><br>・PcAccessableに接続を確認する為のメソッド isConnect() を追加する<br>・PC周辺機器を表す、抽象クラスPcGearを作成する。PcGearはPcAccessableの実装クラスにする。<br>　PcGearは、接続状態を表すboolean型のフラグconnectFlgを持つ<br>・Mouse、UsbMemoryをPcGearのサブクラスに変更する<br>・Mouse、UsbMemoryにあった、アタッチ、デタッチの処理をPcGearに移動して、アタッチしたときに<br>　フラグ（connectFlg）をtrue、デタッチしたときにfalseにする。<br>・PcGearにisConnectを実装し、接続状態を返す<br><br>なお、どの製品がアタッチされるのかは、mainに渡される引数に指定されている。<br>引数が<br>0：ホイールマウス 1：無線マウス　2：赤外線マウス　3：USBメモリ<br>となる<br><br>JssJk2804 以外は、自分で考えて修正してみよう！<br>----------[JssJk2804.java]-------<br>public class JssJk2804 {<br>	<br>	public static void main(String[] args){<br>		PcAccessable[] pas =<br>		{<br>			new WheelMouse(),<br>			new WirelessMouse(),<br>			new InfraredMouse(),<br>			new UsbMemory()<br>		};<br>		<br>		//first. we attach to the PC<br>		for(int i = 0; i < args.length && i < 4; i++ ){<br>			int index = Integer.parseInt(args[i]);<br>			<br>			if( 0 <= index && index < 4 ){<br>				pas[index].attach();<br>			}<br>		}<br>		<br>		//next. we get name<br>		for( int i = 0; i < pas.length; i++ ){<br>			if( pas[i].isConnect() ){<br>				System.out.println(\"name is \"+pas[i].getName());<br>			}<br>		}<br>		<br>		//last. we detach from the PC<br>		for( int i = 0; i < pas.length; i++ ){<br>			if( pas[i].isConnect() ){<br>				pas[i].detach();<br>			}<br>		}<br>		<br>	}<br>}<br>------------------------------------<br>例）引数に１と３が渡ってきたら以下のような表示となる<br>-------------------<br>WirelessMouse attach OK!<br>USB Memory attach OK!<br>name is WirelessMouse<br>name is USB Memory<br>WirelessMouse detach OK!<br>USB Memory detach OK!<br>-------------------',1,'2017-12-04 11:20:20','2017-12-04 11:20:20',2,1,42,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK29-01]例外発生1！','次のプログラムの？を埋めて以下のような表示しましょう。<br>=============<br>例外発生！<br>finallyが実行されました！<br>=============<br>-------------------------------------------<br>public class JssJk2901 {<br><br>	public static void main(String[] args) {<br>		int a = 1;<br>		int b = 0;<br><br>		？{<br>			int c = a/b;<br>		}？(ArithmeticException e){<br>			System.out.println(\"例外発生！\");<br><br>		}？{<br>			System.out.println(\"finallyが実行されました！\");<br>		}<br>	}<br>}',1,'2017-12-15 04:31:51','2017-12-15 04:31:51',1,1,44,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK29-03]例外発生３！','mainの引数で受け取った文字列が数値に変換できる場合は、数値に変換した値を<br>変換できない場合はコンソールに「変換できない！」を表示したい<br><br>どのようなプログラムにすればよいか？<br><br>例）mainの引数が 1 の場合<br>コンソールには<br>=====<br>1<br>=====<br>を表示<br>※最後に改行有り<br><br>mainの引数が a の場合<br>コンソールには<br>=====<br>変換できない！<br>=====<br>を表示<br>※最後に改行有り<br><br>ヒント：<br>　文字列→数値の変換は Integer.parseInt を使います。<br>　このメソッドは、変換できない場合、ある例外を投げます。<br>　その例外をキャッチして、変換できない場合の処理を書く。<br>　そして、正常に変換できた場合は、普通に処理が続行されるので<br>　Integer.parseIntの直後に数値を表示するプログラムを書けば良い<br>　なんという例外が発生するかはググって調べてみよう！',1,'2017-12-15 04:33:41','2017-12-15 04:33:41',2,1,44,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK29-02]例外発生2！','以下のプログラムを実行した時に、コンソールに↓の様に表示したい。<br>どこに、printlnを入れればよいかを考えて追加してください<br><br>コンソール表示<br>======================<br>例外発生！<br>プログラム終了<br>======================<br><br>プログラム<br>-------------------<br>public class JssJk2902 {<br><br>	public static void main(String[] args) {<br>		int[] arry = new int[2];<br><br>		try{<br>			int c = arry[3];<br>		}catch(ArrayIndexOutOfBoundsException e){<br><br>		}<br><br>	}<br>}<br>-------------------<br>※finallyが無いことに注意',1,'2017-12-15 04:32:51','2017-12-15 04:32:51',1,1,44,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK30-01]例外をなげよう','mainの引数で渡ってきた、引数が<br>「１」だった場合、IllegalArgumentExceptionという例外をthrowして<br>それをキャッチし、<br>「例外発生」と表示うするプログラムを作成しなさい。<br>「１」以外の場合は、引数の文字をそのまま表示すること<br>※引数に数値以外が渡されることは無いものとする。<br><br>---------<br><br>public class JssJk3001 {<br><br>	public static void main(String[] args) {<br><br>		try{<br>			if( args[0].equals(\"1\") ){<br>				？<br>			}else{<br>				System.out.println(Integer.parseInt(args[0]));<br>			}<br><br>		}catch( IllegalArgumentException e){<br>			？<br>		}<br><br>	}<br>}',1,'2017-12-15 09:06:54','2017-12-15 09:06:54',1,1,45,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK30-02]例外を受け取ろう','mainの引数で受け取った、文字列を数値に変換して<br>その数値を添え字として配列を参照して値を表示するプログラムを考えます。<br><br>文字列を数値に変換できない時は<br>　「文字列変換に失敗しました」<br>を表示し、<br>配列の添え字が不正な場合は<br>「配列の添え字が不正です」<br>を表示したいです。<br>以下のプロ恨むの？を埋めて完成させましょう。<br><br>------------<br>public class JssJk3002 {<br>	public static void main(String[] args) {<br>		int[] arry = {0,1,2};<br><br>		try{<br>			int index = Integer.parseInt(args[0]);<br>			int data = arry[ index ];<br><br>			System.out.println(\"data is \"+data);<br><br>		}catch( ？ ){<br>			System.out.println(\"文字列変換に失敗しました\");<br>		}catch(？ ){<br>			System.out.println(\"配列の添え字が不正です\");<br>		}<br>	}<br>}',1,'2017-12-15 09:18:38','2017-12-15 09:18:38',1,1,45,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK30-03]自作例外クラスを投げよう','あなたは、身長と体重を表示するHumanクラスを作成した。<br>人間の身長には限度があるので、あまり大きな値はエラーとしたい。<br><br>この時、身長が２１０より大きいときは自作の例外、HeightTooTallExceptionをスロー<br>することでエラーの処理をすることにした。<br>エラーが発生した場合はコンソールに<br>==========<br>不正な身長がセットされました<br>==========<br>と表示したい。<br>HeightTooTallExceptionは、Exceptionの派生クラスとして作成し、コンストラクタは<br>ない（デフォルトコンストラクタのみ）でOKとする。<br><br>----[JssJk3003.java]----<br>public class JssJk3003 {<br><br>	public static void main(String[] args) {<br>		Human human = new Human();<br><br>		？{<br>			human.setHeight(211);<br>			human.setWeight(100);<br>			human.disp();<br>		}？{<br>			System.out.println(\"不正な身長がセットされました\");<br>		}<br>	}<br>}<br><br>-----[Human.java]-----<br><br>public class Human {<br>	private int height;<br>	private int weight;<br><br>	public int getHeight() {<br>		return height;<br>	}<br><br>	public void setHeight(int height) ？ HeightTooTallException {<br>		if(height > 210){<br>			//例外を投げる<br>			？<br>		}<br><br>		this.height = height;<br>	}<br><br>	public int getWeight() {<br>		return weight;<br>	}<br><br>	public void setWeight(int weight) {<br>		this.weight = weight;<br>	}<br><br>	public void disp(){<br>		System.out.println(\"height:\"+height);<br>		System.out.println(\"weight:\"+weight);<br>	}<br><br>}<br><br>----[HeightTooTallException.java]----<br><br>public class HeightTooTallException ？？ {<br><br>}',1,'2017-12-17 11:47:48','2019-04-19 12:36:37',2,1,45,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-JK30-04]例外の処理書いてみよう','mainの引数で受け取った値を数値に変換して、すべて掛け算するメソッド<br>multiAll　を考える。<br><br>メソッドの仕様は以下の通り<br>-----------------------------------------------<br>メソッド名：multiAll<br>引数：文字列の配列（Stringの配列）<br>戻り値：引数の値をすべてかけた値（整数値）<br>処理：引数で受け取った値を文字列→数値変換し、すべてかけた値を返す。<br>　　　ただし、かける値（配列の数）は３つとし、4つある場合はエラーとする<br>発生する例外：<br>　NumberFormatException：文字列→数値変換できない場合。<br>　IllegalArrayIndexException（自作例外クラス）：引数で受け取った配列の数が4以上の場合<br><br>mainメソッドがあるクラスは以下の通りです。<br>multiAllメソッド、IllegalArrayIndexExceptionを作成してください。<br>-----------------------------------------------<br><br><br>public class JssJk3004 {<br><br>	public static void main(String[] args) {<br><br>		JssJk3004 jss = new JssJk3004();<br>		try{<br>			int total = jss.multiAll(args);<br>			System.out.println(total);<br>		}catch( IllegalArrayIndexException e ){<br>			System.out.println(\"引数の数が不正です\");<br>		}catch( NumberFormatException e ){<br>			System.out.println(\"引数の値が不正です\");<br><br>		}<br>	}<br><br>	？？（multiAllメソッドをここに書く）<br>}',1,'2017-12-17 12:12:23','2017-12-17 12:12:23',2,1,45,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-01]こんにちはJava!','コンソールに<br>----------------<br>Hello!! Java<br>----------------<br>と表示するプログラムを作りましょう。<br>※最後に改行は入っていません。<br>クラス名はKadai11にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:00:48',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-02]今日は良い天気','コンソールに<br>----------------<br>Hello!<br>it is a fine day today!<br>----------------<br>と表示するプログラムを作りましょう。<br>※最後に改行は入っていません。<br>クラス名はKadai12にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:00:58',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-03]変数１','整数型の変数（変数名はnum）を定義して<br>１０で初期化し、コンソールにその変数の値を出しなさい。<br><br>※最後に改行は入れません。<br>クラス名はKadai12にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:01:07',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-04]変数２','小数点型の変数（変数名はdeci）を定義して<br>1.5で初期化し、コンソールにその変数の値を出しなさい。<br><br>※最後に改行は入れません。<br>クラス名はKadai14にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:01:17',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-05]変数と文字列','整数型の変数（変数名はnum）を定義して<br>１０で初期化し、コンソールに以下のように出力しなさい。<br>----------------------<br>num = 10<br>----------------------<br><br>※最後に改行は入れません。<br>クラス名はKadai15にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:01:26',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-06]足し算をしよう','4+5の計算結果を変数numに代入し、コンソールに表示しなさい。<br>※最後い改行は入れません<br>クラス名はKadai16にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:02:02',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-07]足し算をしよう２','1+2+3+4+5+6+7+8+9+10<br>の計算結果を変数numに代入し、コンソールに表示しなさい。<br>※最後い改行は入れません<br>クラス名はKadai17にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:02:11',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-08]四則演算をしよう','（6+2）/ 4 * 10<br>の計算結果を変数numに代入し、コンソールに表示しなさい。<br>※最後い改行は入れません<br>クラス名はKadai18にしましょう。<br><br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:02:20',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-09]小数点が出る計算','3/2<br>の計算結果を変数numに代入し、コンソールに表示しなさい。<br>表示は小数点付きで表示すること<br>※最後い改行は入れません<br>クラス名はKadai19にしましょう。<br><br>ヒント：<br>教科書P.53<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:02:36',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-10]文字列を合体させよう！','文字列　\"Is this a Ken?\"　を変数msg1に代入し<br>文字列  \"Yes, He is Ken Takakura!\"を変数msg2 に代入し<br>さらに、msg1とmsg2を連結して、コンソールに以下のように表示しなさい<br>---------------------<br>Is this a Ken?Yes, He is Ken Takakura!<br>---------------------<br>ヒント：<br>System.out.printlnは出力の最後に自動で改行が入ります。<br>System.out.print は最後に改行は入りません。',1,'2017-08-28 08:13:01','2017-05-01 06:02:44',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-11]総合問題１','1～10までの総和を以下のような形式でコンソールに<br>表示しなさい<br>----------------------<br>1-10 total is 55<br>----------------------<br>※最後い改行は入れません<br>クラス名はKadai111にしましょう。',1,'2017-08-28 08:13:01','2017-05-01 06:02:52',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-12]総合問題２','(1+2*3)/5 * 2 + 3.2 +(6+8)/4<br>を計算しコンソールに結果を表示しなさい。<br>結果は、小数点まで表示すること。<br><br>※最後い改行は入れません<br>クラス名はKadai112にしましょう。<br><br>ヒント：教科書P.53',1,'2017-08-28 08:13:01','2017-05-01 06:03:00',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-13]総合問題３','以下の値を代入した変数を作成しなさい<br>文字列\"is\"が代入された変数msg1<br>文字列\"He\"が代入された変数msg2<br>文字列\"old\"が代入された変数msg3<br>数値1000が代入された変数num<br>文字列\"years\"が代入された変数msg4<br><br>さらに上記の変数を連結してコンソールに以下の<br>文字列を表示しなさい<br>-----------------------------<br>He is 1000 years old.<br>-----------------------------<br>※最後い改行は入れません<br>クラス名はKadai113にしましょう。',1,'2017-08-28 08:13:01','2017-05-01 06:03:09',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-14]総合問題４','123.456の百の位、十の位、一の位、小数点第1位の値、小数点第2位の値、小数点第3位の値<br>を以下のように順に表示するプログラムを作成しなさい。<br>-------------<br>100:1<br>10: 2<br>1:3<br>0.1:4<br>0.01:5<br>0.001:6<br>-------------<br>※最後に改行は入っていない<br>ヒント：123.456にある値をかけて、整数にした後、課題５と同じ要領で各桁の値を求める。',1,'2017-08-28 08:13:01','2017-05-01 06:03:17',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-15]総合問題５','福岡の人口は1,557,669人です。<br>男性が734,993人、女性が822,676人です<br>また世帯数は783,717世帯です。<br><br>福岡の人口のうち男性、女性はそれぞれ何％ですか？<br>また、１世帯の平均人数は何人ですか？<br>結果を以下のような形式で出力してください。<br><br>---------<br>man is xx.xxxxx %<br>woman is xx.xxxx %<br>setai avr xxxx.xxx<br>-------<br>xxxは計算結果の数値です。<br>最後に改行は入りません。<br>なお、<br>男性の％を求める式は （男性の数÷福岡の人口）×100です。<br>女性の％を求める式は （女性の数÷福岡の人口）×100です。<br>世帯の平均を求めるのは、福岡の人口÷世帯数です。',1,'2017-08-28 08:13:01','2017-05-01 06:03:29',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-16]総合問題６','以下のプログラムを実行すると変数 str1に文字列が、num1に数値代入されます。<br><br>str1、num1を使って以下のようにコンソールに表示しなさい<br>------<br>args is XXX and YYY<br>------<br>※最後に改行は入らない<br>※XXXはstr1の値<br>※YYYはnum1の値<br><br>====プログラム====<br>public class JSSJK0116{<br>	public static void main(String[] args){<br>	    String str1 = args[0];<br>	    int num1 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-15 02:15:28',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-17]総合問題７','以下のプログラムを実行すると変数num1、num2に数値が代入されます。<br><br>num1が底辺の長さ、num2が高さだとして、三角形の面積を出しましょう<br>出力のフォーマットは↓の通りです<br>------<br>Area of a triangle is XXX<br>------<br>※最後に改行は入らない<br>※XXXは三角形の面積の値<br><br>====プログラム====<br>public class JSSJK0117{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-15 02:24:26',1,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST01-18]総合問題８','以下のプログラムを実行すると変数 str1に文字列が、num1、num2、num3に数値代入されます。<br><br>str1、num1、num2、num3は人の名前と、国語、数学、英語のテスト結果が入ります。<br>それぞれの教科の点数と、平均点をだしましょう。<br><br>出力は以下のようなフォーマットでお願いします。<br>------<br>XXXX score is...<br> Kokugo : YY<br> Math : ZZ<br> English : WW<br> AVR : SS<br>------<br>※最後に改行は入らない<br>※XXXは名前の値<br>※YY、ZZ、WWはそれぞれ、国語、数学、英語の点数<br>※SSは平均点（表示は小数点第2位まで。第3位以下は切捨てとする）<br><br>====プログラム====<br>public class JSSJK0118{<br>	public static void main(String[] args){<br>	    String str1 = args[0];<br>	    int num1 = Integer.parseInt(args[1]);<br>	    int num2 = Integer.parseInt(args[2]);<br>	    int num3 = Integer.parseInt(args[3]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-15 02:43:36',2,1,13,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-01]変数１','整数型の変数を宣言し、以下の計算結果を代入して出力しなさい。<br>256×256÷(10-2)',1,'2017-08-28 08:13:01','2019-03-25 19:14:21',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-02]変数２','小数型の変数を宣言し、以下の計算結果を代入して出力しなさい。<br>1.2 ÷ 0.1 × (0.05+2.2)',1,'2017-08-28 08:13:01','2017-05-02 04:49:41',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-03]分岐１','以下のプログラムを実行すると変数 numに数字が代入されます。<br>続きを作成し、numの値について以下の通り出力してください<br><br>-------[numが0又は1のとき]---------<br>num is 1 or 0<br>-------[numが10のとき]---------<br>num is 10<br>-------[numが20以上30以下の時]---------<br>num is 20-30<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br><br>====プログラム====<br>public class JSSST0203{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 05:04:43',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-04]分岐２','以下のプログラムを実行すると変数 num1、num2に数字が代入されます。<br>続きを作成し、num1とnum2を掛けた値について以下の通り出力してください<br><br>-------[num1とnum2を掛けた値が100以上]---------<br>XXX * YYYY is type A<br>-------[num1とnum2を掛けた値が200以上]---------<br>XXX * YYYY is type B<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br>※XXXXにはnum1の値が、YYYYにはnum2の値が入る<br><br>====プログラム====<br>public class JSSST0204{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 05:19:51',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-05]分岐３','以下のプログラムを実行すると変数 num1、num2に数字が代入されます。<br>続きを作成し、num1とnum2を掛けた値について以下の通り出力してください<br><br>-------[num1とnum2を掛けた値が100以上で且つ2で割り切れる]---------<br>XXX * YYYY is type A<br>-------[num1とnum2を掛けた値が100未満で且つ4で割り切れる]---------<br>XXX * YYYY is type B<br>-------[上記以外の場合]---------<br>OH NO!<br>-------------------------------<br>※最後に改行は入っていません<br>※XXXXにはnum1の値が、YYYYにはnum2の値が入る<br><br>====プログラム====<br>public class JSSST0204{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 05:31:40',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-06]うるう年','以下のプログラムを実行すると変数 numに数字が代入されます。<br>続きを作成し、numがうるう年の場合は以下の表示をコンソールにしなさい。<br>-------[うるう年の場合]---------<br>XXX is leap year!<br>-------------------------------<br>※最後に改行は入っていません<br>※XXXXにはnumの値が入る<br>※うるう年ではない場合は何も表示しない<br>ヒント：うるう年の定義<br>1.西暦が4で割り切れる年は閏年である。<br>2.ただし、100で割り切れる年は閏年ではない。<br>3.ただし、400で割り切れる年は閏年である。<br><br>====プログラム====<br>public class JSSST0206{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-22 05:36:24',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-07]倍数ですか？','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br>続きを作成し、num1がnum2の倍数かどうかを調べてください！<br><br>num1がnum2の倍数であれば<br>---------------------<br>XXX is multiples of YYY<br>---------------------<br>を倍数でなければ<br>--------------------<br>XXX is not multiples of YYY<br>---------------------<br>を表示してください<br>※最後に改行は入っていません<br>※XXXにはnum1をYYYにはnum2を表示してください<br><br>例）num1が１０でnum2が２の場合<br>１０は２の倍数なので<br>10 is multiples of 2<br>を表示する<br><br>====プログラム====<br>public class JSSST0207{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 06:10:46',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-08]天気予報','以下のプログラムを実行すると変数 numに数字が代入されます。<br><br>天気の結果を表示するプログラムを作ろうと思います。<br>降水確率がnumに代入されるので、その数字に応じて天気を表示しましょう。<br><br>入力された降水確率が<br>０・・・fine day!<br>１～２０・・・good day!<br>２１～５０・・・couldy!<br>５１～７５・・・rain!<br>７６～１００・・・heavy rain!<br>１００より大きい数字と、０より小さい数字が入力された場合は<br>「error!」と表示しましょう。<br><br>例）numの値が0の場合コンソールに<br>------<br>fine day!<br>------<br>と表示される<br><br>====プログラム====<br>public class JSSST0208{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2019-03-29 12:25:43',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-09]西野先生の弁当','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br><br>西野先生はお昼にパンを買います。<br>普段は100円のパンを買いますが、3の倍数の日だけは<br>ちょっと豪華に150円のパンを買います。<br><br>num1に買うパンの個数、num2に買う日が代入されるので<br>その日のパンの代金を計算して以下のように出力してください<br>-------<br>today is XXXX yen<br>------<br>XXXXはその日のパンの代金<br><br>例）25日に3個パンを買った場合<br>num1には３、num2には25が代入されている<br>25は3の倍数ではないので100円のパンを買う。<br>パンの代金は　100×3=300円。<br><br>コンソールには<br>-------<br>today is 300 yen<br>------<br>と表示する<br><br>====プログラム====<br>public class JSSST0209{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-02 09:17:53',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-10]姫野先生の家の猫','以下のプログラムを実行すると変数 num1 、 num2 に数字が代入されます。<br><br>姫野先生は猫を飼っています。<br>姫野先生の家の猫はグルメなので高いえさはよく食べます・・・（－へ－）<br><br>・100gあたり100円以上の値段がするえさは1回当たり150g食べます。<br>・100gあたり100円未満の値段のえさは1回当たり50g食べます。<br>・えさは1日１回あげます。<br><br>num1 にえさの100gあたりの値段、num2に買ってきたえさのグラム数が<br>入るので、果たして何日分のえさになるかを求めてください。<br>答えは以下のように出力してください<br>-----------<br>prey is XXX days<br>-----------<br>XXXは求めた答え<br><br>例）<br>100gあたり70円のえさを600g買った場合<br>　num1には70、num2には600が入ります。<br>　70円で、1回当たり50g食べるので<br>　600÷50＝12<br>　12日分となります<br>-----------<br>prey is 12 days<br>-----------<br>====プログラム====<br>public class JSSST0210{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}',1,'2017-08-28 08:13:01','2017-05-02 09:44:53',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-11]動物園の入園料','以下のプログラムを実行すると変数 num1、num2、num3 に数字が代入されます。<br><br>カピバラの聖地である、長崎バイオパークの入園料は<br>以下の通りです。<br><br>・大人（19歳～）：1700円<br>・中高生（13歳～18歳）：1500円<br>・3歳～小学生（3歳～12歳）：800円<br>※シニア割り（60歳以上）の場合：1100円<br><br><br>3人でバイオパークに行く時の合計金額を以下のように表示してください<br>num1に一人目の年齢、num2に二人目の年齢、num3に3人目の年齢が代入されます。<br>-----------<br>entrance fee is XXX yen<br>-----------<br>XXXは求めた答え<br><br>例）20歳、25歳、62歳で行った場合<br>num1に20、num2に25、num3に62が入っている<br>入場料は<br>1700+1700+1100=4500<br>となりコンソールに<br>-----------<br>entrance fee is 4500 yen<br>-----------<br>と表示する<br><br>====プログラム====<br>public class JSSST0210{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0],1,0);<br>	    int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>	}',1,'2017-08-28 08:13:01','2017-05-02 10:09:34',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-13]映画のチケット代','以下のプログラムを実行すると変数 num1、num2、num3 に数字が代入されます。<br><br>西野映画館での映画の料金は以下の通りです。<br><br>・大人（13歳以上）：2000円<br>・子供（3歳～12歳）：1000円<br><br>西野映画館では以下のようなサービスをしています<br>毎月1日は映画の日で、大人も子供も性別関係なく半額になります。<br>2がつく日（12日や20日など）は大人の女性のみ半額になります。<br>3がつく日（13日や30日など）は大人も子供も男性は倍の料金になります。<br><br>num1に映画を見に行った日<br>num2に性別（0なら男、1なら女性）<br>num3に年齢<br>が代入されます。<br><br>映画の料金を計算して、以下のように出力してください<br>-----------------<br>movie is XXXX yen<br>-----------------<br><br>ヒント：2が付く日→日にちの1桁目が2 又は 2桁目が2<br><br>====プログラム====<br>public class JSSST0213{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>	    int num2 = Integer.parseInt(args[1]);<br>	    int num3 = Integer.parseInt(args[2]);<br>            // ココから下に続きを書いてください<br>	}',1,'2017-08-28 08:13:01','2017-05-08 06:20:35',2,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-01]こんにちは！','コンソールに<br>-------<br>Hello!<br>Hello!<br>Hello!<br>Hello!<br>Hello!<br>-------<br>と5回表示しましょう。<br>以下の「？」の部分を修正してプログラムを完成させてください<br>------------<br>public class KadaiST0301 {<br>    public static void main(String[] args) throws Exception {<br>    	for( ? ； ? ； ? ){<br>    		System.out.println( ? );<br>    	}<br>    }<br>}<br>------------',1,'2017-08-28 08:13:01','2017-05-08 01:55:42',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-02]10までの総和','１から１０までの総和をプログラムを用いて計算してください。<br><br>下のプログラムの？を記述してプログラムを完成させてください。<br>-------------<br>public class KadaiST0302 {<br>    public static void main(String[] args) throws Exception {<br>        <br>    	int total = 0;<br>    	for( ? ； ? ； ? ){<br>    		?<br>    	}<br>    	<br>    	System.out.print(total);<br>    }<br>}<br>-------------',1,'2017-08-28 08:13:01','2017-05-08 02:20:29',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-03]1000までの数','1から順に足して行き、合計が1000を超えるのは<br>何まで足した時かを知りたい。<br><br>以下のプログラムの？を記入しプログラムを完成させてください<br>--------<br>public class KadaiST0303 {<br>    public static void main(String[] args) throws Exception {<br>        <br>    	int total = 0;<br>    	int count = 1;<br>    	<br>    	while( ? ){<br>    		total = ?<br>    		?<br>    	}<br>    	<br>    	System.out.print(count-1);<br>    }<br>}<br>---------',1,'2017-08-28 08:13:01','2017-05-08 02:12:00',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-04]1000までの数2 ','1から順に足して行き、合計が1000を超えるのは<br>何まで足した時かを知りたい。<br><br>以下のプログラムの？を記入しプログラムを完成させてください<br>--------<br>public class KadaiST0304 {<br>    public static void main(String[] args) throws Exception {<br>        <br>    	int total = 0;<br>    	int count = 1;<br>    	<br>    	for( ？; i <= 1000; ？ ){<br>    		total = ？<br>    		if( total >= 1000 ){<br>    			count = i;<br>    			？<br>    		}<br>    	}<br>    	<br>    	System.out.print(count);<br>    }<br>}<br>---------',1,'2017-08-28 08:13:01','2017-05-09 03:03:15',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-05]num1までの総和','以下のプログラムを実行すると変数 num1に数字が代入されます。<br><br>num1までの総和を求めるプログラムを作成してください<br>総和は以下の形式でコンソールに表示してください.<br>---------<br>total is XXX<br>---------<br>XXXは総和。<br>最後に改行は入りません<br><br>例）num1が10の場合、総和は55なので<br>--------<br>total is 55<br>-------<br>と表示します。<br><br>ヒント：[JSS-ST03-02]を参考にする。<br>　　　　[JSS-ST03-02]は、10までの総和でしたが、num1までの<br>　　　　総和なので、ループの回数を変えてあげればよい<br><br>====プログラム====<br>public class JSSST0305{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>    }',1,'2017-08-28 08:13:01','2017-05-08 04:27:12',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-06]偶数の数を表示！','1から100までの数字のうち、偶数のみを表示してください。<br>表示は見やすいように、1文字づつカンマ(,)で区切りましょう<br><br>出力例）<br>-----------<br>2,4,6・・・100,<br>----------<br>※最後の数字の後にカンマが付いています。<br>※最後の行には改行は入っていません。<br><br>ヒント：偶数の求め方は[JSS-JK02-05]を参考に！<br>　　　　for文との中で if 文を使います。<br>          for文は1から100までループし、if文では偶数かどうかを<br>　　　　判定します。<br>　　　　偶数の時だけ、その数を出力します。（カンマをつけるのを忘れずに）',1,'2017-08-28 08:13:01','2017-05-08 04:20:56',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST02-12]幸せの黄色い粉','以下のプログラムを実行すると変数 num1 に数字が代入されます。<br>西野先生は、ある商売を始めました。<br>食べるとお酒に酔わなくなり、幸せになれるという黄色い粉を売るのです。<br><br>その黄色い粉の値段は購入するグラム数によって値段が変わります。<br>------------<br>10g以下→1g当たり100円<br>11g以上100g以下→1g当たり90円<br>101g以上500g以下→1g当たり80円<br>501g以上1000g以下→1g当たり70円<br>1001g以上→1g当たり60円<br>-------------<br><br>num1に購入するグラム数が代入されるので、金額を以下の形式で<br>表示してください<br>---------<br>XXXyen<br>---------<br>XXXは金額が入る<br><br><br>例）<br>200g買った場合は、1g80円なので、200×80=16000円となり、コンソールに<br>--------<br>16000yen<br>--------<br>2000g買った場合は、1g60円なので 2000×60=120000円とな、コンソールに<br>--------<br>120000yen<br>--------<br>と表示します<br><br>====プログラム====<br>public class JSSST0212{<br>	public static void main(String[] args){<br>	    int num1 = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}',1,'2017-08-28 08:13:01','2017-05-08 06:28:05',1,1,14,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-07]掛け算の表示！','掛け算（九九）を全て１×１から９×９まで表示しよう！<br>表示は以下のようになるようにお願いします。<br>-------------------<br>1×1=1 1×2=2 1×3=3 1×4=4 1×5=5 1×6=6 1×7=7 1×8=8 1×9=9<br>2×1=2 2×2=4 2×3=6 2×4=8 2×5=10 2×6=12 2×7=14 2×8=16 2×9=18<br>・<br>（省略）<br>・<br>8×1=8 8×2=16 8×3=24 8×4=32 8×5=40 8×6=48 8×7=56 8×8=64 8×9=72<br>9×1=9 9×2=18 9×3=27 9×4=36 9×5=45 9×6=54 9×7=63 9×8=72 9×9=81<br>-------------------<br>※最後に改行が入ります。<br>※2重ループを使うこと<br>※「×」は半角英字のx（エックス[小文字]）とする<br>※各式の終わりには半角スペースが一つだけある<br>ヒント：教科書P.88',1,'2017-08-28 08:13:01','2017-05-09 03:02:05',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-08]掛け算の表示２！ ','掛け算（九九）を全て１×１から９×９まで表示しよう！<br>表示は以下のようになるようにお願いします。<br><br>先ほどは横並びでしたが、今度は縦に並べよう！<br>-------------------<br>1x1=1 2x1=2 3x1=3 4x1=4 5x1=5 6x1=6 7x1=7 8x1=8 9x1=9<br>1x2=2 2x2=4 3x2=6 4x2=8 5x2=10 6x2=12 7x2=14 8x2=16 9x2=18<br>1x3=3 2x3=6 3x3=9 4x3=12 5x3=15 6x3=18 7x3=21 8x3=24 9x3=27<br>・<br>（省略）<br>・<br>1x8=8 2x8=16 3x8=24 4x8=32 5x8=40 6x8=48 7x8=56 8x8=64 9x8=72<br>1x9=9 2x9=18 3x9=27 4x9=36 5x9=45 6x9=54 7x9=63 8x9=72 9x9=81<br>-------------------<br>※最後に改行が入ります。<br>※2重ループを使うこと<br>※「×」は半角英字のx（エックス[小文字]）とする<br>※各式の終わりには半角スペースが一つだけある<br>※きれいにタテには並ばないが気にしない',1,'2017-08-28 08:13:01','2017-05-09 03:02:29',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-09]野球のカウント表示','以下のプログラムを実行すると変数 num1、num2、num3に数字が代入されます。<br><br>西野先生は野球が好きです。<br>特に高校野球。語りだすと止まりません。<br>私の最も古い高校野球の記憶は桑田と清原のPL学園で・・・・（続きを聞きたい人は俺の所に来い）<br><br>野球のカウント（ボール、ストライク、アウト）の表示をしようと思います。<br>num1にボールの数<br>num2にストライクの数<br>num3にアウトの数<br>が代入されてきますので、以下のような形式で表示してください<br>--------------<br>B:OOO<br>S:OO<br>O:OO<br>-------------<br>※最後に改行は入らない<br>※カウントの「O」は英字大文字の「O（オー）」とする<br>※：（コロン）も半角記号の:（コロン）<br><br>例）num1が２、num2が１、num3が２の場合以下のように表示する<br>--------------<br>B:OO<br>S:O<br>O:OO<br>-------------<br><br>====プログラム====<br>public class JSSST0309{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>        int num3 = Integer.parseInt(args[2]);<br>            // ココから下に続きを書いてください<br>    }',1,'2017-08-28 08:13:01','2017-05-09 03:20:13',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-10]三角形を表示しよう！','for文を二重に使って、以下のような三角形を表示しよう<br>--------------------<br>*<br>**<br>***<br>****<br>*****<br>******<br>*******<br><br>--------------------<br>※最後に改行が入っている<br>※*は半角記号の「*（アスタリスク）」<br>ヒント：*は1つづつ増えている。',1,'2017-08-28 08:13:01','2017-05-09 03:28:25',1,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-11]2進数を表示してみよう','以下のプログラムを実行すると変数 num1に数字が代入されます。<br><br>10進数を2進数で表示するプログラムを作ってみよう！<br><br>num1に10進数が表示されるので、2進数に直した数値を表示しよう！<br><br>例）num1が4ならば、コンソールに<br>-----------<br>100<br>----------<br>と表示<br>num1が3ならば、コンソールに<br>---------<br>11<br>---------<br>と表示<br>※num1はかならず１以上の整数とします。<br>※最後に改行は入りません<br><br>====プログラム====<br>public class JSSST0311{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-09 04:07:38',2,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST03-12]姫野先生の消費カロリーは？','以下のプログラムを実行すると変数 num1、num2、num3、num4に数字が代入されます。<br><br>姫野先生は健康の為、テニスをすることを決意しました！<br><br>目標の消費カロリーは164キロカロリーです！<br><br>忙しい姫野先生は、１日４回だけラリーすることにしました。<br>また、目標に達したらラリーの途中でもラリーをやめて<br>それ以降はラリーをしないことにしています。<br><br>num1、num2、num3、num4にそれぞれ1回ごとのラリーが続いた回数が代入されます。<br><br>１回ラリーの消費回数が2.5キロカロリーだとすると<br>姫野先生が目標の消費カロリーに達するのは何回目の<br>ラリーでしょうか？また、達成できないでしょうか？<br><br>以下のように表示してください<br>-----[達成した場合]----<br>OK! XXX time<br>--------------------------<br>※XXXは達成した回数<br>-----[達成しなかった場合]----<br>NG!<br>--------------------------<br><br>例）<br>num1=30 num2=10 num3=42 num4=6だとすると<br>３回目のラリーで164キロカロリーを超えるので<br>---------------------<br>OK! 3 time<br>--------------------<br>と表示する。<br><br>num1=3 num2=2 num3=2 num4=6だとすると<br>４回やっても164キロカロリーは超えないので<br>---------------------<br>NG!<br>--------------------<br>と表示する<br><br>====プログラム====<br>public class JSSST0312{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>        int num3 = Integer.parseInt(args[2]);<br>        int num4 = Integer.parseInt(args[3]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-09 04:28:24',2,1,15,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-01]分岐条件１','以下のプログラムを実行すると変数 num に数字が代入されます。<br><br>numの数値が20以上の場合<br>-------<br>over 20!<br>-------<br>を表示し、<br>20未満の場合は何も表示しないようにしてください。<br>※最後に改行は含みません<br><br>====プログラム====<br>public class JSSST0401{<br>	public static void main(String[] args){<br>	    int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>	}<br>}',1,'2017-08-28 08:13:01','2017-05-17 11:36:42',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-02]分岐条件２','以下のプログラムを実行すると変数 num に数字が代入されます。<br><br>numの値が0以上10未満の場合は<br>------<br>num is 0 - 9<br>------<br>10以上20未満の場合は<br>------<br>num is 10 - 19<br>------<br>20以上の場合は<br>------<br>num is over 20<br>------<br>を表示してください<br><br>※最後に改行は入らない<br>※else if を使用すること<br><br>====プログラム====<br>public class JSSST0401{<br>    public static void main(String[] args){<br>        int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-17 11:56:27',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-03]分岐条件３','以下のプログラムを実行すると変数 num1、num2 に数字が代入されます。<br><br>num1とnum2の値によってコンソールに表示する文字を変えてください<br><br>num1、num2が共に0の場合<br>------<br>num1 and num2 is Zero!<br>------<br><br>num1、num2のどちらかが１の場合<br>-------<br>num1 or num2 is 1!<br>-------<br><br>num1 より num2のほうが大きい場合<br>------<br>num2 is bigger than num1!<br>------<br><br>num1がnum2以上で　さらにnum1の値が10以上の場合<br>-----<br>num1 is bigger than num2 and 10 over!<br>-----<br><br>そのほかの場合<br>----<br>OH NO!<br>----<br><br>====プログラム====<br>public class JSSST0403{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-18 01:42:02',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-04]分岐条件４','以下のプログラムを実行すると変数 num1、num2 に数字が代入されます。<br><br>num1とnum2の値によってコンソールに表示する文字を変えてください<br><br>num1が0で且つ、num2が0でないとき<br>-----------<br>num1 is 0! num2 is not 0!<br>-----------<br>num1が10以上20以下で、かつnum2が1でないとき<br>-----------<br>num1 is 10-20! num2 is not 1!<br>-----------<br>そのほかの場合<br>-----<br>OH NO!<br>-----<br><br>====プログラム====<br>public class JSSST0404{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-18 01:53:27',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-05]繰り返し文１','for文を使って<br>---<br>I love Java!<br>---<br>を10回表示しなさい。1回ごとに改行を入れること。',1,'2017-08-28 08:13:01','2017-05-18 02:04:33',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-06]繰り返し文２','for文を使って、１から１０００までの総和を計算し表示しなさい。<br>表示は以下のようにしてください<br>-----<br>total is XXX<br>-----<br>XXXは１から１０００までの総和<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2017-05-18 02:10:48',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-07]繰り返し文３','while文を用いて以下のプログラムを完成させよ。<br><br>１から順に数を足して行き、合計が５００を超えたら<br>ループを終了して、最後に足した数を表示する<br>プログラムです「？」を埋めましょう<br>---------------<br>public class KadaiST0407 {<br>    public static void main(String[] args) throws Exception {<br>		<br>		int total = 0;<br>		int num = 1;<br>		while(？){<br>			total = ？;<br>			？;<br>		}<br>		<br>		System.out.print(\"last num is \"+num);<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-18 02:19:03',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-08]配列１','以下の数字を配列に代入し、全て足し算してください<br>12,11,5,11,65,41,21<br><br>表示は以下のようにしてください<br>--------<br>total is XXX<br>--------<br>XXXは合計値<br>最後に改行は含まず<br><br>------<br>public class KadaiST0408 {<br>    public static void main(String[] args) throws Exception {<br>		<br>		？arry = {12,11,5,11,65,41,21};<br>		<br>		int total = ？;<br>		for(int i=0;？;？ ){<br>			？<br>		}<br>		<br>		System.out.print(\"total is \"+total);<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-18 02:30:39',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-09]偶数を探せ！','以下の中からプログラムを使って偶数を探して表示してください！<br>1 98 87 44 43 12 10 9 65 89 76 34 87 22 16<br><br>表示は、数値と数値の間をスペースで区切って表示せよ<br><br>ヒント：<br>※偶数は、2で割った余りが０<br>※上記の数字を配列にとって、for文で繰り返し処理をしつつ偶数かどうかをチェックして表示する',1,'2017-08-28 08:13:01','2017-05-18 02:37:00',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-10]何回目で超える？','以下の数字が配列で与えられるとします。<br>45 1 89 41 7 52 12 18 8 35 41 21 8 55 47 41 22 23 56 98<br><br>要素の最初から順に足していったとき<br>配列の何番目で合計が300を超えるでしょうか？<br><br>以下のようにして表示してください<br>----<br>over 300 : XXX<br>----<br>XXXは300を超えたときの配列の番号<br>最後に改行は入らない<br><br>ヒント：<br>while文を使う（[JSS-ST04-07]を参考にする）<br><br>「何番目」と聞かれているので、arry[0] は「1番目」となる<br>つまりたとえば　arry[4]の時に300を超えたのであれば5番目と<br>答える必要がある。<br><br>',1,'2017-08-28 08:13:01','2017-05-18 02:53:27',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-11]フローチャートをプログラムに！','以下のサイトにあるフローチャートをjavaのプログラムにして下さい<br>https://www.sunnyglad.net/flow/flow1.png<br><br>このフローチャートは N × Mを加算で行うフローチャートです。<br><br>「SUM出力」に関しては以下のように表示してください<br>---<br>SUM is XXX<br>---<br>・XXXはSUMの値<br>・最後に改行は含まない<br><br>「N、Mの入力」に関しては、以下のプロラムを実行するとNとMに<br>値が入ります<br>====プログラム====<br>public class JSSST0411{<br>    public static void main(String[] args){<br>        int N = Integer.parseInt(args[0]);<br>        int M = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}<br><br>ヒント：<br>フローチャートのループ部分にある「K > M」は<br>「ループを抜ける条件」ですがjavaの<br>whileやfor文で指定するのは「ループを続ける条件」で<br>あることに注意<br>例）<br>while( k < 3 ) →kが3より小さい間ループする<br>for( int i = 0; i < 3; i++ )→i が3より小さい間ループする<br>教科書P.76、81',1,'2017-08-28 08:13:01','2017-05-18 03:20:16',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-15]野球のスコアボードを表示しよう！','以下のプログラムを実行すると変数 num1、num2、num3、num4 に数字が代入されます。<br><br>野球のスコアボードぽいのを表示しましょう。<br><br>num1、num2に先行チームの得点が3桁で入っています。<br>num3、num4に先行チームの得点が3桁で入っています。<br>num1～num4の3桁の得点は<br>上1桁が得点が入った回、下2桁がその回の得点となっています。<br>例えばnum1が301だったら、3回の表に1点入ったことを表します。<br><br>これらの情報を元に以下のようなスコアボードを表示しましょう<br>例）<br>num1=0101（1回表に1点）<br>num2=0902（9回表に2点）<br>num3=0201（2回裏に1点）<br>num4=0701（7回裏に1点）<br>この場合以下のような表示となる<br>-------------<br>teamA 100 000 002 = 3<br>temaB 010 000 100 = 2<br>--------------<br>※チーム名は固定とする<br><br>num1=0205（2回表に5点）<br>num2=0602（6回表に2点）<br>num3=0103（1回裏に3点）<br>num4=0706（7回裏に6点）<br>この場合以下のような表示となる<br>-------------<br>teamA 050 020 000 = 7<br>temaB 300 000 600 = 9<br>--------------<br>※この場合本来9回裏はXだが0のままでよいとする<br>※チーム名は固定とする<br><br>====プログラム====<br>public class JSSST04XX{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0],1,0);<br>        int num2 = Integer.parseInt(args[1]);<br>        int num3 = Integer.parseInt(args[2]);<br>        int num4 = Integer.parseInt(args[3]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-19 02:10:56',2,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-12]今日のメニューは？','以下のプログラムを実行すると変数 num1 に数字が代入されます。<br><br>あるレストランのお昼のメニューを表示するプログラムです。<br>そのレストランは、曜日によってお昼の料理が決まっています。<br><br>num1に曜日を表す数値が入ってくるので、その曜日の料理名を<br>コンソールに表示してください。<br><br>曜日と料理名は以下の通り<br>月曜日：beef bowl<br>火曜日：okonomiyaki<br>水曜日：curry<br>木曜日：croquette<br>金曜日：steak<br>土曜日：pork cutlet<br>日曜日：hamburger<br><br>曜日を表す数値は以下の通りです<br>月曜日：0<br>火曜日：1<br>水曜日：2<br>木曜日：3<br>金曜日：4<br>土曜日：5<br>日曜日：6<br><br>なお、マイナスの値や7以上の値が入力された場合は<br>コンソールに「OH NO!」を表示してください。<br><br>表示例）<br>num1が0の場合のコンソール表示<br>-----<br>beef bowl<br>----<br>※最後に改行を含まない<br><br>num1が7の場合のコンソール表示<br>----<br>OH NO!<br>----<br>※最後に改行を含まない<br><br>====プログラム====<br>public class JSSST0412{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>    }<br>}<br><br>ヒント：switch文を使うとスッキリ書ける<br>教科書P.66',1,'2017-08-28 08:13:01','2017-05-19 01:27:10',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-14]マップを作ろう','以下のプログラムを実行すると変数 num1、num2 に数字が代入されます。<br><br>8×16のマップを表示しましょう！<br><br>以下のような配列があります<br>int[][] maps = {<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},<br>    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}<br>}<br><br>配列の0は岩を表し、1は道を表しています。<br><br>num1、num2に道がどこにあるかを表しています。<br>それぞれ3桁の数値が入ります<br>num1 ：道の開始位置（上位1桁と下位2桁で、配列の位置を表す）<br>num2 ：道の終了位置（上位1桁と下位2桁で、配列の位置を表す）<br><br>コンソールに表示する時は<br>岩を< 道を# と表示して、マップを表示してください<br><br>例）<br>num1に001 num2に010 の場合<br>配列の map[0][1] ～ map[0][10]が道となり<br>マップは以下のようになる<br>-----<br><##########<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br>-----<br><br><br>num1に301 num2に415 の場合<br>配列の map[3][1] ～ map[4][15]が道となり<br>マップは以下のようになる<br>-----<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><###############<br><###############<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br><<<<<<<<<<<<<<<<<br>-----<br><br>条件として、num1、num2は必ず<br>000～0815の間の数を取る<br>配列の要素数を超えるような数値は入力されない。<br><br>====プログラム====<br>public class JSSST0413{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-05-19 02:10:24',2,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-13]浮かび上がるのは？','以下のデータを持つ16×10の2次元配列を作成してください<br>{<br>   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},<br>   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},<br>   {1,0,0,4,4,4,0,0,0,4,4,4,0,0,0,1},<br>   {1,0,0,4,0,4,0,0,0,4,0,4,0,0,0,1},<br>   {1,3,0,4,4,4,0,0,0,4,4,4,0,3,0,1},<br>   {1,0,3,0,0,0,2,2,2,0,0,0,3,0,0,1},<br>   {1,3,3,3,0,0,0,2,0,0,0,0,3,3,3,1},<br>   {1,0,0,3,0,3,0,3,0,3,0,0,3,0,0,1},<br>   {1,0,3,0,0,0,3,3,3,0,0,0,0,3,0,1},<br>   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}<br>}<br><br>この配列をコンソールに表示知るのですがその際<br>0の値は半角スペース<br>1の値は+（半角プラス）<br>2の値はo（半角英字のオー）<br>3の値は=（半角イコール）<br>4の値は#（半角シャープ）<br>を表示してください。<br><br>何かが浮かび上がるはず・・・',1,'2017-08-28 08:13:01','2017-05-19 02:07:16',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-16]何回出た？','以下のプログラムを実行すると変数 num に数字が代入されます。<br>数値の中に０～９の数値が何個含まれているかを数えましょう！<br>結果はコンソールに「対象の数値：回数」の形式で表示しましょう<br><br>例）mainメソッドに1223389が渡された場合<br>コンソールに<br>-----<br>0:0<br>1:1<br>2:2<br>3:2<br>4:0<br>5:0<br>6:0<br>7:0<br>8:1<br>9:1<br>-----<br>と表示します（最後に改行入っています）<br><br>====プログラム====<br>public class JSSST0416{<br>    public static void main(String[] args){<br>        int num = Integer.parseInt(args[0]);<br>            // ココから下に続きを書いてください<br>    }<br>}<br><br>ヒント：10個の要素を持つ配列を作成し０で初期化する。<br>　　　　この配列にかく数字が何回出現したかをカウントしていく。<br>　　　　1桁ずつ確認（10で割った余りで1の位が出る！）していき、配列の該当箇所をカウントアップする',1,'2017-08-28 08:13:01','2017-06-19 04:17:50',2,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-17]シャッフル！','以下のプログラムを実行すると変数 num1、num2に数字が代入されます。<br>以下のような配列があるとき、mainメソッドで受け取った引数をもとにシャッフル（入れ替える）プログラムを<br>考えます。<br><br>・シャッフル前の配列<br>int[] arry = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};<br><br>・mainの引数<br>　num1、num2で入れ替えたい配列の要素番号がはいる<br><br>例）<br>mainの引数が、num1が10、num2が3の場合<br>配列の10番目と3番目を入れ替えて、コンソールには<br>-----------------<br>1,2,10,4,5,6,7,8,9,3,11,12,13,14,15,<br>-----------------<br>と表示する（最後に改行なし）<br><br>====プログラム====<br>public class JSSST0417{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>            // ココから下に続きを書いてください<br>    }<br>}',1,'2017-08-28 08:13:01','2017-06-19 04:01:29',1,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST04-18]３目並べ','下のプログラムを実行すると変数 num1、num2、num3、num4,num5 に数字が代入されます。<br>姫野先生と西野先生が三目並べで対決することになりました。<br>三目並べのルールが分からない人は↓<br>https://ja.wikipedia.org/wiki/%E4%B8%89%E7%9B%AE%E4%B8%A6%E3%81%B9<br><br>mainの引数にどこに打ったかが2桁の数字で渡されますので、最終的な盤の様子を表示してください。<br>なお、姫野先生のコマは「O」（大文字のオー）、西野先生のコマは「X」（大文字のエックス）として表示してください。<br>先行は姫野先生とし、引数は必ず5つ渡されるとします。<br><br>例）<br>num1：22→（姫野先生が２、２にコマを打った）<br>num2：11→（西野先生が１、１にコマを打った）<br>num3：21→（姫野先生が２、１にコマを打った）<br>num4：23→（西野先生が２、３にコマを打った）<br>num5：31→（姫野先生が３、１にコマを打った）<br>の場合、以下の表示となります<br>---------------<br>X|  |  <br>-------  <br>O|O|X<br>-------<br>O|  |  <br>---------------<br>※コマが無いマスは半角スペースを表示する<br>※最後に改行が入っている<br><br>mainの引数が<br>num1：33→（姫野先生が３、３にコマを打った）<br>num2：11→（西野先生が１、１にコマを打った）<br>num3：21→（姫野先生が２、１にコマを打った）<br>num4：23→（西野先生が２、３にコマを打った）<br>num5：31→（姫野先生が３、１にコマを打った）<br>の場合、以下の表示となります<br>---------------<br>X|  |  <br>-------  <br>O|  |X<br>-------<br>O|  |O<br>---------------<br><br><br>====プログラム====<br>public class JSSST0418{<br>    public static void main(String[] args){<br>        int num1 = Integer.parseInt(args[0]);<br>        int num2 = Integer.parseInt(args[1]);<br>        int num3 = Integer.parseInt(args[2]);<br>        int num4 = Integer.parseInt(args[3]);<br>        int num5 = Integer.parseInt(args[4]);<br>            // ココから下に続きを書いてください<br>    }<br>}<br><br>ヒント：<br>以下の手順で処理すればよい<br>１．盤を3×3の文字列型2次元配列として、全て半角スペースを入れて初期化する<br>２．姫野先生の手を読み取り、盤の該当箇所を\"o\"で更新する<br>３．西野先生の手を読み取り、盤の該当箇所を\"X\"で更新する<br>４．盤を表示する',1,'2017-08-28 08:13:01','2017-06-19 04:13:51',2,1,16,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-01]メソッド１','以下のプログラムの？を埋めてコンソールに<br>--------------<br>methodA<br>methodB<br>--------------<br>と表示されるようにしてください。<br><br>=======<br>public class KadaiST0501{<br>	public static void main(String[] args){<br>		？<br>　　　　　　　？<br>	}<br>	public static void methodA(){<br>		System.out.println(\"methodA\");<br>	}<br>	public static void methodB(){<br>		System.out.println(\"methodB\");<br>	}<br>}<br>======',1,'2017-08-28 08:13:01','2017-06-02 11:23:12',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-02]メソッド２','2つの整数を受け取り足し算するメソッドを作成します。<br>？の埋めてプログラムを完成させてください<br>-------<br>public class KadaiST0502{<br>	public static void main(String[] args){<br>		plus(10,30);<br>	}<br>	？ ？ ？ plus(？ , ？){<br>		int total = ？;<br>		System.out.println(total);<br>	}<br><br>}<br>------',1,'2017-08-28 08:13:01','2017-06-02 10:31:07',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-03]メソッド３','以下のプログラムの？を埋めて、コンソールに以下のように表示する<br>プログラムを作成せよ<br>----------------<br>call prev A<br>methodA<br>call prev B<br>methodB<br>call prev C<br>methodC<br>call after C<br>call after B<br>call after A<br>----------------<br>public class KadaiST0503{<br>	public static void main(String[] args){<br>		System.out.println(\"call prev A\");<br>		？<br>		System.out.println(\"call after A\");<br>	}<br>	public static void methodA(){<br>		System.out.println(\"methodA\");<br>		System.out.println(\"call prev B\");<br>		？<br>		System.out.println(\"call after B\");<br>	}<br><br>	public static void methodB(){<br>		System.out.println(\"methodB\");<br>		System.out.println(\"call prev C\");<br>		？<br>		System.out.println(\"call after C\");<br>	}<br>	public static void methodC(){<br>		System.out.println(\"methodC\");<br>	}<br>}',1,'2017-08-28 08:13:01','2017-06-02 10:42:23',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-04]メソッド４','以下の2つのメソッド<br>---<br>ASOJUKU!と表示する dispAsojukuメソッド<br>HELLO と表示する dispHelloメソッド<br>---<br>を作成し、コンソールに<br>---<br>HELLO ASOJUKU!<br>---<br>と表示せよ<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2017-06-02 10:56:45',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-05]メソッド５','以下の？を埋めて、mainメソッドの引数をスペース区切りで全て表示するプログラムを作成せよ<br><br>public class KadaiST0505{<br>	public static void main(String[] args){<br>		<br>		for( int i = 0; ？; i++ ){<br>			System.out.print( ？);<br>		}<br>	}<br>}<br>------<br>例）引数に aaaa、bbbb、ccccの3つが渡された場合、コンソールに<br>---<br>aaaa bbbb cccc<br>---<br>と表示する（最後に改行は入れない）',1,'2017-08-28 08:13:01','2017-06-02 11:34:28',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-06]メソッド６','mainメソッドで受け取った引数の値が、偶数の場合はmethodAを、奇数の場合はmethodB<br>を呼び出すプログラムを作成せよ<br>なお、methodAとmethodBは以下のメソッドとする<br>----<br>public static void methodA(){<br>    System.out.println(\"methodA\");<br>}<br><br>public static void methodB(){<br>    System.out.println(\"methodB\");<br>}<br>----<br><br>ヒント：引数で受け取った値が奇数か偶数かはの課題[JSS-JK04-06]が参考になります。',1,'2017-08-28 08:13:01','2017-06-02 11:44:59',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-07]メソッドに分割しよう！','mainの引数に３つの数値が渡されます。<br>第1引数の値によって処理が分かれます。<br>第1引数が０の場合、　第2引数と第3引数の足し算を表示する<br>第1引数が１の場合、　第2引数と第3引数の掛け算を表示する<br>第1引数が２の場合、　第2引数と第3引数の剰余を表示する<br>第1引数が３の場合、　第2引数と第3引数の引き算を表示する<br><br>このプログラムは以下のようになります。<br>----<br>public class KadaiST0507{<br>	public static void main(String[] args){<br>		<br>		int num1 = Integer.parseInt(args[0]);<br>		int num2 = Integer.parseInt(args[1]);<br>		int num3 = Integer.parseInt(args[2]);<br>		<br>		int result = 0;<br>		<br>		switch( num1 ){<br>			case 0:<br>				result = num2 + num3;<br>				System.out.print( result );<br>				break;<br>			case 1:<br>				result = num2 * num3;<br>				System.out.print( result );<br>				break;<br>			case 2:<br>				result = num2 % num3;<br>				System.out.print( result );<br>				break;<br>			case 3:<br>				result = num2 - num3;<br>				System.out.print( result );<br>				break;<br>		}<br>		<br>	}<br><br>}<br>----<br>このプログラムの、足し算結果の表示、掛け算結果の表示、剰余結果の表示、引き算結果の表示<br>部分をメソッドに分割して、プログラムを作り直しなさい。',1,'2017-08-28 08:13:01','2017-06-02 12:00:05',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-08]100点を目指せ！','以下のプログラムは、A-Z Cafeで採点すると100点になりません。<br>100点が取れるように改造してください。<br>-------------<br>public class KadaiST0508{<br>	public static void main(String[] args){<br>		<br>		int num1 = 1;<br>		int num2 = 2;<br>		<br>		if( num1 == 1 && num2 == 2 ){<br>			System.out.println(\"num1 == 1 && num2 == 2\");<br>		}<br>		<br>		int num3 = 10;<br>		<br>		if( num1 == 1 && num3 == 10 ){<br>			System.out.println(\"num1 == 1 && num3 == 10\");<br>		}		<br>		<br>		int num4 = 5;<br>		<br>		if( num1 == 1 && num3 == 10 && num4 == 5){<br>			System.out.println(\"num1 == 1 && num3 == 10 && num4 == 5\");<br>		}<br>		<br>		int num5 = 2;<br>		<br>		if( num1 == 1 && num5 == 2){<br>			System.out.println(\"num1 == 1 && num5 = 2\");<br>		}<br>	}<br>}<br>-------------<br>ヒント：<br>1メソッド中のif文の数を減らせば、複雑度が下がって点数は上がります。<br>つまり、上記のif文（分岐）の部分をメソッドに分割してあげればよい<br>※100点にならない理由はプログラムの複雑度が高い為。<br>　複雑度はメソッド中の分岐の数などによって決まる。',1,'2017-08-28 08:13:01','2017-06-05 02:26:44',1,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-09]引数を全て足せ！','mainメソッドに数値が渡されます。渡された数値を全て足してください！<br>mainメソッドに渡される引数の数は０～５個です。<br>引数が0個の時は「Nothing!」を表示してください。<br><br>例）渡された引数が1 2 3の3つだった場合、コンソールに<br>---<br>6<br>---<br>を表示（最後に改行なし）<br><br>渡された引数が 10 だけだった時、コンソールに<br>---<br>10<br>---<br>を表示（最後に改行なし）<br><br>渡された引数が無い場合、コンソールに<br>---<br>Nothing!<br>---<br>を表示（最後に改行なし）<br><br>ヒント：<br>・引数はString（文字列）なので、それを数値に変換するのは教科書P.115を参考（Integer.parseIntを使う）<br>・渡ってきた引数の個数は、mainメソッドの引数である配列（args）の個数を見ればよい。<br>　配列の個数の見方は教科書P.114<br>・mainに渡ってきた引数の個数分ループして、引数の値を足していけばよい。',1,'2017-08-28 08:13:01','2017-06-05 02:46:08',2,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-11]ある日のヤフオクドームでのチケット売り上げ金額','ヤフオクドームでの野球のチケット料金は以下の通りです<br>外野席：1000円<br>内野自由：1800円<br>A席指定：3000円<br>B席指定：2000円<br>S席指定：4000円<br><br>mainの引数に座席の種類とチケットが売れた枚数が渡されますので<br>全てを合計したチケットの総売り上げ金額を表示してください。<br><br>引数は以下のように渡されます。<br>・上位1桁が座席の種類を現します。<br>　外野席：1<br>　内野自由：2<br>　A席指定：3<br>　B席指定：4<br>　S席指定：5<br>・下4桁でチケットの枚数を表します。<br>なお、引数は何個渡されるか分かりません（最低１個、最高５個）<br><br>例えば引数に 10225 と渡されたとすると<br>上位1桁は「1」なので、チケット種が「外野席」<br>下4桁が「0225」なので、チケット枚数が「225」枚<br>つまり、10225は「外野席が225枚」となります。<br><br>例）<br>・引数に 11225 20500 30625 40356 50236 の４つが渡されたとすると<br>チケットの枚数はそれぞれ<br>　外野席(1)：1225枚<br>　内野自由(2)：500枚<br>　A席指定(3)：625枚<br>　B席指定(4)：356枚<br>　S席指定(5)：236枚<br>なので<br>(1000×1225)+(1800×500)+(3000×625)+(2000×356)+(4000×236)=<br>    1225000  +    900000   +   1875000 +    712000  +    944000 = 5656000<br>となり、コンソールには<br>---<br>5656000yen<br>---<br>と表示する。（改行なし）<br><br>・引数に 11225 50236 の２つが渡されたとすると<br>チケットの枚数はそれぞれ<br>　外野席(1)：1225枚<br>　S席指定(5)：236枚<br>なので<br>(1000×1225)+(4000×236)=<br>    1225000  +   944000 = 2169000<br>となり、コンソールには<br>---<br>2169000yen<br>---<br>と表示する。（改行なし）<br><br>',1,'2017-08-28 08:13:01','2017-06-05 04:23:08',2,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST05-10]ポケモンカードゲーム','西野先生は子供とポケモンカードゲームをします。<br>一番強いのは長男です。長男は強いカードを持っており、西野先生は自分のカードが何回攻撃に<br>耐えられるかを知りたくなりました。<br><br>引数に、<br>第１引数：西野先生のポケモンの名前<br>第２引数：西野先生のポケモンの体力<br>第３引数：西野先生の特性<br>第４引数：長男のカードの攻撃力<br>第５引数：長男のカードの特性<br>が渡されるので、西野先生のポケンモンが何回長男のカードから攻撃されたら体力が０になるかを表示しなさい。<br><br>なお、体力は１回毎に「現在の体力 - 攻撃力」で計算し、攻撃側の特性と攻撃を受ける側の特性で<br>攻撃がマイナスになる、もしくは倍になるなどがあります。<br><br>特性は値と意味は以下の通り（実際のものとは違います）<br>０：炎属性<br>１：水属性<br>２：草属性<br><br>特性による相性は以下の通り<br>・炎属性は草属性に対し、攻撃力の２倍のダメージを与える<br>・草属性は水属性に対し、攻撃力の２倍のダメージを与える<br>・水属性は炎属性に対し、攻撃力の２倍のダメージを与える<br>・炎属性が水属性に対し、攻撃する場合はダメージが-20される<br>・草属性が炎属性に対し、攻撃する場合はダメージが-20される<br>・水属性が草属性に対し、攻撃する場合はダメージが-20される<br><br>例）<br>引数が<br>第１引数：Kusakusa<br>第２引数：22<br>第３引数：2（草属性）<br>第４引数：5<br>第５引数：0（炎属性）<br><br>炎属性は草属性に与えるダメージは２倍なので、１回で与えるダメージは5×2=10<br>なので22÷10＝2あまり2となり、体力を0にするには３回攻撃する必要がある。<br>この場合コンソールには<br>---<br>Kusakusa:3<br>---<br>と表示する（改行なし）<br><br>引数が<br>第１引数：koiKing<br>第２引数：18<br>第３引数：1（水属性）<br>第４引数：24<br>第５引数：0（炎属性）<br><br>炎属性は水属性に与えるダメージは-20されるので、１回で与えるダメージは24-20=4<br>なので18÷4＝4あまり2となり、体力を0にするには5回攻撃する必要がある。<br>この場合コンソールには<br>---<br>KoiKing:5<br>---<br>と表示する（改行なし）',1,'2017-08-28 08:13:01','2017-06-05 04:09:02',2,1,17,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-01]戻り値があるメソッド','次のプログラムを完成させてください。<br>以下は、引数で受け取った数値を掛け算して呼び出し元に返し、呼び出し元で結果を表示する<br>プログラムです。<br><br>public class KadaiST0601{<br>	public static void main(String[] args){<br>		？？= multi( 10,20 );<br>		<br>		System.out.println(result);<br>	}<br>	<br>	public static ？ multi(int num1,int num2){<br>		int total = num1 * num2;<br>		<br>		return ？;<br>	}<br>}',1,'2017-08-28 08:13:01','2017-06-07 12:22:56',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-02]戻り値を戻すメソッド２','以下のプログラムを完成させてください。<br>divメソッドは引数を受け取り、第一引数を第二引数で割った結果を返すメソッドです。<br><br>public class KadaiST0602{<br>	public static void main(String[] args){<br>		int result = div( 20,5 );<br>		<br>		System.out.println(result);<br>	}<br>	<br>	？（divメソッドを書く）<br>}',1,'2017-08-28 08:13:01','2017-06-07 12:27:19',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-03]メソッドの呼び出し','？の部分でdisplayメソッドを呼び出して、以下のプログラムを完成させてください<br>---------<br>public class KadaiST0603{<br>	public static void main(String[] args){<br>		<br>		double dnum = 10.5;<br>		int num = 10;<br>		String str = \"test\";<br>		<br>		？（ここでdisplayメソッドを呼び出す）<br>	}<br>	<br>	public static void  display(String moji,int num1,double num2){<br>		<br>		System.out.println(moji+num1+num2);<br>	}<br>}',1,'2017-08-28 08:13:01','2017-06-09 01:59:01',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-04]四角を書こう！','コンソールの表示が<br>--------------------------<br>===square!===<br>******<br>******<br>******<br>******<br>******<br>******<br>******<br>******<br>--------------------------<br>となるように、以下のプログラムの？を埋めて完成させてください<br>====<br>public class KadaiST0604{<br>	public static void main(String[] args){<br>		<br>		int num1 = ？;<br>		int num2 = ？;<br>		String str =？;<br>		<br>		display(？);<br>	}<br>	<br>	public static void  display(String str,int num1,int num2){<br>		<br>		System.out.println(\"===\"+str+\"===\");<br>		for(int i = 0; i < num1; i++ ){<br>			for( int j = 0; j < num2; j++ ){<br>				System.out.print(\"*\");<br>			}<br>			System.out.print(\"\<br>\");<br>		}<br>	}<br>}<br>=====',1,'2017-08-28 08:13:01','2017-06-09 02:08:36',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-05]偶数ですか？メソッド','偶数かどうかを判定するメソッド（名前はisEven）を自分で作成し、<br>そのメソッドをmainメソッドから呼び出して、<br>偶数の時はコンソールに<br>----<br>Even<br>----<br>奇数の時はコンソールに<br>----<br>Odd<br>----<br>と表示するプログラムを作る。<br><br>？を埋めて、プログラムを完成させよ！<br>============<br>public class KadaiST0605{<br>	public static void main(String[] args){<br>		<br>		int num = Integer.parseInt(args[0]);<br>		<br>		boolean result = isEven(num);<br>		<br>		if( ？ ){<br>			System.out.print(\"Even\");<br>		}else{<br>			System.out.print(\"Odd\");<br>		}<br>	}<br>	<br>	？（isEvenメソッドをここに書く）<br>}<br>============<br>ヒント：<br>isEventメソッドは、引数に数値を受け取り、偶数かどうかを判定し<br>偶数の場合はtrueを奇数の場合はfalseを返すメソッドとする。',1,'2017-08-28 08:13:01','2017-06-09 02:20:33',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-06]mainメソッドの引数','mainメソッドに引数が１～５個渡されます。渡された値は必ず数値です。<br>渡された値を全て足した数を表示してください。<br><br>表示をする際は、足した合計値のみを表示し、最後に改行は入れないものとする<br><br>ヒント：<br>文字列→数値の変換は Integer.parseInt を使う（教科書P.115）<br>mainメソッドの引数は配列なので、for文を使うとスッキリ書ける。',1,'2017-08-28 08:13:01','2017-06-09 09:27:25',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-07]メソッドをどう呼び出す？','コンソールに<br>----------------------<br>main -start-<br>methodB -start-<br>methodA -start-<br>methodC -start-<br>methodC -end-<br>methodA -end-<br>methodB -end-<br>main -end-<br>----------------------<br>と表示するように↓のプログラムを完成させてください<br>？？？にはメソッドを呼び出すコードが入りますが、何も入らない場合もあります。<br>==============<br>public class KadaiST0607{<br>	public static void main(String[] args){<br>		<br>		System.out.println(\"main -start-\");<br>                ？？？<br>		System.out.println(\"main -end-\");<br>	}<br>	<br>	public static void methodA(){<br>		System.out.println(\"methodA -start-\");<br>                ？？？<br>		System.out.println(\"methodA -end-\");<br>	}<br>	<br>	public static void methodB(){<br>		System.out.println(\"methodB -start-\");<br>                ？？？<br>		System.out.println(\"methodB -end-\");<br>	}<br>	<br>	public static void methodC(){<br>		System.out.println(\"methodC -start-\");<br>                ？？？<br>		System.out.println(\"methodC -end-\");<br>	}<br>}<br>===========<br>',1,'2017-08-28 08:13:01','2017-06-09 09:41:44',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-08]ある新人のコードを書き直そう！','とある会社で婦路具ラムさん（２０歳）女子が<br>「配列の中にある数値の1の位が奇数になるのが何個あるかを表示するプログラム」を<br>以下のように書きました。<br>せっかく「is1KetaOdd」メソッドがあるの使っていません・・・。<br>このプログラムを「is1KetaOdd」を使って書き直してみましょう<br>※余裕がある人はついでに、for文を使って書き直してみよう！<br>※is1KetaOddメソッドのprintlnは消さないように。<br>=============<br>public class KadaiST0608{<br>	public static void main(String[] args){<br>		<br>		int count = 0;<br>		int[] arry1 = {125,68,16,5,166785};<br>		<br>		int num = arry1[0];<br>		num = num % 10;<br>		if( (num%2) == 1 ){<br>			count++;<br>		}<br>		<br>		num = arry1[1];<br>		num = num % 10;<br>		if( (num%2) == 1 ){<br>			count++;<br>		}<br>		<br>		num = arry1[2];<br>		num = num % 10;<br>		if( (num%2) == 1 ){<br>			count++;<br>		}<br>		<br>		num = arry1[3];<br>		num = num % 10;<br>		if( (num%2) == 1 ){<br>			count++;<br>		}<br>		<br>		num = arry1[4];<br>		num = num % 10;<br>		if( (num%2) == 1 ){<br>			count++;<br>		}<br>		<br>		System.out.print( count );<br>	}<br>	<br>	public static boolean is1KetaOdd(int num){<br>		System.out.println(\"called is1KetaOdd:\"+num);<br>		boolean result = true;<br>		<br>		int keta1 = num % 10;<br>		if( (keta1%2) == 1 ){<br>			result = true;<br>		}else{<br>			result = false;<br>		}<br>		<br>		return result;<br>	}<br>}<br>=============',1,'2017-08-28 08:13:01','2017-06-10 04:11:09',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-09]何ターンで倒せるのか？','相変わらずポケモンカードゲームで、なかなか長男に勝てない<br>西野先生は、体力がどれくらいあれば何ターン持つのかを調べることにしました。<br><br>mainの引数に攻撃力と体力が渡されるので、何回攻撃に耐えうるか表示してください。<br><br>そのとき、1ターン毎に、後述するdispメソッドを呼び出し途中経過を表示し<br>最終的に何ターンで耐えされるかを表示してください。<br>なお、mainの引数には第1引数に「攻撃力」第2引数に「体力」が渡されます。<br><br>1ターンでは攻撃が1回行われ、「体力ー攻撃力」が計算されます。<br>体力が０以下になると倒れます。<br><br>例）<br>第1引数：12<br>第2引数：100<br>の場合、攻撃力が１２、体力が１００なのでコンソールには<br>--------<br>turn:1 now stamina is 88<br>turn:2 now stamina is 76<br>turn:3 now stamina is 64<br>turn:4 now stamina is 52<br>turn:5 now stamina is 40<br>turn:6 now stamina is 28<br>turn:7 now stamina is 16<br>turn:8 now stamina is 4<br>turn:9 now stamina is -8<br>turn:9<br>--------<br>と表示されます。<br>※最後に改行はない<br>※無限ループせんごと、しっかり確認してね！<br><br>プログラムでは以下の途中経過を表示するdispメソッドを使いましょう。<br>======<br>public static void disp(int stamina,int turn){<br>	System.out.println(\"turn:\"+turn+\" now stamina is \"+stamina);	<br>}<br>======<br><br>ヒント：<br>・体力が0になるまで、体力を減らし続ける。<br>・体力が0になるまでに何回ループしたかを数える為に、変数を一つ作り<br>　その変数はループするたびに1増やすようにする。<br>・ループ内で途中経過を表示するdispメソッドを使って、途中経過「turn:XX now stamina is YY」を表示する',1,'2017-08-28 08:13:01','2017-06-09 10:52:42',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-10]フルーチェ大好き','西野先生はフルーチェが大好きです。特にイチゴ味が好きです。<br>mainの第1引数で、フルーチェの味を表す文字列がカンマ区切りで渡されます。<br>その中に何個イチゴがあるかを数えてください。<br><br>イチゴが3個以上あれば、コンソールに<br>---<br>manzoku!<br>---<br>を3個より少なければ<br>---<br>Booooo!<br>---<br>を表示してください（最後に改行はしない）<br><br>なお、カンマ区切りの文字列の中に何個、イチゴがあるかは以下のgetIchigoNumメソッドを<br>使えば分かります。<br>【getIchigoNumメソッドの仕様】<br>　引数：カンマで区切られた文字列<br>　戻り値：文字列の中に何個イチゴがあるかを返す<br>　ロジックは以下の通り。コピペしてつかってください。<br>======<br>public static int getIchigoNum(String str){<br>	int num = 0;<br>	String[] fruitsArry = str.split(\",\");<br>	for( int i = 0; i < fruitsArry.length; i++ ){<br>		if( fruitsArry[i].equals(\"ichigo\") == true ){<br>			num++;<br>		}<br>	}<br>		<br>	return num;<br>}<br>======<br><br>例）<br>第1引数：\"orage,ichigo,ichigo,meron,ichigo,orage\"<br>の場合、カンマで区切られた文字列の中に「ichigo」が3つあるので<br>コンソールには<br>---<br>manzoku!<br>---<br>を表示します。<br><br>第1引数：\"orage,ichigo,meron,meron,meron,orage\"<br>の場合、カンマで区切られた文字列の中に「ichigo」が１つあるので<br>コンソールには<br>---<br>Booooo!<br>---<br>を表示します。<br><br>ヒント：<br>第1引数のカンマで区切られたも列の中にichigoが何個あるかは、getIchigoNumメソッドを使って取得します！<br>getIchigoNumの仕様を良く見て、どの引数を渡せばよいか、戻り値をどう使えば良いかを考えてください！',1,'2017-08-28 08:13:01','2017-06-09 11:37:28',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST06-11]シャッフルしよう','要素数13個の配列に１～１３の値が入っています。<br> int[] arry = { 1,2,3,4,5,6,7,8,9,10,11,12,13 };<br>このarryに入っている数値をシャッフルして表示をしようと思います。<br><br>コンソールの表示は以下のようにしたいと思います。<br>後述する３つのメソッドを利用して、コンソールに同じように表示してください。<br>----------<br>arry=1,2,3,4,5,6,7,8,9,10,11,12,13<br>--shuffle start---<br>arry=1,11,10,3,12,8,7,13,9,2,6,4,5<br>----------<br><br>使用するメソッドは以下のdisplayArry、displayMessage、doShuffleの３つです。<br>--------------------------------------------------------<br>メソッド名：displayArry<br>引数：intの配列<br>戻り値：なし<br>概要：引数で受け取った配列をコンソールに表示する<br>ソース（コピペして貼り付けてください）<br>====<br>	public static void displayArry(int[] arry){<br>		<br>		System.out.print(\"arry=\");<br>		for( int i = 0; i<arry.length; i++ ){<br>			if( i > 0 ){<br>				System.out.print(\",\");<br>			}<br>			System.out.print(arry[i]);<br>		}<br>		System.out.print(\"\<br>\");<br>	}<br>====<br><br>--------------------------------------------------------<br>メソッド名：displayMessage<br>引数：なし<br>戻り値：なし<br>概要：シャッフル開始時のメッセージを表示する<br>ソース（コピペして貼り付けてください）<br>====<br>	public static void displayMessage(){<br>		System.out.println(\"--shuffle start---\");<br>	}<br>====<br><br>--------------------------------------------------------<br>メソッド名：doShuffle<br>引数：intの配列<br>戻り値：シャッフル後のint配列<br>概要：引数で受け取った配列をシャッフルし、戻り値で戻す<br>ソース（コピペして貼り付けてください）<br>====<br>	public static int[] doShuffle(int[] arry){<br>		int[] shuffleIndexs1 = {1,4,11,7,3,9,4,7,2,1,5,10,12,3,7};<br>		int[] shuffleIndexs2 = {7,2,11,4,9,4,11,7,3,12,3,7,5,10,1};<br>		<br>		for( int i = 0; i < shuffleIndexs1.length; i++ ){<br>			int shuffleIndex = shuffleIndexs1[i];<br>			int targetIndex = shuffleIndexs2[i];<br>			int work = arry[targetIndex];<br>			arry[targetIndex] = arry[shuffleIndex];<br>			arry[shuffleIndex] = work;<br>		}<br>		<br>		return arry;<br>	}<br>====<br>--------------------------------------------------------<br>ヒント：<br>・3つのメソッドは、全てmainメソッドから呼び出します。<br>・displayArryは2回、displayMessageとdoShuffleは1回だけ呼び出します。<br>・処理の順序は<br>　１）シャッフル前の配列表示<br>　２）シャッフル開始メッセージ<br>　３）シャッフル処理<br>　４）シャッフル後の配列表示<br>　です。それぞれの処理でどのメソッドを呼べば良いかを考えてください。',1,'2017-08-28 08:13:01','2017-06-10 04:06:41',1,1,18,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-01]真空チューブ列車','真空チューブ列車というものをご存知でしょうか？<br>昭和４０年ごろに実際に研究されていた、列車で、理論上 東京－大阪間をわずか１４分で<br>移動できるという列車です。<br><br>さて、東京ー大阪間の距離が557kmだとすると、この乗り物は時速何Kmで移動できるでしょうか？<br>プログラムで計算して以下のフォーマットで表示してください<br>---------<br>Speed is XXX km/h<br>---------<br>XXXは計算結果のスピード<br><br>※時速の計算は（557÷14）*60で計算できます。<br>※結果は小数点を含んだ形で表示してください（四捨五入などの処理は不要）<br>※最後に改行は入らない',1,'2017-08-28 08:13:01','2017-06-19 10:37:48',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-02]さいころの出目の確率','さいころで１が出る確率は、1/6ではないということをご存知でしょうか？<br><br>実はサイコロは各面に穴が掘られている分、重心が真ん中ではなく、<br>出目の確率が均等にならないのだそうです。<br><br>昔あったある番組でサイコロを１万個一気に投げて出目を調べたことがありました。<br>このときの出目の数が以下です。<br><br>１：1783個<br>２：1592個<br>３：1633個<br>４：1677個<br>５：1698個<br>６：1617個<br><br>この時のそれぞれの出目の確率を計算して以下のように表示してください。<br>-------------<br>1:XXX%<br>2:XXX%<br>3:XXX%<br>4:XXX%<br>5:XXX%<br>6:XXX%<br>-------------<br>※XXXは計算結果の確率<br>※最後に改行を含む',1,'2017-08-28 08:13:01','2017-06-19 11:16:29',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-03]２乗した数字は？','1252,1613,1723,1853,1901のうち２乗したら 3433609 になるのはどれか？<br>プログラムを使って確認しようとおもいます。<br>プログラム中の？を埋めてプログラムを完成させましょう<br><br>----------------------<br>public class KadaiST0703{<br>	public static void main(String[] args){<br>		<br>		？ nums = {1252,1613,1723,1853,1901};<br>		int answer = -1;<br>		<br>		for( ？;？; ？ ){<br>			int num = nums[i] * nums[i];<br>			if( ？ ){<br>				answer = nums[i];<br>				？<br>			}<br>		}<br>		System.out.print(\"answer is \"+answer);<br>	}<br>}<br>---------------------------<br>※処理の流れ<br>まず、数字を配列に入れて初期化し、for文をつかって<br>各数値の２乗が3433609 と等しいかどうかを確認します。<br><br>もし、3433609 と等しい数が見つかったら、answerに値を代入します。<br>その後、それ以上、調べる必要が無いので途中であってもループを中断しぬけます（ヒント教科書P.83-84）',1,'2017-08-28 08:13:01','2017-06-19 11:40:18',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-04]西野記念館の入園料','偉大な西野先生を奉っている、西野記念館がありました。<br>そこの入園料は以下の通りです。<br>---------<br>子供（０歳～１２歳）：５００円<br>大人（１３歳以上）：２５００円<br>老人（７０歳以上）：５０００円<br>---------<br>mainの引数で年齢が渡ってきますので、入園料をコンソールに表示してください。<br><br>例）<br>第１引数：10 の場合年齢が１０歳なので子供料金となり<br>コンソールには<br>----------<br>fee is 500yen<br>----------<br>と表示する（改行なし）<br><br>第１引数：１３ の場合年齢が１３歳なので大人料金となり<br>コンソールには<br>----------<br>fee is 2500yen<br>----------<br>と表示する（改行なし）',1,'2017-08-28 08:13:01','2017-06-19 11:53:19',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-05]メソッドの呼び出し','getPowは引数でも貰った、x y について、x のy乗を返すメソッドです。<br>このgetPowをつかって、5の１０乗を計算して、表示するプログラムを作ります。<br><br>↓のプログラムの？を埋めてプログラムを完成させてください。<br>---------------------------<br>public class KadaiST0705{<br>	public static void main(String[] args){<br>		<br>		？<br>		<br>		System.out.print(\"result is \"+result);<br>	}<br>	<br>	public static int getPow(int x,int y){<br>		int result = 1;<br>		<br>		for( int i = 0; i < y;i++){<br>			result = result*x;<br>		}<br>		<br>		return result;<br>	}<br><br>}<br>-------------------------',1,'2017-08-28 08:13:01','2017-06-19 12:13:39',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-06]オーバーロードメソッドの呼び出し','貰った引数から最大値を求めて返すmaxメソッドがあります。<br>このmaxメソッドを利用して10,5,18の中から最大値を求めて表示するプログラムを<br>作ります。　↓の？を埋めてプログラムを完成させましょう！<br><br>---------<br>public class KadaiST0706{<br>	public static void main(String[] args){<br>		<br>		？<br>		System.out.print(\"maxNum is \"+maxNum);<br>	}<br>	<br>	public static int max(int num1,int num2){<br>		int maxNum = 0;<br>		<br>		if( num1 >= num2 ){<br>			maxNum = num1;<br>		}else{<br>			maxNum = num2;<br>		}<br>		<br>		return maxNum;<br>	}<br><br>	<br>	public static int max(int num1,int num2,int num3){<br>		int maxNum = 0;<br>		int[] arry = {num1,num2,num3};<br>		<br>		for(int i = 0; i < arry.length; i++ ){<br>			if( arry[i] >= maxNum ){<br>				maxNum = arry[i];<br>			}<br>		}<br>		<br>		return maxNum;<br>	}<br>}<br>----------',1,'2017-08-28 08:13:01','2017-06-26 01:13:57',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-07]一番身長が高いのは誰だ？','あるクラスの身長と体重のデータは以下の通りです。<br>---------<br>名前		身長<br>Velten 	168cm<br>Divina 	171cm<br>Grisela 	158cm<br>Mariya 	175cm<br>Lazarus 	186cm<br>Ludivine 	191cm<br>Sigismund　158cm<br>Sophia 	187cm<br>Carmela 	192cm<br>Emmanuel 168cm<br>Karin 	175cm<br>Thiago 	184cm<br>Bette 	176cm<br>Charlotta	171cm<br>Dariya 	165cm<br>---------<br><br>この中から、身長が一番大きい人の名前を表示したいと思います。<br>以下のプログラムの？を埋めてプログラムを完成させてください。<br>-----------------<br>public class KadaiST0707{<br>	public static void main(String[] args){<br>		String[] names = {\"Velten\",\"Divina\",\"Grisela\",\"Mariya\",\"Lazarus\",\"Ludivine\",\"Sigismund\",\"Sophia\",\"Carmela\",\"Emmanuel\",\"Karin\",\"Thiago\",\"Bette\",\"Charlotta\",\"Dariya\"};<br>		int[] talls = {168,171,158,175,186,191,158,187,192,168,175,184,176,171,165};<br>		<br>		？<br>		String name = ？<br>		<br>		System.out.print(name+\" is the tallest in this class\");<br>	}<br>	<br>	public static int max(int[] talls){<br>		int maxValue = -1;<br>		int index = -1;<br>		<br>		for( int i = 0; i < talls.length; i++ ){<br>			if( talls[i] > maxValue ){<br>				index = i;<br>				maxValue = talls[i];<br>			}<br>		}<br>		<br>		return index;<br>	}<br><br>}<br>-------------<br>ヒント：maxは受けとった整数型の配列から、最大の値が入っているインデックス（要素番号）を返すメソッド<br>　　　　maxメソッドを使用すればOK！',1,'2017-08-28 08:13:01','2017-06-26 01:47:55',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-10]暗号を解け！','西野先生と姫野先生は、スパイです。メールを送る時は必ず文章を暗号化して送っています。<br>あるとき、西野先生から姫野先生にメールが送られました。<br>あなたは、それを傍受することが出来ましたが、暗号化されていて中身が分かりません。<br>復号して、どういうメールだったかをコンソールに表示してください。<br><br>傍受したメールの内容<br>------<br>nmcxcpc uyrrcmnqy nxckutwn xzqckct qyxtlyoc ntkutmnpc ttqykz<br>------<br><br>復号に当たっては以下のメソッドを使用しましょう。<br>--------------<br>public static String fukugo(String angobun)<br>　→暗号文を復号するプログラム。<br>     引数：angobun　復号したい暗号文を渡す<br>　　戻り値：引数の文字列を復号した結果<br>　　※まだ未完成なので、最後まで完成させる必要あり<br><br>public static String[] makeArry(String message)<br>　→Stringの文字列をStringの配列に変換する<br>     引数：message　文字列<br>　　戻り値：引数の文字列が1文字配列に入った配列<br><br>public static boolean isSame(String str1,String str2)<br>　→引数で与えられた文字列が一致するかどうかを返す<br>     引数：str1　比べる文字列１<br>     引数：str2　比べる文字列２<br>　　戻り値：str1とstr2を比較して一致下かどうかを返す。一致した場合はtrue、一致しない場合はfalseを返す<br><br>public static String makeMessage(String[] strArry)<br>　→Stringの配列をStringの文字列にする<br>     引数：strArry　文字列配列<br>　　戻り値：引数の文字列配列を全て結合して文字列にしたものを返す<br>--------------<br><br>上記メソッドのソースコード（fukugoは未完成）は以下の通りです。<br>※日本語のコメントはA-Z Cafeアップ時には削除すること！<br>※mainメソッドは自分で実装してください。<br>----------------------<br>	public static String fukugo(String hirabun){<br>		String[][] angoParam = <br>		{<br>			{\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"g\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"},<br>			{\"c\",\"o\",\"s\",\"q\",\"y\",\"a\",\"p\",\"u\",\"t\",\"h\",\"x\",\"b\",\"g\",\"m\",\"n\",\"i\",\"f\",\"l\",\"k\",\"r\",\"z\",\"e\",\"w\",\"v\",\"j\",\"d\"}<br>		};<br>		<br>		//一文字ずつチェックする為に配列に変換する<br>		String[] msgs = ？;<br>		<br>		//1文字ずつチェックし、復号していく<br>		for(int i = 0; i < msgs.length; i++ ){<br>			for( int j = 0; j < angoParam[1].length; j++ ){<br>				if( ？){<br>					msgs[i] = angoParam[0][j];<br>					break;<br>				}<br>			}<br>		}<br>		<br>		//復号結果の配列をStringに戻してリターン<br>		return ？;<br>	}<br><br>	public static String[] makeArry(String message){<br>		<br>		return  message.split(\"\");<br>	}<br>	<br>	public static boolean isSame(String str1,String str2){<br>		<br>		return ( str1.equalsIgnoreCase(str2) );<br>	}<br>	<br>	public static String makeMessage(String[] strArry){<br>		StringBuffer sb = new StringBuffer();<br>		<br>		for(int i = 0; i < strArry.length; i++ ){<br>			sb.append(strArry[i]);<br>		}<br>		<br>		return sb.toString();<br>	}<br><br>---------------------',1,'2017-08-28 08:13:01','2017-06-26 05:25:32',2,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-09]西野記念館の入園料２','[JSS-ST07-04]の西野記念館ですが、入場料が高いというクレームが入りました。<br>そこで、運営側は割引日を定めることにしました。<br>-----------<br>【入園料】<br>子供（０歳～１２歳）：５００円<br>大人（１３歳以上）：２５００円<br>老人（７０歳以上）：５０００円<br><br>【割引日】<br>毎週水曜日　レディースデー　女性が半額<br>毎月10日　男の子デー　男の子供は半額<br>毎月5がつく日　残念デー　料金が2倍<br><br>-----------<br><br>mainの引数に、性別、年齢、訪れた月、訪れた日が与えられますので<br>料金をコンソールに以下のように表示してください<br>-----<br>fee is XXXyen<br>-----<br>最後に改行はいらず。XXXは料金。<br><br>mainの引数に渡される情報は以下の通り<br>第１引数：　性別が数値で渡される。　0は男、1は女。<br>第２引数：　年齢が数値で渡される。<br>第３引数：　訪れた月が数値で渡される。<br>第４引数：　訪れた日が数値で渡される。<br><br>例）mainの引数に<br>第１引数：0（＝男）<br>第２引数：10（＝年齢10歳）<br>第３引数：6（＝6月）<br>第４引数：10（＝10日）<br>上記から分かるのは、10歳の男が6月10日に訪れたということです。<br>10日は「男の子供は半額」なので、半額となり料金は250円となります。<br>コンソールには<br>-------------<br>fee is 250yen<br>-------------<br>と表示します。<br><br>なお、月日より、何曜日かを算出するには以下のメソッドを使ってください。（コピペで使ってください）<br>----------------<br>	public static int getDayOfWeek(int month,int day){<br>		Calendar cal = Calendar.getInstance();<br>		<br>		cal.set(2017,month-1,day);<br>		int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);<br>		<br>		return dayOfWeek;<br>	}<br>----------------<br>【getDayOfWeekの仕様】<br>引数：month　曜日を求めたい月<br>引数：day 曜日を求めたい日<br>戻り値：曜日を表す数値が変える　1=日　2＝月　3=火　4=水　5=木　6=金　7=土<br><br>【！注意事項！】<br>getDayOfWeekを使用する場合は、プログラムの1行目に<br>import java.util.Calendar;<br>を付け加えること！',1,'2017-08-28 08:13:01','2017-06-26 10:58:11',2,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST07-08]nishinoはGOOD MAN!?','mainの引数（第１引数）に渡ってくる文字列が、「nishino」だった場合はコンソールに「GOOD MAN!」と表示し、<br>そうでない場合は「NOT GOOD MAN!」と表示するプログラムを作ってください。（表示の最後に改行は入らない）<br><br>その際、文字列が一致するかどうかは以下の equals メソッドを使ってください。<br>----------<br>メソッド名：public static boolean equals(String str1,str2)<br>説明：文字列が一致するかどうかを確認する<br>引数：str1 比較する文字列1<br>引数：str2 比較する文字列2<br>戻り値：str1とstr2が一致する場合はtrue　一致しない場合はfalse を返す<br>-----------<br>equalsメソッドの実装は以下の通り（自分のプログラムにコピペして使ってください）<br>-----------------<br>	public static boolean equals(String str1,String str2){<br>		<br>		if( str1 == null || str2 == null){<br>			return false;<br>		}<br>		<br>		return str1.equals(str2);<br>	}<br>-------------------',1,'2017-08-28 08:13:01','2017-06-28 11:19:57',1,1,19,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-01]条件分岐','mainメソッドの引数が1つ渡ってきます。<br>その値が３の倍数の時はコンソールに<br>----------------<br>3 no baisu!<br>----------------<br>11の倍数の時はコンソールに<br>----------------<br>11 no baisu!<br>----------------<br>どちらでもない時はコンソールに<br>---------------<br>OH NO!<br>---------------<br>と表示してください（最後に改行は入りません）<br><br>ヒント：mainめそっどの引数は文字列なので、文字列→数値変換をしなくてはなりません。<br>　　　　教科書P.115を見てください。',1,'2017-08-28 08:13:01','2017-06-28 10:22:42',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-04]世界のナベアツ','昔、「世界のナベアツ」がやっていたネタをプログラムで作ってみよう！<br><br>そのネタとは・・・<br>3の倍数と、3が付く数字の時にだけアホになる<br>というネタです。<br><br>１～１００までの数字を1行づつ表示して、そのうち<br>3の倍数と3が付く数字の時は aho! を表示しよう！<br><br>以下のような感じ<br>-----<br>1<br>2<br>aho!<br>4<br>5<br>aho!<br>7<br>8<br>aho!<br>10<br>.<br>.<br>.<br>97<br>98<br>aho!<br>100<br>----------<br>ヒント：for文で1～100までループして、その中でif文を使い3の倍数、3が付く数字を判定する<br>　　　　3の倍数→3で割り切れる→3で割った余りが0<br>　　　　3が付く数字→1の位が3　又は　10の位が3',1,'2017-08-28 08:13:01','2017-06-28 10:34:42',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-02]大人と子供　男性と女性','mainの引数で2つの数字が渡されます。<br>第1引数：年齢（0～100）<br>第2引数：性別（0 or 1 )<br>　　　　　　0が男で1が女を表す<br><br>この2つの情報から、コンソールに以下の表示をして下さい<br>--[年齢が12歳以下で男の場合]--<br>child man<br>---------------------------------------<br>--[年齢が12歳以下で女の場合]--<br>child woman<br>---------------------------------------<br>--[年齢が12歳より大きく70歳以下で男の場合]--<br>adult man<br>---------------------------------------<br>--[年齢が12歳より大きく70歳以下で女の場合]--<br>adult woman<br>---------------------------------------<br>--[年齢が70歳以上で男の場合]--<br>old man<br>---------------------------------------<br>--[年齢が70歳以上で女の場合]--<br>old woman<br>---------------------------------------',1,'2017-08-28 08:13:01','2017-07-03 05:50:43',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-03]総和を求めよ！','1～9999の総和を求めよ。コンソールにはシンプルに答えだけを改行無で表示してください、',1,'2017-08-28 08:13:01','2017-06-28 10:58:47',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-05]配列を表示しよう！','mainメソッドの第1引数に、カンマ区切りで数字が格納されています。<br>カンマ区切りの数値は splitToIntArray メソッド（後述）で intの配列に変換できます。<br><br>splitToIntArray を利用してmainメソッドの引数で渡された情報をintの配列にして<br>中身をスペース区切りで表示してください！<br><br>例）mainの第1引数が　\"1,3,6,8,10,4\"　だった場合、コンソールには<br>--------<br>1 3 6 8 10 4 <br>--------<br>と表示します（最後（4の後）にスペースが入っています。最後に改行はありません）<br>第1引数のカンマ区切りで渡される数は1個以上30個未満です。<br><br>--------<br>splitToIntArray について<br>引数：String str　カンマ区切りで数字が入っている文字列<br>戻り値：文字列strをカンマ区切りの数値が入ったint 型の配列<br><br>以下がソースコードです、コピペして使ってください<br>========<br>	public static int[] splitToIntArray(String str){<br>		<br>		String[] strArry = str.split(\",\");<br>		int[] intArry = new int[strArry.length];<br>		<br>		for( int i = 0; i < strArry.length; i++ ){<br>			intArry[i] = Integer.parseInt(strArry[i]);<br>		}<br>		<br>		return intArry;<br>	}<br>========',1,'2017-08-28 08:13:01','2017-07-03 05:54:44',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-10]擬似言語をプログラムに直そう！ 上級編','以下のURLに擬似言語の問題があります。<br>https://www.sunnyglad.net/AsoLearning/view/document/JSS-ST08-10.pdf<br><br>この擬似言語のプログラムをJava言語に直してください。<br>擬似言語の内容は以下のプログラムの getBestHitterの部分となります。<br><br>===================================<br>public class KadaiST0810{<br>	public static void main(String[] args){<br>		<br>		// member name list<br>		String[] names = {\"kawasaki\",\"imamiya\",\"yanagita\",\"uchikawa\",\"desupaine\",\"matsuda\",\"nakamura\",\"kai\",\"uebayashi\"};<br>		// member at bat list<br>		int[][] atbats =<br>		{<br>			{6,4,6},<br>			{5,5,6},<br>			{6,5,6},<br>			{5,4,4},<br>			{5,5,5},<br>			{5,5,5},<br>			{5,4,4},<br>			{5,5,5},<br>			{5,4,5},<br>		};<br>		// member hit list<br>		int[][] hits =<br>		{<br>			{3,3,2},<br>			{1,1,5},<br>			{2,3,3},<br>			{4,2,2},<br>			{1,2,2},<br>			{0,2,2},<br>			{1,0,2},<br>			{1,1,1},<br>			{1,0,2},<br>		};<br>		<br>		int BestAvrHitter = getBestHitter(atbats,hits);<br>		<br>		System.out.print(\"BestHitter is \"+names[BestAvrHitter]);<br>		<br>	}<br>	<br>	public static int getBestHitter(int[][] AtBat,int[][] Hit){<br>		？？？？？（この中を記載）<br>	}<br><br><br>}',1,'2017-08-28 08:13:01','2017-07-04 01:54:58',2,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-08]人気があるのは誰だ？','mainメソッドの第1引数に、カンマ区切りで7つの数字が格納されています。<br>カンマ区切りで入っている数値は、実はあるアイドルグループの人気投票結果です。<br><br>そのグループのメンバーは以下の通りです<br>uchiumi　,　oosawa　,　morohoshi　,　satou　,　yamamoto　,　akasaka　,　atsuhiro<br><br>数値の順序と上記のメンバーの順序は一致します。<br>例えば、カンマ区切りの数字が<br>10,5,21,98,32,0,87<br>であれば<br>uchiumi：10票<br>oosawa：5票<br>morohoshi：21票<br>satou：98票<br>yamamoto：32票<br>akasaka：0票<br>atsuhiro：87票<br>となります。<br><br>この中で一番票が多かった人の名前を表示してください。<br>上記の場合であればsatouが一番多いので、コンソールに<br>------<br>satou<br>------<br>と表示してください。<br><br>カンマ区切りの数値は splitToIntArray メソッド（後述）で intの配列に変換できます。<br>--------<br>splitToIntArray について<br>引数：String str　カンマ区切りで数字が入っている文字列<br>戻り値：文字列strをカンマ区切りの数値が入ったint 型の配列<br><br>以下がソースコードです、コピペして使ってください<br>========<br>	public static int[] splitToIntArray(String str){<br>		<br>		String[] strArry = str.split(\",\");<br>		int[] intArry = new int[strArry.length];<br>		<br>		for( int i = 0; i < strArry.length; i++ ){<br>			intArry[i] = Integer.parseInt(strArry[i]);<br>		}<br>		<br>		return intArry;<br>	}<br>========<br>ヒント：次のステップで処理を行うと良い<br>（１）カンマ区切りの文字をsplitToIntArrayを使ってintの配列に変換する<br>（２）取得したintの配列の中から一番大きい数字を検索し、何番目のデータが大きかったかを変数に覚えておく<br>（３）（２）で取得した、大きかったデータの番号を使って、メンバーの名前を割り出し表示する。',1,'2017-08-28 08:13:01','2017-06-29 10:14:27',2,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-06]FIZZ BUZZ','FIZZ BUZZというゲームをご存知でしょうか？<br>何人かで円になって１から順に数えて行き、3で割り切れる場合は「FIZZ」、5で割り切れる場合は「BUZZ」、3でも5でも割り切れる場合は「FIZZ BUZZ」と言うというゲームです。<br><br>これをプログラムで再現してみましょう。<br>コンソールに１から100までを順に表示して行き、3で割り切れるときはFIZZ、5で割り切れる場合はBUZZ　<br>3でも5でも割り切れる場合は「FIZZBUZZ」と表示しましょう<br>---------------------<br>1<br>2<br>FIZZ<br>4<br>BUZZ<br>FIZZ<br>7<br>8<br>FIZZ<br>BUZZ<br>・<br>・<br>13<br>14<br>FIZZBUZZ<br>16<br>・<br>・<br>・<br>98<br>FIZZ<br>BUZZ<br>----------',1,'2017-08-28 08:13:01','2017-06-29 09:39:36',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-07]擬似言語をプログラムに直そう！','以下のURLに擬似言語の問題があります。<br>https://www.sunnyglad.net/AsoLearning/view/document/JSS-ST08-07.pdf<br><br>この擬似言語のプログラムをJava言語に直してください。<br>以下のプログラム　Rei71メソッドが擬似言語部分に当たります。<br>------------------<br>public class KadaiST0807{<br>	public static void main(String[] args){<br>		<br>		int[] a = {8,4,3,1,15,7,9,2,11,6};<br>		<br>		Rei71(a,a.length);<br>		<br>	}<br>	<br>	public static void Rei71(int[] a,int n){<br>		int max,min,rn;<br>		<br>		??????（ここに擬似言語をJavaに直したものが入る）<br>		<br>		System.out.print(rn);<br>	}<br>}<br>-----------------',1,'2017-08-28 08:13:01','2017-07-03 11:23:20',1,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST08-09]ウンコードヲ修正セヨ！','ある会社の新入社員　婦呂具ラム（22歳女性）さんが↓のようなコードを書いてきました。<br>上司は、これではどうにも見辛いので、メソッドに分割するように命令しました。<br>以下のプログラムをメソッドに分けて、A-Z Cafeで満点（複雑度が10以下）とれるようにしてください。<br><br>問題は[JSS-ST05-10]の問題です<br>---------------<br>public class KadaiST0510{<br>	public static void main(String[] args){<br>		String name = args[0];<br>		int hp = Integer.parseInt( args[1] );<br>		int tokusei1 = Integer.parseInt( args[2] );<br>		int attack = Integer.parseInt( args[3] );<br>		int tokusei2 = Integer.parseInt( args[4] );<br>		<br>		// damage<br>		if( tokusei2 == 0 ){<br>			if( tokusei1 == 1 ){<br>				// honoo X mizu<br>				attack = attack - 20;<br>			}else if( tokusei1 == 2){<br>				// honoo X kusa<br>				attack = attack * 2;<br>			}<br>		}else if( tokusei2 == 1 ){<br>			if( tokusei1 == 0 ){<br>				// mizu X honoo<br>				attack = attack * 2;<br>			}else if( tokusei1 == 2){<br>				// mizu X kusa<br>				attack = attack - 20;<br>			}<br>		}else{<br>			if( tokusei1 == 0 ){<br>				// kusa X honoo<br>				attack = attack - 20;<br>			}else if( tokusei1 == 1){<br>				// kusa X mizu<br>				attack = attack * 2;<br>			}<br>		}<br>		<br>		int count = 0;<br>		while( hp > 0 ){<br>			hp = hp - attack;<br>			count++;<br>		}<br>		<br>		<br>		System.out.println(name+\":\"+count);<br>	}<br><br>}<br>--------------------<br>ヒント：１メソッド中のif文の数を減らせば点数は上がります。<br>　　　　if文の中にあるif文をメソッド化すればOK<br><br>上級者向けヒント：別の方法として、メソッドに分けずに点数を上げる方法もあります。<br>　　　　　　　　　　　　その場合、配列を使用します。',1,'2017-08-28 08:13:01','2019-01-28 12:19:48',2,1,20,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST09-01]クラス１','以下のプログラムの？を埋めてプログラムを完成させよう！<br><br>--------------<br>class Human{<br>	String name;<br>	int weight;<br>}<br><br>public class JssSt0901{<br><br>	public static void main(String[] args){<br>		Human h = ？;<br>		<br>		？ = \"Naoyuki Nishino\";<br>		？ = 65;<br>		<br>		System.out.println(\"name is \"+h.name);<br>		System.out.println(\"weight is \"+h.weight);<br>	}<br>}<br>--------------<br>なお、コンソールの表示はいかのようになる<br>=====<br>name is Naoyuki Nishino<br>weight is 65<br>=====',1,'2017-10-30 02:05:28','2017-10-30 02:05:28',1,1,28,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST09-02]クラス２','さきほどの[JSS-ST09-01]のプログラムに「身長」を追加したい。<br>身長の変数名は height だとすると、どう修正すれば良いか？<br><br>なお、身長は172という値が入り、完成後のプログラムを実行すると<br>コンソールには<br>---------<br>name is Naoyuki Nishino<br>height is 172<br>weight is 654<br>--------<br>と表示される<br><br>ヒント：Humanクラスに変数height を追加して、mainメソッドでHumanクラスの<br>　　　　インスタンスを作成後、heightに値（172）を代入すればよい',1,'2017-10-30 02:06:28','2017-10-30 02:06:28',1,1,28,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST09-03]クラス３','さきほどの[JSS-ST09-02]を修正して、奥田民生の情報も表示したくなった。<br>どう修正すればよいか？<br><br>ちなみにコンソールには<br>---------------------------------<br>name is Naoyuki Nishino<br>height is 172<br>weight is 65<br>name is Tamio Okuda<br>height is 171<br>weight is 62<br>---------------------------------<br>と表示されるように修正してください<br><br>ヒント：インスタンスをもう一つ作る！',1,'2017-10-30 01:27:52','2017-10-30 01:27:52',1,1,28,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST09-04]クラス４','四国の情報をクラスを用いたプログラムで表示したい！どんなプログラムにすればよいか！<br><br>作成するクラス<br>クラス名：Ken<br>クラスの変数：<br>　name　（文字列型）：県の名前が格納される<br>  captal （文字列型）：県の県庁所在地が格納される<br>　population （数値型）：県の人口が格納される<br><br>コンソールの表示は以下のようになるようにしよう<br>------------<br>name is Ehime<br>captal is Ehime<br>population is 1385262<br>name is Kagawa<br>captal is Takamatsu<br>population is 976263<br>name is Tokushima<br>captal is Tokushima<br>population is 755733<br>name is Kouchi<br>captal is Kouchi<br>population is 728276',1,'2017-10-30 02:11:45','2017-10-30 02:11:45',1,1,28,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST09-05]クラス５','さきほどの[JSS-ST09-04]の四国のプログラムを改造して<br>mainの引数に渡された数値によって、表示する県を変える<br>プログラムを作ろうと思う。<br>コンソールの表示は以下の通り。<br><br>引数が0なら<br>------<br>name is Ehime<br>captal is Ehime<br>population is 1385262<br>------<br><br>引数が1なら<br>------<br>name is Kagawa<br>captal is Takamatsu<br>population is 976263<br>------<br><br>引数が2なら<br>------<br>name is Tokushima<br>captal is Tokushima<br>population is 755733<br>------<br><br>引数が3なら<br>------<br>name is Kouchi<br>captal is Kouchi<br>population is 728276<br>------<br><br>それ以外なら<br>----<br>OH NO!<br>----',1,'2017-10-30 02:11:14','2017-10-30 02:11:14',1,1,28,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-01]モンスターと戦うプログラムを作ろう１','西野先生は、モンスターと戦うプログラムを作ろうと考えている。<br>まずは主人公であるPlayerクラスを作る。<br><br>あなたは、西野先生から、「Mainメソッドは私が作っておくので、とりあえず<br>Playerクラスを作ってくれないか？<br><br>Playerクラスには、インスタンス変数が２つ。<br>１つは名前を格納する文字列型のname<br>もうひとつは、体力を表す整数型のhp<br>ひとまず、上記２つのインスタンス変数だけを記述したPlayerクラスを作ってくれたまえ。」<br><br>と頼まれた。<br>↓のJssSt1001.javaは西野先生が作ってくれたので<br>----------[JssSt1001.java]<br>public class JssSt1001{<br><br>	public static void main(String[] args){<br>		Player player = new Player();<br>		<br>		player.name = \"Nishino\";<br>		player.hp = 10;<br>		<br>		System.out.println(\"player.name:\"+player.name);<br>		System.out.println(\"player.hp:\"+player.hp);<br>	}<br>}<br>---------------<br><br>あなたは、別ファイルにPlayerクラスを作ってください。<br>ファイル名はPlayer.javaとしてください。<br>なお、複数のファイルをAZ Cafeにアップロードするには「ファイル」の欄にある<br>「行追加」ボタンをクリックしてファイルを複数アップしてください',1,'2017-11-10 03:00:57','2017-11-10 03:00:57',1,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-02]モンスターと戦うプログラムを作ろう２','西野先生は次にあなたに依頼した。<br><br>「では、さきほどのPlayerクラスに、名前とHPを受け取って初期化するようなコンストラクタを追加してくれたまえ。」<br><br>さきほどと同様にmainメソッドは西野先生が作ってくれたので、プログラムが動くように<br>先ほどの、Playerクラス(Player.java)にコンストラクタを追加してみよう<br>----<br>public class JssSt1002{<br><br>	public static void main(String[] args){<br>		Player player = new Player(\"Nishino\",15);<br>		<br>		System.out.println(\"player.name:\"+player.name);<br>		System.out.println(\"player.hp:\"+player.hp);<br>	}<br>}<br>------<br>さきほどと作ったPlayer.javaに追加する形で修正してください<br>なお、複数のファイルをAZ Cafeにアップロードするには「ファイル」の欄にある<br>「行追加」ボタンをクリックしてファイルを複数アップしてください',1,'2017-11-10 03:02:19','2019-12-11 09:09:38',1,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-03]モンスターと戦うプログラムを作ろう３','西野先生はあなたにこういった<br><br>「OK！OK！良い感じだ。では次に、Playerクラスに名前とHPを表示するメソッド displayという<br>名前のメソッドを追加してくれ。<br>Main側は、また私が作っておくので、君はPlayerクラス側を頼むよ。<br>そのメソッドでの表示は分かりやすいように上下に======を入れておこう。<br>つまり、実行すると<br>========================<br>name:Nishino<br>hp:15<br>========================<br>と表示されるようにしよう。」<br><br>さきほどと同様にmainメソッドは西野先生が途中まで作ってくれたので、プログラムが動くように<br>先ほどの、Playerクラス(Player.java)にdisplayメソッドを追加してみよう<br>-------<br>public class JssSt1003{<br><br>	public static void main(String[] args){<br>		Player player = new Player(\"Nishino\",15);<br>		<br>		？（ここでPlayerクラスのdisplayメソッドを呼び出す[1行]）<br>	}<br>}<br>--------<br>ヒント：インスタンスメソッドの作成と呼び出しの知識が必要。<br>インスタンスメソッドの作成は教科書P.170あたり<br>インスタンスメソッドの呼び出しは教科書P.171あたり',1,'2017-11-10 03:50:20','2019-12-11 09:09:02',1,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-04]モンスターと戦うプログラムを作ろう４','西野先生が言いました<br><br>「あ、プレイヤーの攻撃力と守備力、それと最大体力を入れるのを忘れていたよ。<br>わるいけど、Playerクラスに攻撃力、守備力、最大体力を表すインスタンス変数を追加してもらえるかい？<br>名前は、それぞれ、attack、deffence、maxHpとしよう。全部整数しか入れないので型は自分で考えてくれ。<br>そして、追加した３つの情報は、コンストらたで渡すので、コンストラクタも修正してくれたまえ。」<br><br>mainメソッドは西野先生が作ってくれたので、プログラムが動くように<br>先ほどの、Playerクラス(Player.java)にを修正しよう<br>------------------<br>public class JssSt1004{<br><br>	public static void main(String[] args){<br>		Player player = new Player(\"Nishino\",15,100,80,100);<br>		<br>		player.display();<br>	}<br>}<br>------------------<br>さきほどと作ったPlayer.javaに追加する形で修正してください<br>なお、複数のファイルをAZ Cafeにアップロードするには「ファイル」の欄にある<br>「行追加」ボタンをクリックしてファイルを複数アップしてください',1,'2017-11-10 03:19:52','2017-11-10 03:19:52',1,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-05]モンスターと戦うプログラムを作ろう５','西野先生は言った<br><br>「ここまでよくがんばった。とりあえず、今日は後一つメソッドを追加するところまでやろう。」<br>つづけて、こういった。<br>「Playerクラスにダメージを受けた時の処理を行うメソッドを追加しよう。<br>　名前は Attacked が良いかな。<br>　Attackedメソッドは整数型の引数が1個あって、その引数分、現在のHPから<br>　マイナスするようにしよう。<br>　そして、HPが0以下になったら ”You died” と表示するようにしよう。<br><br>  敵の攻撃は、何回も来る。mainの引数でダメージを受け取るけどmain側は<br>　私が作るので安心してくれたまえ。」<br><br>mainメソッドは西野先生が作ってくれたので、プログラムが動くように<br>先ほどの、Playerクラス(Player.java)を修正しよう。<br>------------------<br>public class JssSt1005{<br><br>	public static void main(String[] args){		<br>		Player player = new Player(\"Nishino\",15,100,80,100);<br>		<br>		for(int i = 0; i < args.length; i++ ){<br>			int damage = Integer.parseInt(args[i]);<br>			<br>			//monster attacked player!<br>			System.out.println(\"monster attack player! damage = \"+damage);<br>			player.attacked( damage );<br>			//display status<br>			if( player.hp > 0 ){<br>				player.display();<br>				System.out.println(\"\");<br>			}<br>		}<br>	}<br>}<br>--------------------',1,'2017-11-10 04:28:08','2017-11-10 04:28:08',2,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST10-06]車を走らせよう！','西野先生は、新しい車を買った。<br>車にはいつも名前をつけている。今回の新しい車の名前は「GO GO　MACHINE」だ！<br>車のスピードの最高は200キロ！<br>色は赤です。<br><br>ふと西野先生は、この車を世間に知らしめたいと思いプログラムにしようと思った。<br>Main側は途中まで作ったが、時間が無くて続きが作れていない。<br><br>以下のMainのプログラムの？を埋めてプログラムを完成させよう！<br><br>---<br>車クラスの仕様<br>クラス名：Car<br>フィールド（情報）：名前（name)<br>                          色（color）<br>                          現在のスピード（speed)<br>メソッド（機能）：情報を全て表示するメソッド（名前、色、現在のスピードを表示する）<br>　　　　　　　　　　スピードアップするメソッド（引数でアップするスピードを受け取り、スピードアップする。最大スピードよりは大きくならない）<br>----<br><br>---[Car.java]----<br>class Car{<br>	？（1行）<br>	String color;<br>	int speed;<br>	<br>	？？？（コンストラクタ：複数行）<br>	<br>	public void display(){<br>		System.out.println(\"========================\");<br>		System.out.println(\"name:\"+？);<br>		System.out.println(\"color:\"+？);<br>		System.out.println(\"speed:\"+？);<br>		System.out.println(\"========================\");<br>	}<br>	<br>	public void upSpeed(int speed){<br>		？？？（複数行）<br>	}<br>}<br>-------------------<br><br>---[JssSt1006.java]----<br>public class JssSt1006{<br><br>	public static void main(String[] args){		<br>		Car car = new Car(\"GO GO MACHINE\",\"red\");<br>		<br>		for(int i = 0; i < args.length; i++ ){<br>			int speed = Integer.parseInt(args[i]);<br>			<br>			car.upSpeed(speed);<br>			<br>			？（情報を表示するCarクラスのメソッドを呼び出す）<br>		}<br>	}<br>}<br>-------------------',1,'2017-11-13 00:41:13','2017-11-13 00:41:13',2,1,34,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-01]今度こそ、ドラクエの戦闘っぽいのをつくろう１','教科書で学んだ、継承などを使ってRPGの戦闘っぽいのをつくりましょう。<br><br>まず、主人公のPlayerクラスを作ります。<br>まずは、名前を受け取るコンストラクタと、パラメータを表示する<br>displayというメソッドをクラス内に作りましょう。<br><br>？を埋めて、プログラムを完成させましょう<br>----------[Player.java]-----------<br>public class Player{<br>	int level;<br>	int maxHp;<br>	int hp;<br>	String name;<br>	<br>	Player(String name){<br>		this.name = name;<br>		level = 1;<br>		maxHp = 20;<br>		hp = 20;<br>	}<br>	<br>       ？？？（displayというインスタンスメソッドを書く）<br>}<br>-----------------------------<br>--------[JssSt1101.java]-------<br>public class JssSt1101{<br>	public static void main(String[] args){<br>		Player player = new Player(\"nishino\");<br>		<br>		player.display();<br>	}<br>}<br>-----------------------------<br><br>上記のプログラムを実行するとコンソールに<br>===========================<br>-----------------------<br>name : nishino<br>HP   : 20<br>Lv.  : 1<br>-----------------------<br>===========================<br>と表示される。上下の「-----------------------」も表示対象',1,'2017-11-24 10:15:53','2017-11-24 10:15:53',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-02]今度こそ、ドラクエの戦闘っぽいのをつくろう２','次にモンスタークラスを作ります。<br>Monsterクラスは、モンスターの名前と最大HPをコンストラクタで受け取り<br>「（モンスターの名前） appeared!」と表示するメソッドを持っています。<br>？を埋めてプログラムを完成させてください。<br>------------[Monster.java]-------------<br>public class Monster{<br>	int maxHp;<br>	int hp;<br>	int attack;<br>	String name;<br>	<br>	Monster(String name,int maxHp){<br>		this.name = name;<br>		this.maxHp = maxHp;<br>		hp = maxHp;<br>	}<br>	<br>	public void displayAppearMsg(){<br>		System.out.println(name+\" appeared!\");<br>	}<br>}<br>----------------------------------<br>-------[JssSt1102.java]-------<br>public class JssSt1102{<br>	public static void main(String[] args){<br>		Monster monster = ？（インスタンスの生成）;<br>		<br>		？（displayAppearMsgメソッド呼び出し）;<br>	}<br>}<br>----------------------------------<br><br>なお上記プログラムを実行するとコンソールに<br>==============<br>slime appeared!<br>==============<br>と表示されます。<br>また、「slime」はモンスターの名前で、slimeは最大HP８とします、',1,'2017-11-24 11:23:21','2017-11-24 11:23:21',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-03]今度こそ、ドラクエの戦闘っぽいのをつくろう３','JSS-ST11-01とJSS-ST11-02で完成したPlayerクラスとMonsterクラスを改造して<br>RPG風に戦わせてみます。<br><br>以下のことをやります<br>・PlayerクラスとMonsterクラスにそれぞれ、ダメージを計算して<br>　戻り値として返す。attackというメソッドを追加<br>・PlayerクラスとMonsterクラスにそれぞれ、引数でダメージを受け取り<br>　ダメージを受けてhpを減らす　メソッドdamagedを追加する<br>・mainメソッドで、モンスターの体力（hp）が０になるまでお互いの攻撃を<br>　繰り返し、ターンごとに主人公の体力などを表示する<br><br>-----------[Player.java]----------<br>import java.util.*;<br><br>public class Player{<br>	int level;<br>	int maxHp;<br>	int hp;<br>	String name;<br>	Random r;<br>	<br>	Player(String name){<br>		this.name = name;<br>		level = 1;<br>		maxHp = 20;<br>		hp = 20;<br>		r = new Random(50000);<br>	}<br>	<br>	？？？（[JSS-ST11-01]で追加したdisplayメソッド<br>	<br>	public ？？？（ダメージを計算するdamagedメソッド）{<br>		hp -= damage;<br>		System.out.println(damage+\" point for \"+name);<br>	}<br>	<br>	public ？？？（ダメージを計算するattackメソッド）{<br>		int damage = 1+r.nextInt(10);<br>		<br>		return damage;<br>	}<br>}<br><br>-----------[Monster.java]----------<br><br>import java.util.*;<br><br>public class Monster{<br>	int maxHp;<br>	int hp;<br>	int attack;<br>	String name;<br>	Random r;<br>	<br>	Monster(String name,int maxHp,int attack){<br>		this.name = name;<br>		this.maxHp = maxHp;<br>		this.attack = attack;<br>		hp = maxHp;<br>		r = new Random(1000);<br>	}<br>	<br>	public void displayAppearMsg(){<br>		System.out.println(name+\" appeared!\");<br>	}<br>	<br>	public ？？？（ダメージを計算するdamagedメソッド）{　<br>		int damage = 1+r.nextInt(attack);<br>		<br>		return damage;<br>	}<br>	public ？？？（ダメージを計算するattackメソッド）{　<br>		hp -= damage;<br>		System.out.println(damage+\" point for \"+name);<br>	}<br>}<br><br><br>-----------[JssSt1103.java]----------<br>public class JssSt1103{<br>	public static void main(String[] args){<br>		Player player = new Player(\"nishino\");<br>		Monster monster = new Monster(\"slime\",8,5);<br>		<br>		player.display();<br>		monster.displayAppearMsg();<br>		<br>		while( monster.hp > 0 ){<br>			int damage1 = monster.attack();<br>			player.damaged(damage1);<br>			<br>			int damage2 = player.attack();<br>			monster.damaged(damage2);<br>			<br>			player.display();<br>		}<br>		<br>	}<br>}',1,'2017-11-24 11:23:32','2017-11-24 11:23:32',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-04]今度こそ、ドラクエの戦闘っぽいのをつくろう４','先ほど作ったプログラムを少し改造します。<br>Playerクラス、Monsterクラス共に<br>hp（体力）が0になったときに以下の表示をするようにしてください。<br>========<br>（名前）  is dead<br>========',1,'2017-11-24 11:11:41','2017-11-24 11:11:41',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-05]今度こそ、ドラクエの戦闘っぽいのをつくろう５','このままでも悪くないですが、今の作りでは<br>Monsterクラスを使う側が、モンスターの名前や、体力、攻撃力を与えています。<br><br>モンスターの名前や体力、攻撃力を使う側が意識をするのは良くない作り<br>なので、Monsterクラスから、Slimeクラスを派生させて作りましょう。<br><br>Slimeクラスは、引数無のコンストラクタをもち、親クラスである<br>Monsterクラスのコンストラクタを以下のパラメータでよぶようにしましょう！<br>・名前は\"slime\"<br>・Hpは8<br>・攻撃力は5<br><br>以下の？を埋めてプログラムを完成させましょう<br>---------[Slime.java]-------<br>public class Slime ？{<br>	<br>	Slime(){<br>		super(？);<br>	}<br>}<br>-------[JssSt1105.java]--------<br>public class JssSt1105{<br>	public static void main(String[] args){<br>		Player player = new Player(\"nishino\");<br>		Monster monster = new Slime();<br>		<br>		player.display();<br>		monster.displayAppearMsg();<br>		<br>		while( monster.hp > 0 ){<br>			int damage1 = monster.attack();<br>			player.damaged(damage1);<br>			<br>			int damage2 = player.attack();<br>			monster.damaged(damage2);<br>			<br>			player.display();<br>		}<br>		<br>	}<br>}<br>------------<br>※Monsterクラスは変更なし',1,'2017-11-24 11:34:13','2017-11-24 11:34:13',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-06]今度こそ、ドラクエの戦闘っぽいのをつくろう６','せっかくなのでスライム以外も作りましょう。<br>ドラキー（Draky）クラスを作成して、mainメソッドに渡される引数が<br>0ならSlimeと戦う<br>1ならDrakyと戦う<br>という具合にしましょう。<br><br>なお、ドラキーの情報は以下の通りです。<br>----<br>・名前はdraky<br>・hpは15<br>・攻撃力は8<br>----<br><br>？を埋めてぷグラムを完成させてください。<br>----[Draky.java]----<br>public class Draky ？？？{<br>	<br>	Draky(){<br>		super(\"draky\",15,8);<br>	}<br>}<br>----------[JssSt1106.java]------------<br>public class JssSt1106{<br>	public static void main(String[] args){<br>		int kind = Integer.parseInt(args[0]);<br>		Player player = new Player(\"nishino\");<br>		Monster monster = null;<br>		<br>		if( kind == 0 ){<br>			？？<br>		}else if(kind == 1){<br>			？？<br>		}		<br>		<br>		player.display();<br>		monster.displayAppearMsg();<br>		<br>		while( monster.hp > 0 ){<br>			int damage1 = monster.attack();<br>			player.damaged(damage1);<br>			<br>			int damage2 = player.attack();<br>			monster.damaged(damage2);<br>			<br>			player.display();<br>		}<br>		<br>	}<br>}<br>-------------<br>※Monster、Slimeクラスは変更なし',1,'2017-11-24 11:42:14','2017-11-24 11:42:14',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-07]今度こそ、ドラクエの戦闘っぽいのをつくろう７','さらに、強敵ゴーレムを登場させましょう。<br>Monsterクラスから派生させたGolemクラスを作って、mainメソッドの<br>引数で2が渡ってきたらゴーレムと戦うという具合にしましょう<br><br>ゴーレムの情報は以下の通り<br>・名前はgolem<br>・HPは80<br>・攻撃力は30<br>',1,'2017-11-24 11:47:27','2017-11-24 11:47:27',1,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST11-08]今度こそ、ドラクエの戦闘っぽいのをつくろう８','ここである異変に気付きました！<br>そう、主人公は既に死んでいるのに、ずっとモンスターに対して攻撃をしているのです！<br><br>そこで、プログラムを改造して主人公が死んだらそこで戦闘が終わるようにしましょう。<br><br>ヒント：戦闘はループの中で行っているので<br>　　　　主人公の体力が無くなったらループを抜ければよい。',1,'2017-11-24 11:51:17','2017-11-24 11:51:17',2,1,38,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-01]10才なのはだーれ？','西野先生の親戚の一覧をつくりました。<br>10才の子供が誰かを知りたくなりました。そこで、プログラムで10才のこの名前を表示しようと<br>思います。プログラム中の「？」を埋めてください。<br>-------[Human.java]------<br>public class Human{<br>	int age;<br>	String name;<br>	<br>	Human(int age,String name){<br>		this.age = age;<br>		this.name = name;<br>	}<br>	<br>	public int getAge(){<br>		return age;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"I\'m \"+name);<br>	}<br>}<br><br>------[JssSt1201.java]-----<br>public class JssSt1201{<br>	public static void main(String[] args){<br>		Human[] humans = {<br>			new Human(10,\"jon\"),<br>			new Human(12,\"Mike\"),<br>			new Human(11,\"Ken\"),<br>			new Human(10,\"Taro\")<br>		};<br>		<br>		for(int i = 0; i < humans.length; i++ ){<br>			if( ？（年齢を取得して10才かどうかを確認する） ){<br>				humans[i].？（表示するメソッドの呼び出し）;<br>			}<br>		}<br>	}<br>}',1,'2017-11-27 10:58:27','2017-11-27 10:58:27',1,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-02]車の一覧表示','車を一覧表示したいです。<br>プログラムの「？」を埋めてプログラムを完成させてください<br>------[Car.java]------<br>public class Car{<br>	String name;<br>	String color;<br>	int price;<br>	<br>	Car(String name,String color,int price){<br>		this.name = name;<br>		this.color = color;<br>		this.price = price;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"name:\"+name);<br>		System.out.println(\"color:\"+color);<br>		System.out.println(\"price:\"+price);<br>	}<br>}<br><br>-----[JssSt1202.java]------<br>public class JssSt1202{<br>	public static void main(String[] args){<br>		<br>		Car car1 = ?（インスタンスの作成）;<br>		Car car2 = ?（インスタンスの作成）;<br>		<br>		car1.display();<br>		car2.display();<br>	}<br>}<br>------------------------------<br>なお、上記のプログラムを実行するとコンソールには<br>---------<br>name:Lupin<br>color:Silver<br>price:100<br>name:WagonR<br>color:Black<br>price:120<br>----------<br>と表示されます',1,'2017-11-27 11:02:28','2017-11-27 11:02:28',1,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-03]姫野先生お店を開くの巻','姫野先生が、副業でお店を開店する事になりました。<br>とりあえず、大好きなお菓子のカール専門店です。<br>あなたは、商品を管理するプログラムを作って欲しいと頼まれました。<br><br>とりあえず、第1段階では、在庫管理と商品名を表示させます。<br><br>プログラム中の「？」を生めてプログラム完成させてください。<br>---------[Item.java]---------<br>public class Item{<br>	String name;<br>	int price;<br>	int stock;<br>	<br>	Item(String name,int price,int stock){<br>		？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>		？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>		？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>	}<br>	<br>	？？？（addStockメソッドをここに書く）<br>	<br>	void display(){<br>		System.out.println(\"name:\"+name);<br>		System.out.println(\"price:\"+price);<br>		System.out.println(\"stock:\"+stock);<br>	}<br>}<br>---------------[JssSt1203.java]------------<br>public class JssSt1203{<br>	public static void main(String[] args){<br>		Item item = new Item(\"Curl\",100,50);<br>		<br>		item.addStock(100);<br>		<br>		item.display();<br>	}<br>}<br>------------------------------------<br>addStockメソッドの仕様は、以下の通りです。<br>　引数：在庫の数（整数型）<br>　処理内容：　引数で増やしたい在庫の数（整数型）を受け取り<br>　　　　　　　　　インスタンス変数stockに足します。<br>',1,'2017-11-27 11:10:34','2017-11-27 11:10:34',1,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-04]姫野先生事業拡大の巻','カール専門店でちょっともうけた姫野先生は販売する品物を増やすことにしました。<br>電化製品と、薬です。<br><br>表示として、電化製品にはワット数を、薬は服用して良い対象年齢を表示することにしました。<br><br>プログラムの「？」を埋めてプログラムを完成させましょう。<br>電化製品と薬は先ほどのItemクラスから派生して作りましょう。<br><br>---------[Item.java]---------<br>public class Item{<br>    String name;<br>    int price;<br>    int stock;<br>    <br>    Item(String name,int price,int stock){<br>        ？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>        ？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>        ？（コンストラクタの引数で受け取った値をインスタンス変数に代入）<br>    }<br>    <br>    ？？？（addStockメソッドをここに書く）<br>    <br>    void display(){<br>        System.out.println(\"name:\"+name);<br>        System.out.println(\"price:\"+price);<br>        System.out.println(\"stock:\"+stock);<br>    }<br>}<br>-----[ElectricItem.java]-----<br>public class ElectricItem ？？{<br>	int wattage;<br>	<br>	ElectricItem(int wattage,String name,int price,int stock){<br>		？（スパークラスのコンストラクタを呼び出す）<br>		this.wattage = wattage;<br>	}<br>	<br>	？？（表示メソッドのオーバーライド）{<br>		？？（表示処理）<br>	}<br>}<br>-------[Medicine.java]------<br>public class Medicine ？？{<br>	int age;<br>	<br>	Medicine(int age,String name,int price,int stock){<br>		？（スパークラスのコンストラクタを呼び出す）<br>		this.age = age;<br>	}<br>	<br>	？？（表示メソッドのオーバーライド）{<br>		？？（表示処理）<br>	}<br>}<br>-----[JssSt1204.java]----<br>public class JssSt1204{<br>	public static void main(String[] args){<br>		ElectricItem item1 = new ElectricItem(100,\"DVD Player\",15000,30);<br>		Medicine item2 = new Medicine(3,\"Bufferin\",800,50);<br>		<br>		item1.display();<br>		System.out.println(\"---------\");<br>		item2.display();<br>	}<br>}<br>---------------------------<br><br>このプログラムを動かすとコンソールには<br>=====<br>name:DVD Player<br>price:15000<br>stock:30<br>wattage:100<br>---------<br>name:Bufferin<br>price:800<br>stock:50<br>age:3<br>=======<br>と表示されます',1,'2017-11-27 11:17:52','2017-11-27 11:17:52',1,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-05]Buss is Car! Taxi is Car!','前の課題で作ったCarクラスを派生させて、タクシークラスとバスクラスを作りました。<br>プログラムの「？」を埋めてプログラムを完成させてください<br><br>---[Car.java]---<br>public class Car{<br>	String name;<br>	String color;<br>	int price;<br>	<br>	Car(String name,String color,int price){<br>		this.name = name;<br>		this.color = color;<br>		this.price = price;<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"name:\"+name);<br>		System.out.println(\"color:\"+color);<br>		System.out.println(\"price:\"+price);<br>	}<br>}<br>-----[Buss.java]-----<br>public class Buss extends Car{<br>	<br>	Buss(String name,String color,int price){<br>		super(name,color,price);<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"This is Buss!\");<br>		super.display();<br>	}<br>}<br>-----[Taxi.java]-----<br>public class Taxi extends Car{<br>	<br>	Taxi(String name,String color,int price){<br>		super(name,color,price);<br>	}<br>	<br>	public void display(){<br>		System.out.println(\"This is Taxi!\");<br>		super.display();<br>	}<br>	<br>}<br>-----[JssSt1205.java]-----<br>public class JssSt1205{<br>	public static void main(String[] args){<br>		Car car1 = ？（インスタンス作成）;<br>		Car car2 = ？（インスタンス作成）;<br>		<br>		car1.display();<br>		System.out.println(\"----------\");<br>		car2.display();<br>	}<br>}<br>------------------------------<br>なお、上記プログラムを実行すると表示は以下になります<br>================<br>This is Taxi!<br>name:Yellow Cab<br>color:Yellow<br>price:100<br>----------<br>This is Buss!<br>name:Nishitetsu<br>color:Silver<br>price:100<br>================<br>',1,'2017-11-27 11:23:26','2017-11-27 11:23:26',1,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST12-06]姫野先生さらに事業拡大の巻','薬と電化製品とカール専門店という斬新なスタイルがウケて、繁盛している姫野先生のお店。<br>さらに姫野先生は漫画も売ることに決めました。<br>また、今まで入荷しかメソッドがありませんでした、売れた場合は在庫を減らせるように<br>sellというメソッドを追加して、在庫管理を強化しました。<br><br>西野先生は、手を広げすぎて失敗しないか、ちょっと心配そうに見ていますが、、、果たして。<br><br>漫画クラスの仕様は以下の通りです<br>--------------<br>・クラス名はBook<br>・Itemクラスを継承している<br>・ページ数を表示する。ページ数はコンストラクタで受け取る。<br>・ページ数を表示する時の表示名はpageNumとし、他の項目と同様に\"pageNum:（ページ数)\"の形式で表示する<br>---------------<br>sellメソッドの仕様は以下の通りです<br>----------<br>メソッド名：sell<br>戻り値：なし<br>引数：売れた数（整数値）<br>処理内容：引数で受け取った売れた数だけ、変数stockを減らす<br>----------<br><br><br>以下のプログラムと上記の仕様から追加すべきクラス・メソッドを考えて<br>プログラムを完成させてください。<br>------[JssSt1206.java]-----<br>public class JssSt1206{<br>	public static void main(String[] args){<br>		Item[] items = {<br>			new ElectricItem(50,\"Electric pot\",5000,20),<br>			new Medicine(2,\"Kakkonto\",1200,60),<br>			new Book(200,\"Jumping\",300,100),<br>		};<br>		<br>		int[] sellNum = {1,5,60};<br>		int[] addStockNum = {0,10,30};<br>		<br>		for(int i = 0; i < items.length; i++ ){<br>			//sell & arrival <br>			items[i].sell( sellNum[i] );<br>			items[i].addStock( addStockNum[i] );<br>			<br>			//display<br>			items[i].display();<br>			System.out.println(\"------------\");<br>		}<br>	}<br>}<br>----------------------',1,'2017-11-27 11:33:50','2017-11-27 11:33:50',2,1,39,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-01]動物レースをつくろう１','あなたは、ノーニシゲームカンパニーの社員です<br>社長である、ノーニシ社長から、コンソールで遊べる<br>「動物レースゲーム」を作るように任命されました。<br><br>「動物ゲームレース」とは、人間、犬、猫、馬、カピバラのうち<br>どれが一着になるか競うゲームです<br><br>どの動物が何匹参加するかは、mainの引数で渡されます。<br><br>あなたは、まず手始めに、人間、犬、猫、馬、カピバラのそれぞれが<br>何匹イルカを引数から取得するプログラムを考えてください。<br><br>それぞれの動物の数は、mainの引数の数の桁で決まっています。<br>例えば引数の値が<br>12345ならば、桁の最上位から一けたずつ、人間、犬、猫、馬、カピバラなので、<br>人間1匹<br>犬2匹<br>猫3匹<br>馬4匹<br>カピバラ5匹<br>です。<br><br>この場合、コンソールに<br>human=1 dog=2 cat=3 horse=4 capybara=5<br>と表示してください。<br><br>因みに、ゲームが完成すると以下のようになりまっす。<br>引数が11111の場合<br>※@が人間、Dが犬、Cが猫、Hが馬、Bがカピバラの現在地を表しています<br>human=1 dog=1 cat=1 horse=1 capybara=1<br>@=================================================<br>===D==============================================<br>=C================================================<br>=====H============================================<br>B=================================================<br><br>@=================================================<br>====D=============================================<br>==C===============================================<br>==========H=======================================<br>B=================================================<br><br>～（中略）～<br><br>==========@=======================================<br>=============================D====================<br>================C=================================<br>=================================================H<br>======B===========================================<br><br>==========@=======================================<br>=============================D====================<br>=================C================================<br>==================================================<br>=======B==========================================',1,'2017-12-06 11:03:27','2017-12-06 11:03:27',1,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-02]動物レースをつくろう2','次にあなたは、Animalクラスを作り、displayメソッドで<br>とりあず、フィールドを表示することにしました。<br><br>Animalクラスとメソッドの仕様は次の通りです<br>-----------------<br>・Animalクラス<br>　・publicなクラス<br><br>・displayメソッド<br>　メソッド名：display<br>  引数：なし<br>　戻り値：なし<br>　処理内容：<br>　　競争をするフィールドを\"=\"として50個横並びに表示する。<br>　　50個表示した後に、改行を入れる<br>-----------------<br><br>作成した、クラスのメソッドは、AnimalRaceクラスで呼び出してください<br><br>このプログラムが完成した後のコンソールの表示は<br><br>human=1 dog=2 cat=3 horse=4 capybara=5<br>==================================================<br><br>となります<br><br>ヒント：↓の？を埋めよう<br>-----[Animal.java]------<br>public class ？{<br>	private final static int FIELD_LEN = 50;<br>	<br>	public ？？{（←戻り値、メソッド名、引数はなんだ？？）<br>		for(int i = 0; i < FIELD_LEN; i++ ){<br>			？（←繰り返して表示しない解けないのは何？）<br>		}<br>		System.out.print(\"\<br>\");<br>	}<br>}',1,'2017-12-06 11:13:19','2017-12-06 11:13:19',1,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-03]動物レースをつくろう3','次にあなたは、引数で受け取った動物の数分、インスタンスを作りdisplayメソッドを実行しました。<br><br>具体的には<br>・Animalクラスの配列を作る。<br>・要素数は、引数で受け取った動物の数の合計。<br>・ループしながら、配列の各要素にAnimalのインスタンスを代入し、displayメソッドを呼び出す<br><br>これを実行するとコンソールの表示は以下のようになる<br>引数が12345の場合<br>human=1 dog=2 cat=3 horse=4 capybara=5<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br><br>引数が11111の場合<br>human=1 dog=1 cat=1 horse=1 capybara=1<br>==================================================<br>==================================================<br>==================================================<br>==================================================<br>==================================================',1,'2017-12-06 11:10:32','2017-12-06 11:10:32',1,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-04]動物レースをつくろう4','つぎに、動物のフィールド（情報）として、現在位置を表すposと、スピードを表すspeed変数を作ります。<br>speedはコンストラクタで受け取るようにしましょう。また、posの初期値は0です。<br>また、displayメソッドで、現在位置を\"A\"と表示するようにしましょう。<br><br>あなたは試しに、コンストラクタでスピードを3を渡して、displayを使用し、コンソールに表示をしました。<br><br>具体的には以下を行います。<br>・Animalクラスに整数型のインスタンス変数、posとspeedを追加する<br>・Animalにspeedを受け取るコンストラクタを追加する。コンストラクタの中でposを0にする<br>・Animalのdisplayメソッドで、posとiが同じであれば、\"A\"を表示する<br>・AnimalRaceでAnimalクラスの生成時に、引数つきのコンストラクタを呼び出す<br><br>このプログラムを実行すると、コンソール表示は以下のようになります<br>引数が12345の場合<br>---<br>human=1 dog=2 cat=3 horse=4 capybara=5<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>A=================================================<br>----',1,'2017-12-06 11:16:32','2017-12-06 11:16:32',1,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-05]動物レースをつくろう5','次に、いよいよ　動物の種類ごとにクラスを作ります。<br><br>Animalクラスを親として<br>人間クラス（クラス名：Human）<br>犬クラス（クラス名：Dog）<br>猫クラス（クラス名：Cat）<br>カピバラクラス（クラス名：Capybara）<br>馬クラス（クラス名：Horse）<br>をつくります。<br><br>そして、動物ごとに現在位置の表示文字を変えます。<br>人間は@<br>犬はD<br>猫はC<br>カピバラはB<br>馬はH<br>です。<br><br>また、ついでに各動物のスピードを各クラスのコンストラクタで設定します。<br>設定値は<br>人間が３<br>犬が５<br>猫が４<br>カピバラが２<br>馬が１０です<br><br>効率の良い方法はないかと考え、あなたは考え付きました<br>「ピピーンとひらめいた！オーバーライドを使えばいいわね！」<br><br>Animalクラスに<br>自分を表す文字を返す displayIcon というメソッドを作り、各サブクラスで<br>オーバーライドをして、人間なら\"@\"、犬なら\"D\"を返すようにすれば良いいのです。<br><br>具体的にやることは以下のとおりです<br>---------------------------------------------<br>(1)Animalクラスに displayIcon メソッドを追加する。仕様は以下の通り<br>　メソッド名：displayIcon<br>　引数：なし<br>　戻り値：クラスの種類を表す文字列を返す<br>　<br>(2)動物を表すクラス Human、Dog、Cat、Capybara、HorseクラスをそれぞれAnimalクラスを<br>　親として作成する<br>　<br>(3)Human、Dog、Cat、Capybara、HorseそれぞれのクラスでdisplayIconをオーバーライドして<br>　displayIconで、自分の現在地を表す文字列を返すようにする<br>　<br>(3)各クラスのコンストラクタを引数無で作成し、各コンストラクタの中で親のコンストラクタを呼ぶ<br>　　その際、それぞれの動物に設定するスピードの値を引数で渡す<br>　　<br>(4)Animalクラスのdisplayで、現在地の表示を今は\"A\"としているが、そこをdisplayIconメソッドを<br>　よぶように変える<br>　<br>(5)AnimalRaceで、今は、インスタンスを全てAnimalクラスのインスタンスで作っているが<br>　人間、犬、猫、カピバラ、馬、それぞれの数（引数で受け取ったそれぞれの数）に応じて<br>　Humanクラス、Dogクラスを作る<br>　そして、動物の合計数分ループしてdisplayメソッドを呼び出す<br>---------------------------------------------<br>　　<br>(5)のヒント、引数から、人間、犬、猫、カピバラ、馬がそれぞれ何匹居るかは変数に入っている。<br>　その変数分ループして、目的のインスタンスを作る。<br><br>例）引数が12345なら<br>人間インスタンスを１つ、犬インスタンスを２つ、猫インスタンスは３つ、馬は４つ、カピバラは５つ<br>作る。何個あるのか判らないので、以下のようにfor文を5つ作る。<br><br>		int index = 0;<br>		//人間クラスのインスタンスを作るループ<br>		for( int i = 0; i < human; i++,index++ ){<br>			animals[index] = new Human();<br>		}<br>		//犬クラスのインスタンスを作るループ<br>		for( int i = 0; i < dog; i++,index++ ){<br>			animals[index] = new Dog();<br>		}<br>		//猫クラスのインスタンスを作るループ<br>		for( int i = 0; i < cat; i++,index++ ){<br>			animals[index] = new Cat();<br>		}<br>		//馬クラスのインスタンスを作るループ<br>		for( int i = 0; i < horse; i++,index++ ){<br>			animals[index] = new Horse();<br>		}<br>		//カピバラクラスのインスタンスを作るループ<br>		for( int i = 0; i < capybara; i++,index++ ){<br>			animals[index] = new Capybara();<br>		}',1,'2017-12-06 11:20:54','2017-12-06 11:20:54',2,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-06]動物レースをつくろう6','さぁ、いよいよ。レースのプログラムを作ります。<br>スピードは設定されているので、1回の移動でどれくらい動くかは<br>分かっています。<br>ですので、動物を動かす処理は、各クラスに持つ必要は無いです。<br><br>なので、あなたは<br>「全てのクラスの親であるAnimalクラスにmoveというメソッドを追加すればいいわね。<br>　そしてmoveメソッドの中で、現在位置であるposの値を増やして行けばOKね！」<br><br>仕様で一回の移動量は、speedの変数値をMAXにランダムで決めることになっています。<br>つまり、speedの値が5だったとしたら0～4の値がランダムで決められます。<br><br>追加するmoveメソッドは以下の通りです？の部分は自分で考えてください<br>----------[Animal.java]---------<br>import java.util.*;<br><br>public abstract class Animal{<br>	private int speed;<br>	private int pos;<br>	private static Random r = new Random(20171205);<br>	private final static int FIELD_LEN = 50;<br>	<br>	・・・（中略）・・・<br>	<br>	public void move(){<br>		？ += r.nextInt(speed);<br>	}<br>	<br>	・・・（中略）・・・<br>}<br>---------------------<br><br>具体的には・・・<br>(1)Animalクラスにmoveメソッドを追加（↑の？を埋める）<br>(2)AnimalRaceクラスで、moveメソッドを呼び出す<br><br>このプログラムが完成したらコンソールには以下のように表示されます<br>【引数が12345の場合】<br>human=1 dog=2 cat=3 horse=4 capybara=5<br>@=================================================<br>===D==============================================<br>====D=============================================<br>C=================================================<br>=C================================================<br>C=================================================<br>=H================================================<br>======H===========================================<br>=====H============================================<br>========H=========================================<br>=B================================================<br>=B================================================<br>=B================================================<br>B=================================================<br>=B================================================',1,'2017-12-06 11:35:02','2017-12-06 11:35:02',2,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-07]動物レースをつくろう7','ここであなたはあることに気付きました・・・<br><br>「あれ？Animalクラスって、インスタンス作る場面が無いなぁ」<br>さらに<br>「AnimalクラスのdisplayIconメソッドって使われないやん。実装する意味ないなぁ。」<br><br>そうすると、ノーニシ社長が声をかけました。<br>「だったら、AnimalクラスとdispIconメソッドは抽象化すればいいじゃないかぁぁあ」<br><br>社長には逆らえません。あなたはAnimalクラスとdispIconを抽象化することにしました。<br><br>具体的にやること<br>(1)AnimalクラスとAnimalクラスのdispIconを抽象化する（abstractをつける）<br><br>※この修正でコンソールの表示は変わりません。<br>　でも、前のプログラムをそのまま読み込ませて点数稼ぐのはなしね',1,'2017-12-06 11:26:06','2017-12-06 11:26:06',1,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-08]動物レースをつくろう8ボツ','ノーニシ社長が「良くここまでがんばってね。これで最後つまり、この問題がラスボスだ」とあなたに声をかけました。<br><br>あとは、<br>----<br>for( int j = 0; j < animals.length; j++){<br>	animals[j].move();<br>	animals[j].display();<br>}<br>----<br>の部分を誰かがゴールするまで繰り返せば良いというのは分かるのですが<br>同プログラムを書けば良いか分かりません。<br><br>どうすれば良いかを悩んでいると、ノーニシ社長がアドバイスをくれました<br>「まず、Animalクラスに、ゴールしたかどうかの判定をするメソッドを追加しなさい。<br>　そして、AnimalRaceクラスでmoveを実行した直後にその判定メソッドでゴールしたかを<br>　判定するのだよ。<br>　最後に、moveとdisplayを実行しているfor文自体をwhile文で囲んで判定メソッドで「ゴールした」<br>　と判定されるまで繰り返すようにすれば良いのだよ」<br><br>ついでにちょっと見づらくなるので、1ターンごとに改行を入れましょう<br>　<br>具体的にやること<br>(1)Animalクラスにゴールしたかどうかを判定するIsGoalというメソッドを追加する。<br>　IsGoalの仕様<br>　メソッド名：IsGoal<br>　引数：なし<br>　戻り値：boolean（trueならゴール、falseなら未ゴール）<br>　処理内容：現在地がゴール（FIELD_LEN）より大きいかどうかを確認し大きければtrue、小さければfalseを返す<br>　<br>(2)AnimalRaceクラスで、move、displayを読んだ直後にゴールしたかどうかをチェックする。<br><br>(3)AnimalRaceクラスのmove、displayがあるfor文をwhile文で囲み、どれかのインスタンスがゴールするまで<br>　ループするように条件を設定する<br><br>(4)１回のループごとに改行を入れる<br><br><br>引数が11111の場合は、コンソールの表示は以下のようになる<br>human=1 dog=1 cat=1 horse=1 capybara=1<br>@=================================================<br>===D==============================================<br>=C================================================<br>=====H============================================<br>B=================================================<br><br>@=================================================<br>====D=============================================<br>==C===============================================<br>==========H=======================================<br>B=================================================<br><br>@=================================================<br>=======D==========================================<br>=====C============================================<br>===============H==================================<br>=B================================================<br><br>～（中略）～<br><br>========@=========================================<br>=========================D========================<br>==============C===================================<br>===============================================H==<br>=====B============================================<br><br>==========@=======================================<br>=============================D====================<br>================C=================================<br>=================================================H<br>======B===========================================<br><br>==========@=======================================<br>=============================D====================<br>=================C================================<br>==================================================<br>=======B==========================================',1,'2017-12-06 11:43:11','2017-12-06 11:43:11',2,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST13-08]動物レースをつくろう8','ノーニシ社長が「良くここまでがんばってね。これで最後つまり、この問題がラスボスだ」とあなたに声をかけました。<br><br>あとは、<br>----<br>for( int j = 0; j < animals.length; j++){<br>	animals[j].move();<br>	animals[j].display();<br>}<br>----<br>の部分を誰かがゴールするまで繰り返せば良いというのは分かるのですが<br>同プログラムを書けば良いか分かりません。<br><br>どうすれば良いかを悩んでいると、ノーニシ社長がアドバイスをくれました<br>「まず、Animalクラスに、ゴールしたかどうかの判定をするメソッドを追加しなさい。<br>　そして、AnimalRaceクラスでmoveを実行した直後にその判定メソッドでゴールしたかを<br>　判定するのだよ。<br>　最後に、moveとdisplayを実行しているfor文自体をwhile文で囲んで判定メソッドで「ゴールした」<br>　と判定されるまで繰り返すようにすれば良いのだよ」<br><br>ついでにちょっと見づらくなるので、1ターンごとに改行を入れましょう<br>　<br>具体的にやること<br>(1)Animalクラスにゴールしたかどうかを判定するIsGoalというメソッドを追加する。<br>　IsGoalの仕様<br>　メソッド名：IsGoal<br>　引数：なし<br>　戻り値：boolean（trueならゴール、falseなら未ゴール）<br>　処理内容：現在地がゴール（FIELD_LEN）より大きいかどうかを確認し大きければtrue、小さければfalseを返す<br>　<br>(2)AnimalRaceクラスで、move、displayを読んだ直後にゴールしたかどうかをチェックする。<br><br>(3)AnimalRaceクラスのmove、displayがあるfor文をwhile文で囲み、どれかのインスタンスがゴールするまで<br>　ループするように条件を設定する<br><br>(4)１回のループごとに改行を入れる<br><br><br>引数が11111の場合は、コンソールの表示は以下のようになる<br>human=1 dog=1 cat=1 horse=1 capybara=1<br>@=================================================<br>===D==============================================<br>=C================================================<br>=====H============================================<br>B=================================================<br><br>@=================================================<br>====D=============================================<br>==C===============================================<br>==========H=======================================<br>B=================================================<br><br>@=================================================<br>=======D==========================================<br>=====C============================================<br>===============H==================================<br>=B================================================<br><br>～（中略）～<br><br>========@=========================================<br>=========================D========================<br>==============C===================================<br>===============================================H==<br>=====B============================================<br><br>==========@=======================================<br>=============================D====================<br>================C=================================<br>=================================================H<br>======B===========================================<br><br>==========@=======================================<br>=============================D====================<br>=================C================================<br>==================================================<br>=======B==========================================',1,'2017-12-06 11:50:20','2017-12-06 11:50:20',2,1,43,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-01]引数の値をコンソールに表示せよ！','mainの引数で渡された値をそのままコンソールに表示してください。<br>引数は1つ以上５つ以下で何個渡されるかは分かりません。<br><br>例）引数に aaa、bbbの2つが渡された場合<br>コンソールに<br>==========<br>aaa<br>bbb<br>==========<br>と表示します。',1,'2017-12-19 13:21:58','2017-12-19 13:21:58',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-02]１か２か！','mainの引数で数値が渡されます。<br>渡された数値が1又は2の場合はコンソールに<br>==========<br>渡されたのは１か２です<br>=========<br>と表示し、それ以外の値が渡された場合は<br>==========<br>渡されたのは、１と２以外です<br>==========<br>と表示してください。<br><br>なお、渡される引数は必ず数値で、1つだけとします。<br><br>ヒント：mainの引数で受け取った値を数値に変換するのはInteger.parseIntを使います',1,'2017-12-19 13:22:19','2017-12-19 13:22:19',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-03]テンテロテン','mainの引数で数値が２つ渡されます。<br><br>渡された数値が同じで勝つ１の場合はコンソールに<br>==========<br>ピンゾロ<br>=========<br>と表示し、1以外の同じ値の場合はコンソールに<br>==========<br>ゾロ目！<br>==========<br>と表示し、それ以外の場合はコンソールに<br>==========<br>値はXXとYYです<br>==========<br>※XXは第1引数の値、YYは第2引数の値<br>と表示してください。<br><br>なお、渡される引数は必ず数値で、かならず２つとします。<br><br>ヒント：mainの引数で受け取った値を数値に変換するのはInteger.parseIntを使います',1,'2017-12-19 13:22:37','2017-12-19 13:22:37',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-04]ギャンブル好きのK先生','賭け事好きなK先生がサイコロゲームを作ります。<br><br>mainの引数で数値が４つ渡されます。<br><br>4つの数字は<br>第1引数と第2引数が、Aさんが振って出たサイコロの出目<br>第3引数と第4引数が、Bさんが振って出たサイコロの出目<br>です。<br><br>二つのサイコロの組み合わせで点数が付いています<br>[1][1]・・・20点<br>[2][2]・・・15点<br>[3][3]・・・16点<br>[4][4]・・・17点<br>[5][5]・・・18点<br>[6][6]・・・19点<br>それ以外は、サイコロの出目の合計が点数になります。<br><br>出目からAさん、Bさんそれぞれの点数を計算し、それぞれの点数と<br>どちらが勝ったかをコンソールに表示してください。<br><br>例）引数が<br>第1引数：1<br>第2引数：2<br>第3引数：3<br>第4引数：3<br>のとき、Aさんの出目は1と2で1+2で3点<br>Bさんの出目は、3と3で16点なのでBさんの勝ち。<br><br>この場合、コンソールには<br>=================<br>Aさんの点数:3点<br>Bさんの点数:16点<br>Bさんの勝利<br>=================<br>と表示します<br><br>例）引数が<br>第1引数：4<br>第2引数：3<br>第3引数：2<br>第4引数：5<br>のとき、Aさんの出目は4と3で4+3で7点<br>Bさんの出目は、2と5で2+5で7点。引き分け<br><br>この場合、コンソールには<br>=================<br>Aさんの点数:7点<br>Bさんの点数:7点<br>引き分け<br>=================<br>と表示します<br><br>なお、引数は必ず数値の文字列が渡されるとし、かならず４つ引数が渡されるものとする。<br><br>100点へのヒント：点数を計算する部分は、AさんもBさんも同じなので、点数計算部分は<br>　　　　　　　　メソッド化するとif文の数が減って複雑度が減ります',1,'2017-12-19 13:33:22','2019-04-26 12:14:07',2,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-05]カンマ区切りのベイベー','mainの引数に<br>カンマ区切りで文字列が渡されます。<br><br>以下のメソッドを使うと、カンマ区切りの文字列を文字列の配列に変換することが出来ます。<br>以下のメソッドを使って、カンマ区切りの文字列を分解し、全て表示してください。<br><br>private static String[] getStrings(String src){<br>	if( src == null ){<br>		return new String[0];<br>	}<br><br>	return src.split(\",\");<br>}',1,'2017-12-19 13:24:52','2017-12-19 13:24:52',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-06]カイジョウダジョウ','以下のメソッドを実装してください。<br><br>メソッド名：kaijou<br>戻り値：整数値<br>引数：整数値一つ<br>処理内容：引数で受け取った数値の階乗を計算し、戻り値として戻す<br><br>--------<br>public class JssSt1406 {<br><br>	public static void main(String[] args) {<br>		int num = Integer.parseInt(args[0]);<br>		JssSt1406 obj = new JssSt1406();<br><br>		System.out.println(obj.kaijo(num));<br>	}<br><br>	？？？（ここにメソッドを実装する）<br>}',1,'2017-12-19 13:26:00','2017-12-19 13:26:00',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-07]まーりお','以下のクラスを実装してください<br><br>クラス名：Mario<br>インスタンスメソッド名：display（戻り値、引数はなし）<br>インスタンスメソッドの処理：文字列で 「Mario」と表示する<br><br>作成したら、mainメソッドで、Marioのインスタンスを作り<br>displayメソッドを呼んでください。<br><br>mainメソッドを持つクラス側は↓の？を埋めてください。<br>Marioクラスは自分で作成してください<br>--------------<br>public class JssSt1407 {<br><br>	public static void main(String[] args) {<br>		Mario m = ？<br><br>		m.display();<br>	}<br><br>}',1,'2017-12-19 13:27:28','2017-12-19 13:27:28',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-08]ふぁいあー！','以下のクラスを実装してください<br><br>クラス名：FireMario<br>親クラス：Mario<br>インスタンスメソッド名：display（戻り値、引数はなし）<br>インスタンスメソッドの処理：文字列で 「FireMario」と表示する<br><br>作成したら、mainメソッドで、Mario型の変数にFireMarioのインスタンスを作り<br>displayメソッドを呼んでください。<br><br>mainメソッドを持つクラス側は↓の？を埋めてください。<br>Marioクラスは自分で作成してください<br>--------------<br>public class JssSt1407 {<br><br>	public static void main(String[] args) {<br>		Mario m = ？<br><br>		m.display();<br>	}<br><br>}',1,'2017-12-19 13:28:29','2017-12-19 13:28:29',1,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST14-09]もんすたーorぷれいやー','以下の3つのクラスを実装してください。<br><br><br>クラス名：Monster<br>インスタンス変数：体力を表す整数値の変数<br>　　　　　　　　　モンスターの名前を表す変数<br>インスタンスメソッド：display（戻り値、引数なし）<br>インスタンスメソッドの処理内容：<br>　モンスターの名前をHPを以下の形式で1行で表示する<br>　==================<br>　モンスター名:モンスターの体力<br>　==================<br>　<br>クラス名：Player<br>インスタンス変数：体力を表す整数値の変数<br>インスタンスメソッド：display（戻り値、引数なし）<br>インスタンスメソッドの処理内容：<br>　モンスターの名前をHPを以下の形式で1行で表示する<br>　==================<br>　あなた:体力の値<br>　==================<br>　<br>Playerの体力、モンスターの名前と体力はそれぞれ<br>mainの引数で渡されます<br>第1引数：Playerの体力<br>第2引数：モンスターの名前<br>第3引数：モンスターの体力<br><br>また、第4引数には、Playerとモンスターのどちらを表示するかが渡されます<br>第4引数：0→Playerを表示<br>　　　　 1→モンスターを表示<br>　　　　 <br><br>あなたは、Monster、Player、mainメソッドがあるクラスの３つのクラスを作成<br>引数に応じて、Playerクラスの情報、またはモンスターの情報のどちらかを表示してください<br><br>例）<br>第1引数：50<br>第2引数：スライム<br>第3引数：10<br>第4引数：0<br>の場合、Playerの体力が50、モンスターの名前は「スライム」モンスターの体力は10で<br>Playerを表示するのでコンソールには<br>==================<br>あなた:50<br>==================<br>と表示する<br><br><br>第1引数：50<br>第2引数：ドラゴン<br>第3引数：100<br>第4引数：1<br>の場合、Playerの体力が50、モンスターの名前は「ドラゴン」モンスターの体力は100で<br>モンスターを表示するのでコンソールには<br>==================<br>ドラゴン:100<br>==================<br>と表示する<br><br>※わかる人は、MonsterクラスとPlayerクラスの親クラス（4つ目のクラス）を作成して、効率よくプログラムを組む方法を考えよう！',1,'2017-12-19 13:29:47','2017-12-19 13:29:47',2,1,46,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-01]ダンボール師匠','あなたは、大規模な引越しがあるので、とにかくダンボールを作ってくれと頼まれました。<br>あなたが1日で作れるダンボールの数は50個です。<br>何個作れば良いかは、異なり、mainの第1引数で渡されます。<br><br>与えられた個数のダンボールが何日あれば作ることが出来るかを計算して<br>コンソールに表示してください。<br><br>例）<br>mainの第1引数に120と渡された場合<br><br>120÷50＝2余り20なので<br>3日あれば大丈夫。<br><br>この場合コンソールには<br>=======<br>3日<br>=======<br>と表示する<br><br>ヒント１：第1引数の受け取り方、数値への変換方法は過去の問題を見て思い出そう！<br>ヒント２：必要な日数の計算は、割り算をして余りが出れば（剰余が0でなければ）＋１日すればOK。',1,'2018-01-09 11:31:09','2018-01-09 11:31:09',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-02]映画料金','<if文の復習><br>映画のチケットの計算をします。<br>条件は以下の通りです！<br>・毎月1日は一律1000円<br>・毎月10日は、レディースデーで女性は500円<br>・毎月20日は、メンズデーで男性は3500円<br>・それ以外は、2000円<br><br>第1引数に日、第2引数に性別（0:男性 1:女性）が渡されるので料金を計算してください。<br><br>例）<br>　第1引数：1（1日）<br>　第2引数：0（男性）<br>　の場合は、1日なので1000円。コンソールには<br>　=======<br>　料金は1000円<br>　=======<br>　と表示する<br>　<br>　第1引数：10（1日）<br>　第2引数：1（女性）<br>　の場合は、10日で女性なので1000円。<br>　=======<br>　料金は1000円<br>　=======<br>　と表示する<br>　<br>　第1引数：10（1日）<br>　第2引数：0（男性）<br>　の場合は、10日で男性なのでレディースデーの対象外で2000円。<br>　=======<br>　料金は2000円<br>　=======<br>　と表示する',1,'2018-01-09 11:32:57','2018-01-09 11:32:57',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-03]映画料金2','<if文の復習><br>もうちょっと複雑な映画のチケットの計算をします。<br>条件は以下の通りです！<br>・13未満は半額<br>・毎月1日は一律1000円<br>・毎月10日は、レディースデーで女性は500円<br>・毎月20日は、メンズデーで男性は3500円<br>・毎月3がつく日は未成年は無料<br>・それ以外は、2000円<br>※１３未満の場合、割引金額からさらに半額になる<br><br>第1引数に日、第2引数に性別（0:男性 1:女性）、第3引数に年齢が渡されるので料金を計算してください。<br><br>例）<br>　第1引数：1（1日）<br>　第2引数：0（男性）<br>　第3引数：20<br>　の場合は、1日なので1000円。コンソールには<br>　=======<br>　料金は1000円<br>　=======<br>　と表示する<br>　<br>　第1引数：30（30日）<br>　第2引数：1（女性）<br>　第3引数：19<br>　の場合は、3がつく日で未成年なので無料。<br>　=======<br>　料金は0円<br>　=======<br>　と表示する<br>　',1,'2018-01-09 11:43:07','2018-01-09 11:43:07',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-04]総和は？','<繰り返し文の復習><br><br>1～100までの総和をコンソールに表示してください。',1,'2018-01-09 11:37:45','2018-01-09 11:37:45',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-05]偶数の総和は？？','<繰り返し文の復習><br><br>1～1000までの偶数の総和をコンソールに表示してください。<br><br>ヒント：偶数は「２で割り切れる値（＝2の剰余が0）」です',1,'2018-01-09 11:38:45','2018-01-09 11:38:45',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-06]メソッドを作ろう！','<メソッドの復習><br><br>以下のメソッドを作成して、呼び出して実行してください。<br><br>メソッド名：display<br>　戻り値　：なし<br>　引　数　：なし<br>処理内容　：\"hello method!\"と表示する',1,'2018-01-09 11:39:47','2018-01-09 11:39:47',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-07]メソッドを作ろう2！','<メソッドの復習><br><br>以下のメソッドを作成して、呼び出して実行してください。<br><br>メソッド名：multi<br>　戻り値　：整数型<br>　引　数　：整数型を二つ<br>処理内容　：引数で受け取った整数を掛け算して、戻り値で返す<br><br>なお、multiメソッドを呼び出す時は、引数にmainメソッドの第1引数と第2引数を与えるものとする<br>例）第１引数に6、第２引数に8の場合、コンソールには<br>-------------<br>　6*8=48<br>-------------<br>　と表示する',1,'2018-01-09 11:40:43','2018-01-09 11:40:43',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-08]あたたたたたたたた','<クラスの復習><br><br>以下のクラスを作成して、インスタンスを作成して、displayメソッドを呼び出せ！<br><br>クラス名：HokutonoKen<br>インスタンス変数：整数型で繰り返し回数を保存する変数<br>コンストラクタ：整数型の引数を１つ取り、引数の値をインスタンス変数に保存する<br>インスタンスメソッド：<br>　　メソッド名：display<br>　　引　　　数：なし<br>　　戻　り　値：なし<br>　　処理内容　：インスタンス変数で指定された値の数分コンソールに文字列「あた！」を表示する<br><br><br><br><br><br><br><br><br><br>分からない人は↓を見よう。分かる人は見ないで全部自分で書いてみよう！<br>-----------------------<br>public class HokutonoKen {<br>	//インスタンス変数：整数型で繰り返し回数を保存する変数<br>	？;<br><br>	//コンストラクタ：整数型の引数を１つ取り、引数の値をインスタンス変数に保存する<br>	？{<br>		this.count = count;<br>	}<br><br>	//インスタンスメソッド<br>	//インスタンス変数で指定された値の数分コンソールに文字列「あた！」を表示する<br>	？？（複数行）<br><br>}<br><br><br>public class JssSt1508 {<br><br>	public static void main(String[] args) {<br>		int num1 = Integer.parseInt(args[0]);<br><br>		HokutonoKen obj = new HokutonoKen(num1);<br>		obj.display();<br>	}<br><br>}<br>-----------------------<br>',1,'2018-01-09 11:42:11','2018-01-09 11:42:11',2,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-09]犬だよ','Animalクラスを継承したDogクラスを作って<br>コンソールに<br>====<br>wan<br>====<br>と表示したい。<br>AnimalクラスとJssSt1509クラスはわかっているので<br>Dogクラスを作ってください<br>----[Animal.java]----<br>public class Animal {<br>	public void call(){<br>		System.out.println(\"Animal\");<br>	}<br>}<br><br>----[JssSt1509.java]----<br>public class JssSt1509 {<br><br>	public static void main(String[] args) {<br>		Animal animal = new Dog();<br><br>		animal.call();<br>	}<br><br>}',1,'2018-01-14 15:32:59','2018-01-14 15:32:59',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-10]どこが間違ってるんですか！','次のプログラムを実行すると、mainの引数で渡された名前をコンソールに<br>表示するようなプログラムを作成したのだが、コンパイルが通らない<br>どう修正すればよいか？<br>例）引数が「nishino」の場合コンソールに<br>====<br>nishino<br>====<br>と表示する<br>※コンパイルが通った後、プログラムの修正が必要であれば修正すること<br>※Personクラスのabstractは外さないこと<br><br>---[Person.java]---<br>public abstract class Person {<br>	public abstract void display(){<br>		System.out.println(\"nothing\");<br>	}<br>}<br><br>---[Man.java]---<br>public class Man extends Person {<br><br>	String name;<br><br>	public Man(String name){<br>		name = this.name;<br>	}<br><br>}<br><br>---[JssSt1510.java]---<br>public class JssSt1510 {<br><br>	public static void main(String[] args) {<br>		Person p = new Man(args[0]);<br><br>		p.display();<br><br>	}<br><br>}<br>',1,'2018-01-14 14:52:53','2018-01-14 14:52:53',1,1,47,1,0);
INSERT INTO `ASSIGNMENT_TBL` (`assignment_id`,`title`,`contents`,`CREATE_USER_ID`,`create_date`,`update_date`,`difficulty`,`update_user_id`,`group_id`,`group_in_no`,`good`) VALUES (null,'[JSS-ST15-11]海戦ゲームを作る！','海戦ゲームのさわりの部分を作ります。<br>海戦ゲームがわからない人は、調べてくれ。<br><br>まずは、海の上に船がいる様子をコンソールに表示します。<br>特別ルールとして、通常の船と、スーパーな船の2種類を１艘づつ１０×１０のマス目上に<br>表示しようと思います。<br><br>通常船とスーパー船の位置は、mainの引数でもらい、表示は<br>それぞれ、○と◎とします。海は＾（全角文字）で表示します。<br>引数の位置情報は以下の通りです<br>第１引数：通常船の縦位置<br>第２引数：通常船の横位置<br>第３引数：スーパー船の縦位置<br>第４引数：スーパー船の横位置<br><br><br>たとえば<br>第１引数が２<br>第２引数が０<br>第３引数が４<br>第４引数が５の場合<br>通常船の位置が（２，０）、スーパー船の位置が（４、５）<br>なので、コンソールの表示は<br>======<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>○＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾◎＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>＾＾＾＾＾＾＾＾＾＾<br>======<br>と表示する。<br>※配列の特性上、縦がX、横がYになっています<br><br>内部実装は、通常船を表すShipクラス、スーパー船を表す<br>SuperShipクラスを使う。<br>mainクラスでShipクラスの１０×１０の配列を用いて<br>船の位置に該当する配列の箇所にShipクラス又はスーパークラスの<br>インスタンスを格納し、表示する場合は配列の要素が<br>nullであれば海を表す＾をそうでなければ船を表す○か◎を表示する<br><br>mainクラスであるJssSt1511の実装はわかっている状態で、Shipクラスと<br>SuperShipクラスを作ってください。<br><br>なお、ShipクラスとSuperShipクラスの仕様は以下の通り<br>-----<br>Shipクラス<br>・通常船の「○」を表示するためのメソッドdisplayを持つ<br>・将来の拡張性を考え、現在船がどこにあるのかの位置情報（x位置,y位置）を内部に持ち<br>　コンストラクタで受け取り、インスタンス変数に保存する<br><br>-----<br>SuperShipクラス<br>・Shipクラスのサブクラスとする<br>・スーパークラスの「◎」を表示するためのメソッドdisplayを持つ<br>・Shipクラスのコンストラクタに渡すために、位置情報を受け取るコンストラクタを持つ<br><br>---[JssSt1511.java]---<br>public class JssSt1511 {<br>	private final static int MAPX = 10;<br>	private final static int MAPY = 10;<br><br>	private Ship[][] ship = new Ship[MAPX][MAPY];<br><br>	public static void main(String[] args) {<br>		int x1 = Integer.parseInt(args[0]);<br>		int y1 = Integer.parseInt(args[1]);<br>		int x2 = Integer.parseInt(args[2]);<br>		int y2 = Integer.parseInt(args[3]);<br>		JssSt1511 main = new JssSt1511();<br><br>		main.display(x1,y1,x2,y2);<br><br>	}<br><br>	public void display(int x1,int y1,int x2,int y2){<br><br>		if(x1 >= MAPX || y1 >= MAPY || x2 >= MAPX || y2 >= MAPY ){<br>			//error<br>			return ;<br>		}<br><br>		ship[x1][y1] = new Ship(x1,y1);<br>		ship[x2][y2] = new SuperShip(x2,y2);<br><br>		for( int x = 0; x < MAPX; x++ ){<br>			for(int y = 0; y < MAPY; y++){<br>				if( ship[x][y] == null ){<br>					System.out.print(\"＾\");<br>				}else{<br>					ship[x][y].display();<br>				}<br>			}<br>			System.out.println(\"\");<br>		}<br>	}<br>}',1,'2018-01-15 00:59:28','2018-01-15 00:59:28',2,1,47,1,0);
update ASSIGNMENT_TBL a set group_id=(select group_id from GROUP_TBL g where g.name=substr(a.title,2,8));