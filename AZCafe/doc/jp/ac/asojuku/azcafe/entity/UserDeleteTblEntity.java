package jp.ac.asojuku.azcafe.entity;

import java.io.Serializable;

/**
 * 削除済みユーザー モデルクラス.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class UserDeleteTblEntity implements Serializable {

	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** user_id. */
	private Integer userId;

	/** 学籍番号/社員番号. */
	private String orgNo;

	/** ニックネーム. */
	private String nickName;

	/** 学生名. */
	private String name;

	/** メールアドレス. */
	private String mail;

	/** ログインパスワード. */
	private String password;

	/** ユーザーのタイプ. */
	private Integer role;

	/** クラスＩＤ. */
	private Integer homeroomId;

	/** 学年. */
	private Integer grade;

	/** 入学年度. */
	private Integer enterYear;

	/** 紹介文. */
	private String introduction;

	/**
	 * コンストラクタ.
	 */
	public UserDeleteTblEntity() {
	}

	/**
	 * user_id を設定します.
	 * 
	 * @param userId
	 *            user_id
	 */
	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	/**
	 * user_id を取得します.
	 * 
	 * @return user_id
	 */
	public Integer getUserId() {
		return this.userId;
	}

	/**
	 * 学籍番号/社員番号 を設定します.
	 * 
	 * @param orgNo
	 *            学籍番号/社員番号
	 */
	public void setOrgNo(String orgNo) {
		this.orgNo = orgNo;
	}

	/**
	 * 学籍番号/社員番号 を取得します.
	 * 
	 * @return 学籍番号/社員番号
	 */
	public String getOrgNo() {
		return this.orgNo;
	}

	/**
	 * ニックネーム を設定します.
	 * 
	 * @param nickName
	 *            ニックネーム
	 */
	public void setNickName(String nickName) {
		this.nickName = nickName;
	}

	/**
	 * ニックネーム を取得します.
	 * 
	 * @return ニックネーム
	 */
	public String getNickName() {
		return this.nickName;
	}

	/**
	 * 学生名 を設定します.
	 * 
	 * @param name
	 *            学生名
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * 学生名 を取得します.
	 * 
	 * @return 学生名
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * メールアドレス を設定します.
	 * 
	 * @param mail
	 *            メールアドレス
	 */
	public void setMail(String mail) {
		this.mail = mail;
	}

	/**
	 * メールアドレス を取得します.
	 * 
	 * @return メールアドレス
	 */
	public String getMail() {
		return this.mail;
	}

	/**
	 * ログインパスワード を設定します.
	 * 
	 * @param password
	 *            ログインパスワード
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * ログインパスワード を取得します.
	 * 
	 * @return ログインパスワード
	 */
	public String getPassword() {
		return this.password;
	}

	/**
	 * ユーザーのタイプ を設定します.
	 * 
	 * @param role
	 *            ユーザーのタイプ
	 */
	public void setRole(Integer role) {
		this.role = role;
	}

	/**
	 * ユーザーのタイプ を取得します.
	 * 
	 * @return ユーザーのタイプ
	 */
	public Integer getRole() {
		return this.role;
	}

	/**
	 * クラスＩＤ を設定します.
	 * 
	 * @param homeroomId
	 *            クラスＩＤ
	 */
	public void setHomeroomId(Integer homeroomId) {
		this.homeroomId = homeroomId;
	}

	/**
	 * クラスＩＤ を取得します.
	 * 
	 * @return クラスＩＤ
	 */
	public Integer getHomeroomId() {
		return this.homeroomId;
	}

	/**
	 * 学年 を設定します.
	 * 
	 * @param grade
	 *            学年
	 */
	public void setGrade(Integer grade) {
		this.grade = grade;
	}

	/**
	 * 学年 を取得します.
	 * 
	 * @return 学年
	 */
	public Integer getGrade() {
		return this.grade;
	}

	/**
	 * 入学年度 を設定します.
	 * 
	 * @param enterYear
	 *            入学年度
	 */
	public void setEnterYear(Integer enterYear) {
		this.enterYear = enterYear;
	}

	/**
	 * 入学年度 を取得します.
	 * 
	 * @return 入学年度
	 */
	public Integer getEnterYear() {
		return this.enterYear;
	}

	/**
	 * 紹介文 を設定します.
	 * 
	 * @param introduction
	 *            紹介文
	 */
	public void setIntroduction(String introduction) {
		this.introduction = introduction;
	}

	/**
	 * 紹介文 を取得します.
	 * 
	 * @return 紹介文
	 */
	public String getIntroduction() {
		return this.introduction;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((userId == null) ? 0 : userId.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		UserDeleteTblEntity other = (UserDeleteTblEntity) obj;
		if (userId == null) {
			if (other.userId != null) {
				return false;
			}
		} else if (!userId.equals(other.userId)) {
			return false;
		}
		return true;
	}

}
